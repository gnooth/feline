-- Copyright (C) 2017-2018 Peter Graves <gnooth@gmail.com>

-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.

-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline accessors ;
in: user

"compiler" delete-vocab

in: compiler

empty

private

-- These definitions shadow the ones in compile-word.asm. Turning on
-- verbosity in this vocabulary only affects the optimizing compiler.
global compile-verbose?
: +v t compile-verbose?! ;
: -v f compile-verbose?! ;

global origin
global pc

: emit-byte                             -- byte -> void
    pc c!
    pc 1+ pc! ;

: emit-dword                            -- dword -> void
    pc l!
    pc 4 + pc! ;

: emit-qword                            -- qword -> void
    pc !
    pc 8 + pc! ;

: emit-bytes                            -- sequence -> void
    ' emit-byte each ;

tuple: instruction op param ;

: make-instruction                      -- op param -> instruction
    instruction make-instance           -- -> op param instruction
    swap >>param
    swap >>op ;

: literal?                              -- instruction -> ?
    op>> f eq? ;

: inst.                                 -- instruction -> void
    ?nl
    "op: " write-string
    dup op>> object->string write-string
    space
    "param: " write-string
    param>> object->string write-string
;

: precompile-object  ( x )              -- object -> instruction
    x symbol? [
        x f make-instruction
    ] [
        x quotation? [
            x quotation-code-address zero? [
                x feline:primitive-compile-quotation
                x quotation-code-address zero? assert-false
            ] when
        ] when
        f x make-instruction
    ] if
;


: precompile-object                     -- object -> instruction
    dup symbol? [ f ] [ f swap ] if
    make-instruction ;

: emit-pushrbx
    { 0x48 0x89 0x5d 0xf8 0x48 0x8d 0x6d 0xf8 } emit-bytes ;

: emit-poprbx
    { 0x48 0x8b 0x5d 0x00 0x48 0x8d 0x6d 0x08 } emit-bytes ;

: compile-literal                       -- x -> void
    dup wrapper? [ wrapped ] when

    emit-pushrbx
    object>uint64
    dup 32 rshift 0 = [
        0xbb emit-byte emit-dword
    ] [
        0x48 emit-byte 0xbb emit-byte emit-qword
    ] if ;

: inline-primitive
    dup symbol-code-address
    swap symbol-code-size               -- -> address size
    1-                                  -- adjust size to exclude ret instruction
    pc swap [ copy-bytes ] keep         -- -> size
    pc + pc! ;

: compile-call -- symbol ->
    symbol-code-address
    dup pc 5 + -                        -- -> tagged-address tagged-displacement
    int32? [
        0xe8 emit-byte                  -- -> tagged-address
        pc 4 + - emit-dword
    ] [
        "unsupported" error
    ] if ;

: compile-primitive                     -- symbol -> void
    dup debug? [
        symbol-always-inline? [ inline-primitive ] [ compile-call ] if
    ] [
        symbol-inline? [ inline-primitive ] [ compile-call ] if
    ] if ;

: compile-symbol                        -- symbol -> void
    dup symbol-primitive? [ compile-primitive ] [ compile-call ] if ;

: compile-instruction                   -- instruction -> void
    dup op>> [ op>> compile-symbol ] [ param>> compile-literal ] if ;

: compile-quotation-internal            -- quotation -> void
    dup quotation-array [ precompile-object ] map-array -- -> array

    compile-verbose? [
        ?nl dup [ inst. ] each
    ] when

    dup length 32 * initialize-code-block dup pc! origin!

    ' compile-instruction each

    0xc3 emit-byte

    origin pc over -                    -- -> quotation code-address code-size
    pick quotation-set-code-size
    swap quotation-set-code-address ;

: compile-quotation                     -- quotation -> quotation
    compile-verbose? [ ?nl "compiler:compile-quotation " write dup . nl ] when
    ' compile-quotation-internal keep ;

: compile-word                          -- symbol -> void
    dup symbol-def compile-quotation    -- -> symbol quotation
    dup quotation-code-address pick symbol-set-code-address
    quotation-code-size swap symbol-set-code-size ;

public

: opt
    postpone: '
    +v
    compile-word ;
