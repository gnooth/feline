// Copyright (C) 2017-2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline ;
in: user

"compiler" delete-vocab

in: compiler

empty

public

: compile-?return-locals ( node )       // node -> void

    pending length 0? [ node node-operator compile-call-symbol ] ?return

    pending-last-value dup wrapper? [ wrapped ] when :> last-value

    last-value callable-code-address :> address

    address [
        pending-remove-last
        flush-pending

        0x48 emit-byte
        0x83 emit-byte
        0xfb emit-byte
        0x00 emit-byte                  // cmp rbx, nil
        emit-drop                       // drop
        0x74 emit-byte                  // jz
        0x0a emit-byte                  // $+10
        address compile-call-address

        // jump to exit
        0xe9 emit-byte                  // jmp
        pc add-forward-jump-address
        // following bytes will be patched by patch-forward-jump
        0x00 emit-byte
        0x00 emit-byte
        0x00 emit-byte
        0x00 emit-byte
    ] [
        flush-pending
        node node-operator compile-call-symbol
    ] if ;

' compile-?return-locals ' ?return_locals symbol-set-compiler

: compile-both? ( node )

    pending length 2 < [ ' both? compile-call-symbol ] ?return

    pending last node-literal-value :> quot2

    pending dup length 2 - swap nth node-literal-value :> quot1
    [ quot1 quotation? ] [ quot2 quotation? ] both? nil?
    [ ' both? compile-call-address ] ?return

    // quot1 and quot2 are both literal quotations
    quot2 callable-code-address :> addr2
    pending-remove-last
    quot1 callable-code-address :> addr1
    pending-remove-last

    flush-pending

    addr1 compile-call-address          // call addr1
    0x48 emit-byte
    0x83 emit-byte
    0xfb emit-byte
    0x00 emit-byte                      // cmp rbx, nil
    0x74 emit-byte                      // jz
    0x0d emit-byte                      // $+13
    emit-drop                           // drop
    addr2 compile-call-address          // call addr2
;

' compile-both? ' both? symbol-set-compiler

: compile-if ( node )

    pending length 2 < [ flush-pending node node-operator compile-call-symbol ] ?return

    pending last node-literal-value :> quot2
    pending dup length 2 - swap nth node-literal-value :> quot1
    [ quot1 quotation? ] [ quot2 quotation? ] both? nil? [
        flush-pending
        node node-operator compile-call-symbol
    ] ?return

    // quot1 and quot2 are both literal quotations
    quot2 callable-code-address :> addr2
    pending-remove-last
    quot1 callable-code-address :> addr1
    pending-remove-last

    flush-pending

    0x48 emit-byte
    0x83 emit-byte
    0xfb emit-byte
    0x00 emit-byte                      // cmp rbx, nil
    emit-drop                           // drop
    0x74 emit-byte                      // je
    0x07 emit-byte                      // $+5
    addr1 compile-call-address          // call addr1
    0xeb emit-byte                      // jmp
    0x05 emit-byte                      // $+5
    addr2 compile-call-address          // call addr2
;

' compile-if ' if symbol-set-compiler

: compile-when ( node )                 // node -> void

    pending length 0? [ node node-operator compile-call-symbol ] ?return

    pending-last-value dup wrapper? [ wrapped ] when :> last-value

    last-value callable-code-address :> address

    address [
        pending-remove-last
        flush-pending
        0x48 emit-byte
        0x83 emit-byte
        0xfb emit-byte
        0x00 emit-byte                  // cmp rbx, nil
        emit-drop
        0x74 emit-byte                  // jz
        0x05 emit-byte                  // $+5
        address compile-call-address
    ] [
        flush-pending
        node node-operator compile-call-symbol
    ] if ;

' compile-when ' when symbol-set-compiler

: compile-when* ( node )                // node -> void

    pending length 0? [ node node-operator compile-call-symbol ] ?return

    pending-last-value dup wrapper? [ wrapped ] when :> last-value

    last-value callable-code-address :> address

    address [
        pending-remove-last
        flush-pending
        0x48 emit-byte
        0x83 emit-byte
        0xfb emit-byte
        0x00 emit-byte                  // cmp rbx, nil
        0x74 emit-byte                  // je
        0x07 emit-byte                  // $+7
        address compile-call-address
        0xeb emit-byte                  // jmp
        0x08 emit-byte                  // $+8
        emit-drop
    ] [
        flush-pending
        node node-operator compile-call-symbol
    ] if ;

' compile-when* ' when* symbol-set-compiler

: compile-unless ( node )                 // node -> void

    pending length 0? [ node node-operator compile-call-address ] ?return

    pending-last-value dup wrapper? [ wrapped ] when :> last-value

    last-value callable-code-address :> address

    address [
        pending-remove-last
        flush-pending
        0x48 emit-byte
        0x83 emit-byte
        0xfb emit-byte
        0x00 emit-byte                  // cmp rbx, nil
        emit-drop
        0x75 emit-byte                  // jne
        0x05 emit-byte                  // $+5
        address compile-call-address
    ] [
        flush-pending
        node node-operator compile-call-symbol
    ] if ;

' compile-unless ' unless symbol-set-compiler

: compile-if* ( node )

    pending length 2 < [ flush-pending ' if* compile-call-symbol ] ?return

    pending last node-literal-value :> quot2
    pending dup length 2 - swap nth node-literal-value :> quot1
    [ quot1 quotation? ] [ quot2 quotation? ] both? nil? [
        flush-pending
        ' if* compile-call-symbol
    ] ?return

    // quot1 and quot2 are both literal quotations
    quot2 callable-code-address :> addr2
    pending-remove-last
    quot1 callable-code-address :> addr1
    pending-remove-last

    flush-pending

    0x48 emit-byte
    0x83 emit-byte
    0xfb emit-byte
    0x00 emit-byte                      // cmp rbx, nil
    0x74 emit-byte                      // je
    0x07 emit-byte                      // $+7
    addr1 compile-call-address          // call addr1
    0xeb emit-byte                      // jmp
    0x0d emit-byte                      // $+13
    emit-drop                           // drop
    addr2 compile-call-address          // call addr2
;

' compile-if* ' if* symbol-set-compiler

: compile-either? ( node )

    pending length 2 < [ ' either? compile-call-address ] ?return

    pending last node-literal-value :> quot2

    pending dup length 2 - swap nth node-literal-value :> quot1
    [ quot1 quotation? ] [ quot2 quotation? ] both? nil?
    [ ' either? compile-call-symbol ] ?return

    // quot1 and quot2 are both literal quotations
    quot2 callable-code-address :> addr2
    pending-remove-last
    quot1 callable-code-address :> addr1
    pending-remove-last

    flush-pending

    addr1 compile-call-address          // call addr1
    0x48 emit-byte
    0x83 emit-byte
    0xfb emit-byte
    0x00 emit-byte                      // cmp rbx, nil
    0x75 emit-byte                      // jne
    0x0d emit-byte                      // $+13
    emit-drop                           // drop
    addr2 compile-call-address          // call addr2
;

' compile-either? ' either? symbol-set-compiler

: compile-while ( node )

    pending length 2 < [ ' while compile-call-address ] ?return

    pending last node-literal-value :> quot2

    pending dup length 2 - swap nth node-literal-value :> quot1
    [ quot1 quotation? ] [ quot2 quotation? ] both? nil?
    [ ' while compile-call-address ] ?return

    // quot1 and quot2 are both literal quotations
    quot2 callable-code-address :> addr2
    pending-remove-last
    quot1 callable-code-address :> addr1
    pending-remove-last

    flush-pending

    addr1 compile-call-address          // call addr1
    0x48 emit-byte
    0x83 emit-byte
    0xfb emit-byte
    0x00 emit-byte
    emit-drop                           // drop
    0x74 emit-byte                      // je
    0x07 emit-byte                      // $+7
    addr2 compile-call-address          // call addr2
    0xeb emit-byte                      // jmp
    0xe6 emit-byte                      // $-26
;

' compile-while ' while symbol-set-compiler

: %compile-generic ( op )               // symbol -> void

    pending length 0? [ op compile-call-symbol ] ?return

    pending-last node-literal-value type-of :> derived-type

    local method
    derived-type type? [ op find-method [ method! ] when* ] when*

    flush-pending

    method nil? [ op compile-call-symbol ] ?return

    method method-callable :> callable

    callable symbol? [ callable inline-or-compile-call ] ?return

    callable callable-code-address compile-call-address ;

' %compile-generic is compile-generic

: compile-?return-no-locals ( node )    // node -> void

    pending length 0? [ node node-operator compile-call-symbol ] ?return
    pending-last-value dup wrapper? [ wrapped ] when :> last-value
    last-value callable-code-address :> address

    address [
        pending-remove-last
        flush-pending
        0x48 emit-byte
        0x83 emit-byte
        0xfb emit-byte
        0x00 emit-byte                  // cmp rbx, nil
        emit-drop                       // drop
        0x74 emit-byte                  // jz
        0x06 emit-byte                  // $+6
        address compile-call-address
        0xc3 emit-byte
    ] [
        flush-pending
        node node-operator compile-call-symbol
    ] if ;

' compile-?return-no-locals ' ?return_no_locals symbol-set-compiler

: compile-keep ( node )

    pending length 0? [ node node-operator compile-call-symbol ] ?return
    pending-last-value dup wrapper? [ wrapped ] when :> last-value
    last-value callable-code-address :> address

    address [
        pending-remove-last
        flush-pending
        0x53 emit-byte                  // push rbx
        address compile-call-address
        emit-dup
        0x5b emit-byte                  // pop rbx
    ] [
        flush-pending
        node node-operator compile-call-symbol
    ] if ;

' compile-keep ' keep symbol-set-compiler

: compile-symbol-value ( node )         // node -> void

    pending length 0? [ node node-operator compile-primitive ] ?return
    pending-last-value !> x
    x wrapper? [ x wrapped x! ] when

    x symbol? nil? [
        flush-pending
        node node-operator compile-primitive
    ] ?return

    // x is a symbol
    // we want slot 6
    x object-address 48 + :> addr

    pending-remove-last
    flush-pending

    addr int32? [
        emit-dup
        0x48 emit-byte
        0x8b emit-byte
        0x1c emit-byte
        0x25 emit-byte
        addr emit-int32
    ] [
        emit-dup
        0x48 emit-byte
        0xbb emit-byte
        addr emit-qword                     // mov rbx, addr
        0x48 emit-byte
        0x8b emit-byte
        0x1b emit-byte                      // mov rbx, [rbx]
    ] if ;

' compile-symbol-value ' symbol-value symbol-set-compiler

: compile-call ( node )

    pending length 0? [ ' call compile-call-symbol ] ?return
    pending-last-value dup wrapper? [ wrapped ] when :> last-value
    last-value callable-code-address :> address
    address [
        pending-remove-last
        flush-pending
        address compile-call-address
    ] [
        flush-pending
        ' call compile-call-symbol
    ] if ;

' compile-call ' call symbol-set-compiler

: compile-dip ( node )

    pending length 0? [ ' dip compile-call-symbol ] ?return
    pending-last-value dup wrapper? [ wrapped ] when :> last-value
    last-value callable-code-address :> address
    address [
        pending-remove-last
        flush-pending
        0x53 emit-byte                  // push rbx
        emit-drop
        address compile-call-address
        emit-dup
        0x5b emit-byte                  // pop rbx
    ] [
        flush-pending
        ' dip compile-call-symbol
    ] if ;

' compile-dip ' dip symbol-set-compiler

: compile-bi ( node )

    pending length 2 < [ flush-pending ' bi compile-call-symbol ] ?return

    pending-last-value :> quot2
    pending dup length 2 - swap nth node-literal-value :> quot1
    [ quot1 quotation? ] [ quot2 quotation? ] both? nil? [
        flush-pending
        ' bi compile-call-symbol
    ] ?return

    // quot1 and quot2 are both literal quotations
    quot2 callable-code-address :> addr2
    pending-remove-last
    quot1 callable-code-address :> addr1
    pending-remove-last

    flush-pending

    0x53 emit-byte                  // push rbx
    addr1 compile-call-address
    emit-dup
    0x5b emit-byte                  // pop rbx
    addr2 compile-call-address ;

' compile-bi ' bi symbol-set-compiler

: compile-bi@ ( node )

    pending length 0? [ ' bi@ compile-call-symbol ] ?return

    pending-last-value :> quot
    quot quotation? nil? [
        flush-pending
        ' bi@ compile-call-symbol
    ] ?return

    // quot1 is a literal quotation
    quot callable-code-address :> addr
    pending-remove-last

    flush-pending

    0x53 emit-byte                  // push rbx
    emit-drop
    addr compile-call-address
    emit-dup
    0x5b emit-byte                  // pop rbx
    addr compile-call-address ;

' compile-bi@ ' bi@ symbol-set-compiler

: compile-local-set ( node )

    node node-operator :> op

    pending length 0? [ op compile-primitive ] ?return

    op {
        { local_0_set [ 0 ] }
        { local_1_set [ 1 ] }
        { local_2_set [ 2 ] }
        { local_3_set [ 3 ] }
        { local_4_set [ 4 ] }
        { local_5_set [ 5 ] }
        { local_6_set [ 6 ] }
        { local_7_set [ 7 ] }
    } case :> n

    pending-last-value :> x

    pending-remove-last
    flush-pending

    0x48 emit-byte
    0xb8 emit-byte
    x object->integer emit-qword        // mov rax, imm64

    0x49 emit-byte
    0x89 emit-byte
    n 0? [
        0x06 emit-byte                  // mov [r14], rax
    ] [
        0x46 emit-byte
        0x08 n * emit-byte              // mov [r14 + BYTES_PER_CELL * n], rax
    ] if ;

' compile-local-set ' local_0_set symbol-set-compiler
' compile-local-set ' local_1_set symbol-set-compiler
' compile-local-set ' local_2_set symbol-set-compiler
' compile-local-set ' local_3_set symbol-set-compiler
' compile-local-set ' local_4_set symbol-set-compiler
' compile-local-set ' local_5_set symbol-set-compiler
' compile-local-set ' local_6_set symbol-set-compiler
' compile-local-set ' local_7_set symbol-set-compiler

: no-cond
    "no cond" error ;

: cond-step-default ( quotation end-address )
    quotation callable-code-address compile-call-address
    end-address pc 5 + - verify-int32 :> delta
    delta 0? [
        0xe9 emit-byte
        delta emit-int32
    ] unless ;

: cond-step-array ( array end-address )
    end-address fixnum? assert
    array verify-array length 2 assert-eq

    array first callable-code-address compile-call-address
    0x48 emit-byte
    0x83 emit-byte
    0xfb emit-byte
    0x00 emit-byte                      // cmp rbx, 0
    emit-drop
    0x74 emit-byte                      // jz
    0x0a emit-byte                      // $+10
    array second callable-code-address compile-call-address

    end-address pc 5 + - :> delta
    delta 0? [
        0xe9 emit-byte
        delta emit-int32
    ] unless
;

: cond-step
    over array? [ cond-step-array ] [ cond-step-default ] if ;

: compile-cond ( node )

    pending length 0? [ ' cond compile-call-symbol ] ?return

    pending-last-value verify-array :> array

    array length 0? [ ' cond compile-call-symbol ] ?return

    pending-remove-last
    flush-pending

    array ' quotation? find  :> default-quotation :> default-index

    default-quotation [
        default-index 0> [ default-index 29 * pc + 5 + ] [ pc 5 + ] if
    ] [
        array length 29 * pc + 5 +
    ] if :> cond-end-address

    cond-end-address ' cond-step curry :> callable

    default-index [
        [ array nth callable call ] each-integer
    ] [
        array callable each
    ] if*

    default-quotation [
        callable-code-address compile-call-address
    ] [
        ' no-cond callable-code-address compile-call-address
    ] if*
;

' compile-cond ' cond symbol-set-compiler
