# If you have the right tools installed (see below), just:
#
#       make
#
# should do it, on both Windows and Linux.

# Tested with GNU Make 4.0, gcc 5.2.1 and clang 3.6.2 on Linux (Ubuntu).
# Tested with GNU Make 4.1, gcc 5.4.0 and clang 3.8.0 on Linux (Ubuntu).
# Tested with GNU Make 4.1, gcc 6.2.0 and clang 3.8.1 on Linux (Ubuntu 16.10).

# Tested with GNU Make 3.81, gcc (tdm64-1) 5.1.0 and clang 3.7.1 on Windows 10.

# NASM 2.11.08 on both Windows and Linux.
# NASM 2.12.01 on Linux.

# There is no support in this makefile for Microsoft tools.

VERSION = `git describe --tags`

ifeq ($(OS),Windows_NT)
	CC = gcc
else
# 	CC = clang
	CC = gcc -no-pie
endif

CFLAGS = -std=c99 -D_GNU_SOURCE -g -m64
ASMFLAGS =

# gcc
# gcc 6.2.0 on Ubuntu 16.10 needs -no-pie
# LINKFLAGS = -m64 -no-pie

OBJS = main.o os.o terminal.o backtrace.o random.o numbers.o math.o socket.o feline.o

ifeq ($(OS),Windows_NT)
	CFLAGS += -DWIN64 -DWIN64_NATIVE
	ASMFLAGS += -DWIN64 -DWIN64_NATIVE
	FELINE_EXE = ../feline.exe
	FELINE_HOME_EXE = feline_home.exe
else
	FELINE_EXE = ../feline
	FELINE_HOME_EXE = feline_home
endif

ifdef DEBUG
	ASMFLAGS += -DDEBUG
else
	CFLAGS += -O1
endif

ifeq ($(OS),Windows_NT)
$(FELINE_EXE):  $(OBJS)
	$(CC) $(LINKFLAGS) $(OBJS) -lm -l ws2_32 -o $(FELINE_EXE)
	date > ../build
else
$(FELINE_EXE):  $(OBJS)
	$(CC) $(LINKFLAGS) $(OBJS) -lm -lpthread -o $(FELINE_EXE)
	date > ../build
endif

feline_home.asm: $(FELINE_HOME_EXE)
	./feline_home

$(FELINE_HOME_EXE): feline_home.c
	$(CC) feline_home.c -o $(FELINE_HOME_EXE)

version.asm:
	echo "%define VERSION \"$(VERSION)\"" > version.asm

main.o:	feline.h main.c
	$(CC) $(CFLAGS) -c -o main.o main.c

os.o:	feline.h os.c
	$(CC) $(CFLAGS) -c -o os.o os.c

terminal.o: feline.h terminal.c
	$(CC) $(CFLAGS) -c -o terminal.o terminal.c

backtrace.o: feline.h backtrace.c
	$(CC) $(CFLAGS) -c -o backtrace.o backtrace.c

random.o: random.c
	$(CC) $(CFLAGS) -c -o random.o random.c

numbers.o: feline.h numbers.c
	$(CC) $(CFLAGS) -c -o numbers.o numbers.c

math.o: feline.h math.c
	$(CC) $(CFLAGS) -c -o math.o math.c

socket.o: feline.h socket.c
	$(CC) $(CFLAGS) -c -o socket.o socket.c

ASM_SOURCES = feline.asm feline_home.asm version.asm externs.asm \
	macros.asm loop-macros.asm inlines.asm \
	ansi.asm \
	array.asm \
	assert.asm \
	bitops.asm \
	boolean.asm \
	cold.asm \
	color.asm \
	combinators.asm \
	compile-word.asm \
	curry.asm \
	debug.asm \
	dynamic-scope.asm \
	errors.asm \
	files.asm \
	fixnum.asm \
	float.asm \
	format.asm \
	gc.asm \
	generic.asm \
	handles.asm \
	hashtable.asm \
	io.asm \
	iterator.asm \
	key.asm \
	keyword.asm \
	lexer.asm \
	load.asm \
	locals.asm \
	math.asm \
	memory.asm \
	method.asm \
	move.asm \
	mutex.asm \
	numbers.asm \
	object-macros.asm \
	objects.asm \
	syntax.asm \
	primitives.asm \
	quit.asm \
	quotation.asm \
	range.asm \
	recover.asm \
	sequences.asm \
	sbuf.asm \
	slice.asm \
	socket.asm \
	stack.asm \
	string.asm \
	strings.asm \
	symbol.asm \
	thread.asm \
	time.asm \
	tools.asm \
	tuple.asm \
	tuple-class.asm \
	type.asm \
	uint64.asm \
	int64.asm \
	vocab.asm \
	vocabs.asm \
	vector.asm \
	wrapper.asm

# -felf64 even on Windows
feline.o: $(ASM_SOURCES)
	echo "%define VERSION \"$(VERSION)\"" > version.asm
	nasm $(ASMFLAGS) -g -felf64 feline.asm

# Microsoft compiler and linker
# main.obj: main.c
# 	cl -Zi -c $(CFLAGS) main.c

# feline.obj: $(ASM_SOURCES)
# 	nasm $(ASMFLAGS) -g -fwin64 feline.asm

# feline.exe: main.obj feline.obj
# 	link /subsystem:console /machine:x64 /largeaddressaware:no feline.obj  main.obj /out:feline.exe

clean:
	-rm -f *.o *.obj
	-rm -f feline_home.asm feline_home.exe feline_home
	-rm -f version.h version.asm

zip:
	-rm -f feline.zip
	zip feline.zip *.c *.h *.asm *.feline benchmarks/*.feline benchmarks/*.c tests/*.feline Makefile
