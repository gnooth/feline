-- Copyright (C) 2016-2018 Peter Graves <gnooth@gmail.com>

-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.

-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline ;
in: tuple

private

global class

global accessor-prefix

global class-name                       -- string

global slot-names                       -- vector

global class-symbol                     -- symbol

: define-reader                         -- slot-name index -> void
    [
        accessor-prefix
        swap
        string-append
        feline:new-symbol-in-current-vocab
    ] dip                               -- symbol index

    class tuple-class-typecode
    ' verify-typecode
    rot 2 +
    ' slot@
    4array array>quotation

    over symbol-set-def
    feline:compile-word
;

: define-writer                         -- slot-name index ->
    [
        accessor-prefix
        swap
        string-append
        "!" string-append
        feline:new-symbol-in-current-vocab
    ] dip                               -- symbol index

    class tuple-class-typecode
    ' verify-typecode
    rot 2 +
    ' slot!
    4array array>quotation

    over symbol-set-def
    feline:compile-word
;

: define-accessors
    class-name "-" string-append accessor-prefix!
    slot-names [ define-reader ] each-index
    slot-names [ define-writer ] each-index
;

: define-class-symbol
    class-name feline:new-symbol-in-current-vocab class-symbol!

    class-symbol <wrapper> 1quotation class-symbol symbol-set-def
    class-symbol feline:compile-word
;

: define-tuple-predicate
    class-name "?" string-append
    feline:new-symbol-in-current-vocab  -- symbol

    ' object-typecode
    class tuple-class-typecode
    ' eq?
    3array array>quotation

    over symbol-set-def
    feline:compile-word
;

: define-tuple-class

    define-class-symbol

    class-symbol slot-names make-tuple-class class!

    class 1quotation class-symbol symbol-set-def
    class-symbol feline:compile-word

    define-accessors

    define-tuple-predicate
;

public

: tuple:
    must-parse-token                    -- string
    10 <vector>                         -- string vector

    [ parse-token dup ";" string= ] [ suffix! ] until
    drop
    vector>array                        -- class-name slot-names

    slot-names! class-name!

    tuple:define-tuple-class
;

in: feline

: tuple: tuple:tuple: ;
