-- Copyright (C) 2016-2018 Peter Graves <gnooth@gmail.com>

-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.

-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline ;
in: feline

private

global tuple-typecode                   -- -> fixnum
global tuple-symbol                     -- -> symbol
global tuple-name                       -- -> string
global slot-definitions                 -- -> array
global generic-reader                   -- -> symbol
global generic-writer                   -- -> symbol

: define-generic-reader                 -- slot-definition -> void
    [ slot-definition-name ]
    [ slot-definition-index ] bi
    :> index
    ">>" string-append "accessors" ensure-generic generic-reader!

    -- accessors must be public
    generic-reader symbol-set-public

    tuple-typecode
    ' verify-typecode
    index
    ' slot@
    4array array>quotation :> quotation

    tuple-typecode
    generic-reader symbol-def verify-generic-function
    quotation
    <method>
    install-method
;

: define-generic-writer                 -- slot-definition -> void
    [ slot-definition-name ]
    [ slot-definition-index ] bi
    :> index
    "<<" string-append "accessors" ensure-generic generic-writer!

    -- accessors must be public
    generic-writer symbol-set-public

    tuple-typecode
    ' verify-typecode
    index
    ' slot!
    4array array>quotation :> quotation

    tuple-typecode
    generic-writer symbol-def verify-generic-function
    quotation
    <method>
    install-method
;

: define-setter                         -- slot-definition -> void
    ">>" swap slot-definition-name string-append :> setter-name

    setter-name accessors-vocab ?lookup-symbol [ ] return-if

    -- not found
    setter-name accessors-vocab <symbol> :> setter

    -- accessors must be public
    setter symbol-set-public

    ' over
    generic-writer
    2array array>quotation setter symbol-set-def
    setter compile-word
;

: define-accessors
    slot-definitions [
        {
            [ define-generic-reader ]
            [ define-generic-writer ]
            [ define-setter ]
        } cleave
    ] each
;

: define-tuple-predicate
    tuple-name "?" string-append new-symbol-in-current-vocab

    ' object-typecode
    tuple-typecode
    ' eq?
    3array array>quotation

    over symbol-set-def
    compile-word
;

: define-tuple-type
    tuple-symbol slot-definitions make-tuple-type type-typecode tuple-typecode!
;

: parse-tuple-slots
    10 <vector>
    [ must-parse-token dup ";" string= ] [ suffix! ] until
    drop
    vector>array
    [ 1+ make-slot-definition ] map-index slot-definitions!
;

public

: tuple:
    parse-name [ tuple-symbol! ] [ symbol-name tuple-name! ] bi

    parse-tuple-slots
    define-tuple-type
    define-accessors
    define-tuple-predicate
;
