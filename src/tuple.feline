// Copyright (C) 2016-2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline ;
in: feline

private

global tuple-typecode                   // -> fixnum
global tuple-symbol                     // -> symbol
global tuple-name                       // -> string
global slots                            // -> array
global generic-reader                   // -> symbol
global generic-writer                   // -> symbol

: define-generic-reader                 // slot -> void
    [ slot-name ]
    [ slot-index ] bi
    :> index
    ">>" string-append "accessors" ensure-generic generic-reader!

    // accessors must be public
    generic-reader symbol-set-public

    index {
        { 1 [ ' tuple-slot1@ 1array ] }
        { 2 [ ' tuple-slot2@ 1array ] }
        { 3 [ ' tuple-slot3@ 1array ] }
        // default case
        [ ' slot@ 2array ]
    } case
    array->quotation :> quotation

    tuple-typecode
    generic-reader symbol-def verify-generic-function
    quotation
    make-method
    install-method ;

: define-generic-writer                 // slot -> void
    [ slot-name ]
    [ slot-index ] bi
    :> index
    "<<" string-append "accessors" ensure-generic generic-writer!

    // accessors must be public
    generic-writer symbol-set-public

    tuple-typecode
    ' verify-typecode
    index
    ' slot!
    4array array->quotation :> quotation

    tuple-typecode
    generic-writer symbol-def verify-generic-function
    quotation
    make-method
    install-method ;

: define-setter                         // slot -> void
    ">>" swap slot-name string-append :> setter-name

    setter-name accessors-vocab lookup-symbol ?exit

    // not found
    setter-name accessors-vocab <symbol> :> setter

    // accessors must be public
    setter symbol-set-public

    ' over
    generic-writer
    2array array->quotation setter symbol-set-def
    setter compile-word ;

: define-accessors
    slots [
        {
            [ define-generic-reader ]
            [ define-generic-writer ]
            [ define-setter ]
        } cleave
    ] each ;

: define-tuple-predicate
    tuple-name "?" string-append new-symbol-in-current-vocab

    ' object-typecode
    tuple-typecode
    ' eq?
    3array array->quotation

    over symbol-set-def
    compile-word ;

: define-tuple-type
    tuple-symbol slots make-tuple-type type-typecode tuple-typecode! ;

: parse-tuple-slots
    10 make-vector
    [ must-parse-token dup ";" string=? ] [ suffix! ] until
    drop
    vector->array
    [ 1+ make-slot ] map-index slots! ;

public

: tuple:
    parse-name [ tuple-symbol! ] [ symbol-name tuple-name! ] bi

    parse-tuple-slots
    define-tuple-type
    define-accessors
    define-tuple-predicate ;
