-- Copyright (C) 2016-2018 Peter Graves <gnooth@gmail.com>

-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.

-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline ;
in: feline

private

global tuple-type

global accessor-prefix

global tuple-name                       -- string

global slot-definitions                 -- sequence

: define-reader                         -- slot-definition -> void

    [ slot-definition-name ] [ slot-definition-index ] bi

    [
        accessor-prefix
        swap
        string-append
        new-symbol-in-current-vocab
    ] dip                               -- symbol index

    tuple-type type-typecode
    ' verify-typecode
    rot
    ' slot@
    4array array>quotation

    over symbol-set-def
    compile-word
;

: define-writer                         -- slot-definition -> void

    [ slot-definition-name ] [ slot-definition-index ] bi

    [
        accessor-prefix
        swap
        string-append
        "!" string-append
        new-symbol-in-current-vocab
    ] dip                               -- symbol index

    tuple-type type-typecode
    ' verify-typecode
    rot
    ' slot!
    4array array>quotation

    over symbol-set-def
    compile-word
;

: define-accessors
    tuple-name "-" string-append accessor-prefix!
    slot-definitions [ define-reader ] each
    slot-definitions [ define-writer ] each
;

: define-tuple-predicate
    tuple-name "?" string-append new-symbol-in-current-vocab

    ' object-typecode
    tuple-type type-typecode
    ' eq?
    3array array>quotation

    over symbol-set-def
    compile-word
;

: define-tuple-type
    tuple-name new-symbol-in-current-vocab
    slot-definitions make-tuple-type verify-type tuple-type!
;

: parse-tuple-slots
    10 <vector>
    [ must-parse-token dup ";" string= ] [ suffix! ] until
    drop
    vector>array
    [ 1+ make-slot-definition ] map-index slot-definitions!
;

public

: tuple:
    must-parse-token tuple-name!
    parse-tuple-slots
    define-tuple-type
    define-accessors
    define-tuple-predicate
;
