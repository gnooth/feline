LANGUAGE: feline

USING: feline ;
IN: test

// this is a comment
( this is another comment )

: failed ( -- )
//     ?nl "failed" print
    "failed" error
;

: check-t ( x -- )
    t eq? [ failed ] unless
;

: check-false ( x -- )
    f eq? [ failed ] unless
;

1 2 + 3 eq? check-t
1 2 + 4 eq? check-false

"test" "test" eq? check-false

V{ 1 2 3 } length 3 = check-t
V{ "this is a test" } length 1 = check-t

V{ 1 2 3 } [ dup + ] map V{ 2 4 6 } sequence= check-t

"this is a multiline
string" length 26 = check-t

clear

: multiline-string-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    "this is
a multiline string"
    dup string? check-t
    length 26 = check-t
;

multiline-string-test-1

: string?-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    t string? check-false
    f string? check-false
    42 string? check-false
    2000000 string? check-false
    "test" string? check-t
    \ dup string? check-false
    \ dup symbol-name string? check-t
;

string?-test-1

: fixnum?-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    most-negative-fixnum fixnum? check-t
    -3 fixnum? check-t
    -2 fixnum? check-t
    -1 fixnum? check-t
    0 fixnum? check-t
    1 fixnum? check-t
    2 fixnum? check-t
    3 fixnum? check-t
    most-positive-fixnum fixnum? check-t
    "test" fixnum? check-false
    \ dup fixnum? check-false
    { 1 2 3 } fixnum? check-false
;

fixnum?-test-1

: fixnum-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    1 2 + 3 = check-t
    1 2 + fixnum? check-t
;

fixnum-test-1

: fixnum-test-2 ( -- )
    -1 -2 + -3 = check-t
;

fixnum-test-2

: fixnum-test-3 ( -- )
    0 fixnum? check-t
    0 0 = check-t
    1 0 = check-false
    -1 0 = check-false
    1 -1 + 0 = check-t
    4 -4 + 0 = check-t
;

fixnum-test-3

// fixnum<
: fixnum-test-4 ( -- )
    1 2 fixnum< check-t
    2 1 fixnum< check-false
    -2 -1 fixnum< check-t
    -1 -2 fixnum< check-false
    -2 1 fixnum< check-t
    1 -2 fixnum< check-false
    1 2 < check-t
    2 1 fixnum>= check-t
    2 1 >= check-t
;

fixnum-test-4

: fixnum-test-5 ( -- )
    1 2 fixnum- -1 = check-t
    1 2 - -1 = check-t
;

fixnum-test-5

: fixnum-test-6 ( -- )
    2 3 fixnum* 6 = check-t
    2 3 * 6 = check-t
;

fixnum-test-6

: fixnum-test-7 ( -- )
    8 3 fixnum/i 2 = check-t
    8 3 / 2 = check-t
    -8 3 fixnum/i -2 = check-t
    -8 3 / -2 = check-t
;

fixnum-test-7

: fixnum-test-8 ( -- )
    7 3 fixnum-mod 1 = check-t
    7 3 mod 1 = check-t
    -7 3 fixnum-mod -1 = check-t
    -7 3 mod -1 = check-t
;

fixnum-test-8

// fixnum-bitand, bitand
: fixnum-test-9 ( -- )
    15 7 bitand 7 = check-t
    15 $f0 bitand 0 = check-t
    3 1 bitand 1 = check-t
;

fixnum-test-9

// fixnum+
: fixnum-test-10 ( -- )
    42 87 fixnum+ 129 = check-t
    -42 87 fixnum+ 45 = check-t
    42 -87 fixnum+ -45 = check-t
    -42 -87 fixnum+ -129 = check-t
;

fixnum-test-10

: fixnum-test-11 ( -- )
    MOST_POSITIVE_FIXNUM tag-fixnum most-positive-fixnum = check-t
    MOST_NEGATIVE_FIXNUM tag-fixnum most-negative-fixnum = check-t
    most-positive-fixnum untag-fixnum MOST_POSITIVE_FIXNUM = check-t
    most-negative-fixnum untag-fixnum MOST_NEGATIVE_FIXNUM = check-t
;

fixnum-test-11

: fixnum>string-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    -17 fixnum>string "-17" = check-t
    0 fixnum>string "0" = check-t
    42 fixnum>string "42" = check-t
    most-negative-fixnum fixnum>string "-1152921504606846976" = check-t
    most-negative-fixnum 1 + fixnum>string "-1152921504606846975" = check-t
    most-negative-fixnum 2 + fixnum>string "-1152921504606846974" = check-t
    most-positive-fixnum fixnum>string "1152921504606846975" = check-t
;

fixnum>string-test-1

: fixnum>hex-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    -17 fixnum>hex "-11" = check-t
    0 fixnum>hex "0" = check-t
    42 fixnum>hex "2A" = check-t
    most-negative-fixnum fixnum>hex "-1000000000000000" = check-t
    most-negative-fixnum 1 + fixnum>hex "-FFFFFFFFFFFFFFF" = check-t
    most-negative-fixnum 2 + fixnum>hex "-FFFFFFFFFFFFFFE" = check-t
    most-positive-fixnum fixnum>hex "FFFFFFFFFFFFFFF" = check-t

    -576460752303423488 fixnum>hex "-800000000000000" = check-t
    576460752303423487 fixnum>hex "7FFFFFFFFFFFFFF" = check-t
;

fixnum>hex-test-1

: number>string-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    -17 number>string "-17" = check-t
    0 number>string "0" = check-t
    42 number>string "42" = check-t
    most-negative-fixnum number>string "-1152921504606846976" = check-t
    most-positive-fixnum number>string "1152921504606846975" = check-t
;

number>string-test-1

: fixnum-max-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    1 2 fixnum-max 2 eq? check-t
    2 1 fixnum-max 2 eq? check-t
    -1 2 fixnum-max 2 eq? check-t
    2 -1 fixnum-max 2 eq? check-t
    most-positive-fixnum 0 fixnum-max most-positive-fixnum eq? check-t
    most-negative-fixnum 0 fixnum-max zero? check-t
    0 most-positive-fixnum fixnum-max most-positive-fixnum eq? check-t
    0 most-negative-fixnum fixnum-max zero? check-t
;

fixnum-max-test-1

: max-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    1 2 max 2 eq? check-t
    2 1 max 2 eq? check-t
    -1 2 max 2 eq? check-t
    2 -1 max 2 eq? check-t
    most-positive-fixnum 0 max most-positive-fixnum eq? check-t
    most-negative-fixnum 0 max zero? check-t
    0 most-positive-fixnum max most-positive-fixnum eq? check-t
    0 most-negative-fixnum max zero? check-t
;

max-test-1

: dip-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    87 42 [ 3 * ] dip get-datastack V{ 261 42 } sequence= check-t
    clear
;

dip-test-1

: 2dip-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    clear
    42 17 89 [ 1 + ] 2dip get-datastack { 43 17 89 } sequence= check-t
    clear
;

2dip-test-1

: each-index-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    clear
    { "a" "b" "c" } [ 2array ] each-index get-datastack
    { { "a" 0 } { "b" 1 } { "c" 2 } } sequence= check-t
    clear
;

each-index-test-1

: map-index-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    clear
    { "a" "b" "c" } [ 2array ] map-index get-datastack
    { { { "a" 0 } { "b" 1 } { "c" 2 } } } = check-t
    clear
    V{ "a" "b" "c" } [ 2array ] map-index get-datastack
    { V{ { "a" 0 } { "b" 1 } { "c" 2 } } } = check-t
    clear
;

map-index-test-1

: keep-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    42 [ dup ] keep get-datastack V{ 42 42 42 } sequence= check-t
    clear
;

keep-test-1

: bi@-test-1
    3 4 [ dup ] bi@ get-datastack V{ 3 3 4 4 } sequence= check-t
    clear
;

bi@-test-1

: array-test-1 ( -- )
    10 42 <array>
    [ object? check-t ] keep
    [ array? check-t ] keep
    [ length 10 = check-t ] keep
    10 [ over nth 42 eq? check-t ] each-integer
    drop
;

array-test-1

: array-test-2 ( -- )
    10 f <array>
    10 [ ( array index ) [ number>string ] keep pick set-nth ] each-integer
    drop
;

array-test-2

: 1array-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    clear
    71 1array get-datastack { { 71 } } sequence= check-t
    clear
;

1array-test-1

: 2array-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    clear
    "test1" "test2" 2array get-datastack { { "test1" "test2" } } sequence= check-t
    clear
;

2array-test-1

: 3array-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    clear
    1 2 3 3array get-datastack { { 1 2 3 } } sequence= check-t
    clear
;

3array-test-1

: 4array-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    clear
    1 2 3 4 4array get-datastack { { 1 2 3 4 } } sequence= check-t
    clear
;

4array-test-1

// vector-insert-nth!
: vector-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    17 0 V{ 0 1 2 3 } [ vector-insert-nth! ] keep
    V{ 17 0 1 2 3 } sequence= check-t
    clear
;

vector-test-1

: vector-test-2 ( -- )
    << last-word symbol-name >> ?nl write
    10 <vector> [ vector? check-t ] keep
    10 [ dup pick vector-set-nth ] each-integer
    [ [ eq? check-t ] vector-each-index ] keep
    clear
;

vector-test-2

: vector-test-3 ( -- )
    << last-word symbol-name >> ?nl write
    1 <vector> [ vector? check-t ] keep
    10 [ over vector-push ] each-integer
    10 [ dup pick vector-nth eq? check-t ] each-integer
    [ [ eq? check-t ] each-index ] keep
    10 [ 9 swap - over vector-pop eq? check-t ] each-integer
    vector-length zero? check-t
;

vector-test-3

// vector-pop*
: vector-test-4 ( -- )
    << last-word symbol-name >> ?nl write
    V{ 1 2 3 } [ vector-pop* ] keep
    [ length 2 = check-t ] keep
    [ vector-pop* ] keep
    [ length 1 = check-t ] keep
    [ vector-pop* ] keep
    [ length zero? check-t ]
;

vector-test-4

// vector-last
: vector-test-5 ( -- )
    << last-word symbol-name >> ?nl write
    clear
    V{ 1 2 3 } vector-last get-datastack { 3 } sequence= check-t
    clear
    V{ "test" } vector-last "test" = check-t
;

vector-test-5

: %local-test-1 ( -- )
    42 :> foo
    foo
;

: local-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    %local-test-1 42 eq? check-t
;

local-test-1

: if-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    t [ 42 ] [ 17 ] if 42 eq? check-t
    f [ 42 ] [ 17 ] if 17 eq? check-t
    0 [ 42 ] [ 17 ] if 42 eq? check-t
;

if-test-1

: if*-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    clear
    t [ 42 ] [ 17 ] if* get-datastack { t 42 } sequence= check-t
    clear
    f [ 42 ] [ 17 ] if* get-datastack { 17 } sequence= check-t
    clear
    0 [ 42 ] [ 17 ] if* get-datastack { 0 42 } sequence= check-t
    clear
;

if*-test-1

: symbol?-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    \ dup symbol? check-t
    \ check-t symbol? check-t
    42 symbol? check-false
    -3 symbol? check-false
    "test" symbol? check-false
;

symbol?-test-1

: string>number-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    "." string>number check-false
    "-" string>number check-false
;

string>number-test-1

: \-test-1 ( -- )
    [ \ dup ] call symbol? check-t
    3 [ dup ] call get-datastack { 3 3 } sequence= check-t
    clear
;

\-test-1

: hashcode-test-1 ( -- )
    "test"
    [ string-hashcode check-false ] keep
    [ hashcode dup fixnum? check-t ] keep
    string-hashcode eq? check-t
;

hashcode-test-1

: hashcode-test-2 ( -- )
    \ dup
    [ symbol-name "dup" string= check-t ] keep
    [ symbol-vocab-name "feline" string= check-t ] keep
    [ symbol-hashcode ] keep
    [ symbol-name hashcode ] keep
    symbol-vocab-name hashcode hash-combine eq? check-t
;

hashcode-test-2

: hashtable-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    16 <hashtable> :> ht
    42 "parker" ht set-at
    ht hashtable-count 1 = check-t
    87 "penelope" ht set-at
    ht hashtable-count 2 = check-t
    "parker" ht at* check-t
    42 = check-t
    "penelope" ht at* check-t
    87 = check-t
    "cody may" ht at* check-false
    check-false
;

hashtable-test-1

: hashtable-test-2 ( -- )
    << last-word symbol-name >> ?nl write
    72 <hashtable> hashtable-capacity 128 = check-t
;

hashtable-test-2

: hashtable-test-3 ( -- )
    << last-word symbol-name >> ?nl write
    16 <hashtable> :> ht
    1000 [ dup number>string ht set-at ] each-integer
    1000 [ dup number>string ht at = check-t ] each-integer
    "charlie" ht at* check-false check-false
;

hashtable-test-3

: length-test-1 ( -- )
    "test" length 4 eq? check-t
    "testing" string>sbuf length 7 eq? check-t
    { 1 2 3 } length 3 eq? check-t
    V{ 1 2 3 "test" } length 4 eq? check-t
;

length-test-1

: globals-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    clear
    42 \ dup set-global get-datastack { } sequence= check-t
    \ dup get-global get-datastack { 42 } sequence= check-t
    clear
    \ dup get get-datastack { 42 } sequence= check-t
    clear
;

globals-test-1

: find-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    V{ 1 2 3 4 5 6 } [ 3 = ] find
    get-datastack V{ 2 3 } sequence= check-t
    clear
    V{ 1 2 3 4 5 6 } [ 17 = ] find
    get-datastack f f 2array sequence= check-t
    clear
    4 V{ 1 2 3 4 5 6 } [ dupd = ] find
    get-datastack V{ 4 3 4 } sequence= check-t
    clear
;

find-test-1

: find-from-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    4 "this is a test" [ 'e' = ] find-from
    get-datastack { 11 'e' } sequence= check-t
    clear
    0 "this is a test" [ 's' = ] find-from
    get-datastack { 3 's' } sequence= check-t
    clear
    99 "this is a test" [ 'e' = ] find-from
    get-datastack { f f } sequence= check-t
    clear
    -1 "this is a test" [ 'e' = ] find-from
    get-datastack { f f } sequence= check-t
    clear
;

find-from-test-1

: find-last-from-test-1
    << last-word symbol-name >> ?nl write
    13 "this is a test" [ 'e' = ] find-last-from
    get-datastack { 11 'e' } sequence= check-t
    clear
    99 "this is a test" [ 'e' = ] find-last-from
    get-datastack { f f } sequence= check-t
    clear
    -99 "this is a test" [ 'e' = ] find-last-from
    get-datastack { f f } sequence= check-t
    clear
    4 V{ 1 2 3 4 5 3 } [ 3 = ] find-last-from
    get-datastack { 2 3 } sequence= check-t
    clear
    3 4 V{ 1 2 3 4 5 3 } [ dupd = ] find-last-from
    get-datastack { 3 2 3 } sequence= check-t
    clear
;

find-last-from-test-1

: map-find-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    clear
    V{ 1 2 3 4 5 6 } [ 3 = ] map-find get-datastack { t 3 } sequence= check-t
    clear
    V{ 1 2 3 4 5 6 } [ 17 = ] map-find get-datastack { f f } sequence= check-t
    clear
    4 V{ 1 2 3 4 5 6 } [ dupd = ] map-find get-datastack { 4 t 4 } sequence= check-t
    clear
;

map-find-test-1

: find-integer-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    clear
    10 [ 5 eq? ] find-integer get-datastack { 5 } = check-t
    clear
;

find-integer-test-1

: ?lookup-symbol-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    "dup" "feline" ?lookup-symbol \ dup eq? check-t
    "xxx" "feline" ?lookup-symbol check-false
    "dup" "xxx" ?lookup-symbol check-false
;

?lookup-symbol-test-1

: create-symbol-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    "effluvia" "forth" ?lookup-symbol check-false
    "effluvia" "forth" create-symbol
    dup symbol? check-t
    dup "effluvia" "forth" ?lookup-symbol eq? check-t
    symbol-vocab-name "forth" = check-t
;

create-symbol-test-1

: parsing-word?-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    \ SYMBOL: parsing-word? check-t
    \ dup parsing-word? check-false
    42 parsing-word? check-false
    f parsing-word? check-false
    \ f parsing-word? check-t
;

parsing-word?-test-1

: parsing-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    V{ SYMBOL: this-is-a-new-symbol } V{ } sequence= check-t
    clear
;

parsing-test-1

: %parsing-test-2 ( -- )
    SYMBOL: another-new-symbol
    42
;

: parsing-test-2 ( -- )
    << last-word symbol-name >> ?nl write
    clear
    %parsing-test-2 get-datastack { 42 } sequence= check-t
    clear
;

parsing-test-2

: sequence=-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    { "this is a test" } { "this is a test" } sequence= check-t
;

sequence=-test-1

: symbol-props-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    clear
    "foo" \ dup symbol-prop get-datastack { f } sequence= check-t
    clear
    "this is a test" "foo" \ dup symbol-set-prop
    "foo" \ dup symbol-prop get-datastack { "this is a test" } sequence= check-t
    clear
    // clean up
    f "foo" \ dup symbol-set-prop
;

symbol-props-test-1

: times-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    0 10 [ 1 + ] times 10 eq? check-t
;

times-test-1

: filter-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    V{ 1 2 3 4 } [ 3 < ] filter V{ 1 2 } sequence= check-t
     { 1 2 3 4 } [ 3 < ] filter  { 1 2 } sequence= check-t
;

filter-test-1

: in-bounds?-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    { 1 2 3 }
    0 over in-bounds? check-t
    1 over in-bounds? check-t
    2 over in-bounds? check-t
    3 over in-bounds? check-false
    -1 swap in-bounds? check-false
;

in-bounds?-test-1

: %foo ( -- ) 42 ;

: %bar ( -- ) %foo ;

: redefinition-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    %foo 42 = check-t
    %bar 42 = check-t
;

redefinition-test-1

// redefine %foo
: %foo ( -- ) 87 ;

: redefinition-test-2 ( -- )
    << last-word symbol-name >> ?nl write
    %foo 87 = check-t
    %bar 87 = check-t
;

redefinition-test-2

: until-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    clear
    1 [ dup 1 = ] [ 1 + ] until get-datastack { 1 } sequence= check-t
    clear
    1 [ dup 4 = ] [ 1 + ] until get-datastack { 4 } sequence= check-t
    clear
;

until-test-1

: ensure-symbol-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    "foo" "feline" ensure-symbol dup symbol? check-t
    dup "foo" "feline" ?lookup-symbol eq? check-t
    "foo" "feline" ensure-symbol eq? check-t
    "foo" "feline" ensure-symbol symbol-vocab-name "feline" = check-t
    \ dup "dup" "feline" ensure-symbol eq? check-t
;

ensure-symbol-test-1

: bi-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    clear
    42 [ 1 + ] [ 2 + ] bi get-datastack { 43 44 } sequence= check-t
    clear
;

bi-test-1

: 2bi-test-1
    << last-word symbol-name >> ?nl write
    clear
    1 2 3 4 [ dup ] [ + ] 2bi get-datastack { 1 2 3 4 4 7 } sequence= check-t
    clear
    1 2 3 4 [ nip ] [ + ] 2bi get-datastack { 1 2 4 7 } sequence= check-t
    clear
;

2bi-test-1

GLOBAL: temp-string "test" temp-string!

TUPLE: foo a b c ;

: tuple-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    \ foo new
    [ tuple? check-t ] keep
    [ foo? check-t ] keep
    \ foo require-type
    [ tuple-size 3 = check-t ] keep
    [ foo-a check-false ] keep
    [ foo-b check-false ] keep
    [ foo-c check-false ] keep
    42 over foo-a!
    71 over foo-b!
    temp-string over foo-c!
    [ foo-a 42 = check-t ] keep
    [ foo-b 71 = check-t ] keep
    [ foo-c temp-string = check-t ] keep
    [ foo-c "test" = check-t ] keep

    f temp-string!
    gc
    [ foo-c "test" = check-t ] keep

    drop
;

tuple-test-1

: vocab?-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    42 vocab? check-false
    "feline" vocab? check-false
    "feline" lookup-vocab vocab? check-t
;

vocab?-test-1

: lookup-vocab-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    "feline" lookup-vocab vocab? check-t
    "feline" lookup-vocab ( vocab ) lookup-vocab vocab? check-t
    "feline" lookup-vocab ( vocab ) dup lookup-vocab eq? check-t
    current-vocab lookup-vocab vocab? check-t
    "not a vocab" lookup-vocab vocab? check-false
;

lookup-vocab-test-1

: unless*-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    clear
    f [ 42 ] unless* get-datastack { 42 } = check-t
    clear
    t [ 42 ] unless* get-datastack { t } = check-t
    clear
    "test" [ 42 ] unless* get-datastack { "test" } = check-t
    clear
;

unless*-test-1

GLOBAL: zork

: global-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    42 zork! zork 42 eq? check-t
;

global-test-1

: global-test-2 ( -- )
    << last-word symbol-name >> ?nl write
    87 \ zork set-global
    \ zork get-global 87 eq? check-t

    [
        "test" dup zork! zork eq? check-t
        \ zork get-global 87 eq? check-t
        19 \ zork set-global
        zork "test" = check-t
        \ zork get-global 19 eq? check-t
    ] with-scope

    zork 19 eq? check-t
    \ zork get 19 eq? check-t
    \ zork get-global 19 eq? check-t
;

global-test-2

: index-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    3 { 1 2 3 4 } index 2 eq? check-t
    99 { 1 2 3 4 } index check-false
    's' "this is a test" index 3 eq? check-t
    'a' "this is a test" index 8 eq? check-t
    "bar" { "foo" "bar" "baz" } index 1 eq? check-t
;

index-test-1

: member?-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    17 { 1 2 3 } member? check-false
    1  { 1 2 3 } member? check-t
    f  { 1 2 3 } member? check-false
    f  { 1 f 3 } member? check-t
;

member?-test-1

: member?-test-2 ( -- )
    << last-word symbol-name >> ?nl write
    "bar" { "foo" "bar" "baz" } member? check-t
    "bag" { "foo" "bar" "baz" } member? check-false
    4 { 1 2 3 4 } member? check-t
    1 { 1 2 3 4 } member? check-t
    "test" { 1 2 3 4 } member? check-false
    0 { 1 2 3 4 } member? check-false
;

member?-test-2

: string-head-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    "this is a test"
    [ 4 string-head "this" = check-t ] keep

    // FIXME "" confuses the parser Aug 22 2016 12:49 PM
//     [ 0 string-head "" = check-t ] keep

    [ 0 string-head [ string? check-t ] [ length zero? check-t ] bi ] keep
    [ 14 string-head "this is a test" = check-t ] keep
    drop
;

string-head-test-1

: string-tail-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    "this is a test"
    [ 10 string-tail "test" = check-t ] keep
    [ 14 string-tail [ string? check-t ] [ length zero? check-t ] bi ] keep
    [ 0 string-tail "this is a test" = check-t ] keep
    drop
;

string-tail-test-1

CONSTANT: magenta 5

: constant-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    magenta 5 eq? check-t
;

constant-test-1

: string-skip-whitespace-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    "   this is a test   "
    [  0 swap string-skip-whitespace  3 eq? check-t ] keep
    [  2 swap string-skip-whitespace  3 eq? check-t ] keep
    [  3 swap string-skip-whitespace  3 eq? check-t ] keep
    [  6 swap string-skip-whitespace  6 eq? check-t ] keep
    [  7 swap string-skip-whitespace  8 eq? check-t ] keep
    [ 16 swap string-skip-whitespace 16 eq? check-t ] keep
    [ 17 swap string-skip-whitespace  f eq? check-t ] keep
    [ 18 swap string-skip-whitespace  f eq? check-t ] keep
    [ 19 swap string-skip-whitespace  f eq? check-t ] keep
    [ 20 swap string-skip-whitespace  f eq? check-t ] keep
    [ 99 swap string-skip-whitespace  f eq? check-t ] keep
    drop
;

string-skip-whitespace-test-1

// multiline string
: string-skip-whitespace-test-2 ( -- )
    << last-word symbol-name >> ?nl write
    "   this is
a multiline string   "
    [  0 swap string-skip-whitespace  3 eq? check-t ] keep
    [  2 swap string-skip-whitespace  3 eq? check-t ] keep
    [  3 swap string-skip-whitespace  3 eq? check-t ] keep
    [  6 swap string-skip-whitespace  6 eq? check-t ] keep
    [  7 swap string-skip-whitespace  8 eq? check-t ] keep
    [ 10 swap string-skip-whitespace 11 eq? check-t ] keep
    [ 11 swap string-skip-whitespace 11 eq? check-t ] keep
    [ 12 swap string-skip-whitespace 13 eq? check-t ] keep
    drop
;

string-skip-whitespace-test-2

: string-skip-to-whitespace-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    "   this is a test   "
    [  0 swap string-skip-to-whitespace  0 eq? check-t ] keep
    [  2 swap string-skip-to-whitespace  2 eq? check-t ] keep
    [  3 swap string-skip-to-whitespace  7 eq? check-t ] keep
    [  6 swap string-skip-to-whitespace  7 eq? check-t ] keep
    [  7 swap string-skip-to-whitespace  7 eq? check-t ] keep
    [  8 swap string-skip-to-whitespace 10 eq? check-t ] keep
    [ 16 swap string-skip-to-whitespace 17 eq? check-t ] keep
    [ 17 swap string-skip-to-whitespace 17 eq? check-t ] keep
    [ 18 swap string-skip-to-whitespace 18 eq? check-t ] keep
    [ 19 swap string-skip-to-whitespace 19 eq? check-t ] keep
    [ 20 swap string-skip-to-whitespace  f eq? check-t ] keep
    [ 99 swap string-skip-to-whitespace  f eq? check-t ] keep
    drop
;

string-skip-to-whitespace-test-1

// multiline string
: string-skip-to-whitespace-test-2 ( -- )
    << last-word symbol-name >> ?nl write
    "   this is
a multiline string   "
    [  3 swap string-skip-to-whitespace  7 eq? check-t ] keep
    [  7 swap string-skip-to-whitespace  7 eq? check-t ] keep
    [  8 swap string-skip-to-whitespace 10 eq? check-t ] keep
    [ 10 swap string-skip-to-whitespace 10 eq? check-t ] keep
    [ 11 swap string-skip-to-whitespace 12 eq? check-t ] keep
    drop
;

string-skip-to-whitespace-test-2

: ?-test-1 ( -- )
    << last-word symbol-name >> ?nl write
    t "yes" "no" ? "yes" = check-t
    f "yes" "no" ? "no"  = check-t
    0 "yes" "no" ? "yes" = check-t
;

?-test-1

: slice-test-1
    << last-word symbol-name >> ?nl write
    2 5 { 11 12 13 14 15 16 17 17 } <slice>    { 13 14 15 } sequence= check-t
    2 5 { 11 12 13 14 15 16 17 17 } <slice> gc { 13 14 15 } sequence= check-t

    2 5 { 11 12 13 14 15 16 17 17 } <slice> dup slice? check-t

    [ slice-length      3 eq? check-t ] keep
    [ 0 swap slice-nth 13 eq? check-t ] keep
    [ 1 swap slice-nth 14 eq? check-t ] keep
    [ 2 swap slice-nth 15 eq? check-t ] keep

    [ 0 swap slice-nth-unsafe 13 eq? check-t ] keep
    [ 1 swap slice-nth-unsafe 14 eq? check-t ] keep
    [ 2 swap slice-nth-unsafe 15 eq? check-t ] keep

    [ length      3 eq? check-t ] keep
    [ 0 swap nth 13 eq? check-t ] keep
    [ 1 swap nth 14 eq? check-t ] keep
    [ 2 swap nth 15 eq? check-t ] keep

    drop
;

slice-test-1

: index?-test-1
    << last-word symbol-name >> ?nl write
    0 index? check-t
    1 index? check-t
    most-positive-fixnum index? check-t
    -1 index? check-false
    most-negative-fixnum index? check-false
    "test" index? check-false
    { } index? check-false
;

index?-test-1

: bounds-check?-test-1
    << last-word symbol-name >> ?nl write

    4 { 0 1 2 3 } [ bounds-check? ] curry each-integer
    get-datastack { t t t t } sequence= check-t
    clear

    { 0 1 2 3 }
    -1 over bounds-check? check-false
    4 over bounds-check? check-false
    42  over bounds-check? check-false
    drop
;

bounds-check?-test-1

: ?nth-test-1
    << last-word symbol-name >> ?nl write

    4 { 0 1 2 3 } [ ?nth ] curry each-integer
    get-datastack { 0 1 2 3 } sequence= check-t
    clear

    { 0 1 2 3 }
    -1 over ?nth check-false
    4 over ?nth check-false
    42  over ?nth check-false
    drop
;

?nth-test-1

: ?nth-test-2
    << last-word symbol-name >> ?nl write

    4 V{ 0 1 2 3 } [ ?nth ] curry each-integer
    get-datastack { 0 1 2 3 } sequence= check-t
    clear

    V{ 0 1 2 3 }
    -1 over ?nth check-false
    4 over ?nth check-false
    42  over ?nth check-false
    drop
;

?nth-test-2

: and-test-1
    << last-word symbol-name >> ?nl write
    t f and check-false
    f t and check-false
    0 t and check-t
    t 0 and 0 eq? check-t

    f 71 and 71 eq? check-false
    t 71 and 71 eq? check-t
    "test" 42 and 42 eq? check-t
;

and-test-1

: or-test-1
    << last-word symbol-name >> ?nl write
    t f or check-t
    f t or check-t
    0 t or 0 eq? check-t
    t 0 or check-t

    f 71 or 71 eq? check-t
    t 71 or check-t
    "test" 42 or "test" = check-t
;

or-test-1

: sbuf-insert-nth!-test-1
    << last-word symbol-name >> ?nl write
    't' 0 "" string>sbuf sbuf-insert-nth! sbuf>string "t" string= check-t
;

sbuf-insert-nth!-test-1

: string-index-from-test-1
    << last-word symbol-name >> ?nl write
    't' 0 "this is a test" string-index-from zero? check-t
    'h' 0 "this is a test" string-index-from 1 eq? check-t
    'h' 2 "this is a test" string-index-from check-false
    't' 1 "this is a test" string-index-from 10 eq? check-t
    'e' 4 "this is a test" string-index-from 11 eq? check-t
    'x' 0 "this is a test" string-index-from check-false
;

string-index-from-test-1

IN: feline

?nl "Reached end of test.feline" write
