using: feline ;
in: test

empty

default-visibility get ' feline:public assert-eq

public

-- this is a comment
( this is another comment )

interactive? get assert-false

1 2 + 3 assert-eq
1 2 + 4 eq? assert-false

"test" "test" eq? assert-false

vector{ 1 2 3 } length 3 assert=
vector{ "this is a test" } length 1 assert=

"this is a multiline
string" length 26 assert=

clear

test: multiline-string-test-1
    "this is
a multiline string"
    dup string? assert-true
    dup length 26 assert=
    "this is\na multiline string" assert=
;

multiline-string-test-1

test: string-literal-escapes-test-1
    "this is a \"test\"!\n" string-length 18 assert-eq
;

string-literal-escapes-test-1

test: string?-test-1 ( -- )
    t string? assert-false
    f string? assert-false
    42 string? assert-false
    2000000 string? assert-false
    "test" string? assert-true
    ' dup string? assert-false
    ' dup symbol-name string? assert-true
;

string?-test-1

-- Test for the Factor/Feline version of pick.
-- The Forth version of pick is different.
test: pick-test-1 ( -- )
    clear
    1 2 3 pick get-data-stack { 1 2 3 1 } sequence= assert-true
    clear
;

pick-test-1

-- Test for the Factor/Feline version of 2over.
-- The Forth version of 2over is different.
test: 2over-test-1 ( -- )
    clear
    1 2 3 2over get-data-stack { 1 2 3 1 2 } sequence= assert-true
    clear
;

2over-test-1

test: fixnum?-test-1 ( -- )
    most-negative-fixnum fixnum? assert-true
    -3 fixnum? assert-true
    -2 fixnum? assert-true
    -1 fixnum? assert-true
    0 fixnum? assert-true
    1 fixnum? assert-true
    2 fixnum? assert-true
    3 fixnum? assert-true
    most-positive-fixnum fixnum? assert-true
    "test" fixnum? assert-false
    ' dup fixnum? assert-false
    { 1 2 3 } fixnum? assert-false
;

fixnum?-test-1

test: fixnum-test-1 ( -- )
    1 2 + 3 assert=
    1 2 + fixnum? assert-true
;

fixnum-test-1

test: fixnum-test-2 ( -- )
    -1 -2 + -3 assert=
;

fixnum-test-2

test: fixnum-test-3 ( -- )
    0 fixnum? assert-true
    0 0 assert=
    1 0 = assert-false
    -1 0 = assert-false
    1 -1 + 0 assert=
    4 -4 + 0 assert=
;

fixnum-test-3

-- fixnum<
test: fixnum<-test-1 ( -- )
    0 0 fixnum< assert-false
    1 1 fixnum< assert-false
    1 2 fixnum< assert-true
    2 1 fixnum< assert-false
    -2 -1 fixnum< assert-true
    -1 -2 fixnum< assert-false
    -2 1 fixnum< assert-true
    1 -2 fixnum< assert-false
    most-negative-fixnum 0 fixnum< assert-true
    most-negative-fixnum most-positive-fixnum fixnum< assert-true
    0 most-positive-fixnum fixnum< assert-true
;

fixnum<-test-1

-- fixnum<=
test: fixnum<=-test-1 ( -- )
    0 0 fixnum<= assert-true
    1 1 fixnum<= assert-true
    1 2 fixnum<= assert-true
    2 1 fixnum<= assert-false
    -2 -1 fixnum<= assert-true
    -1 -2 fixnum<= assert-false
    -2 1 fixnum<= assert-true
    1 -2 fixnum<= assert-false
    most-negative-fixnum 0 fixnum<= assert-true
    most-negative-fixnum most-positive-fixnum fixnum<= assert-true
    most-negative-fixnum most-negative-fixnum fixnum<= assert-true
    most-positive-fixnum most-positive-fixnum fixnum<= assert-true
    0 most-positive-fixnum fixnum<= assert-true
;

fixnum<=-test-1

test: fixnum>-test-1 ( -- )
    0 0 fixnum> assert-false
    1 1 fixnum> assert-false
    1 2 fixnum> assert-false
    2 1 fixnum> assert-true
    -2 -1 fixnum> assert-false
    -1 -2 fixnum> assert-true
    -2 1 fixnum> assert-false
    1 -2 fixnum> assert-true
    most-negative-fixnum 0 fixnum> assert-false
    most-negative-fixnum most-positive-fixnum fixnum> assert-false
    most-positive-fixnum most-negative-fixnum fixnum> assert-true
    0 most-positive-fixnum fixnum> assert-false

    most-positive-fixnum 1+ most-positive-fixnum fixnum> assert-true
;

fixnum>-test-1

test: fixnum>=-test-1 ( -- )
    0 0 fixnum>= assert-true
    1 1 fixnum>= assert-true
    1 2 fixnum>= assert-false
    2 1 fixnum>= assert-true
    -2 -1 fixnum>= assert-false
    -1 -2 fixnum>= assert-true
    -2 1 fixnum>= assert-false
    1 -2 fixnum>= assert-true
    most-negative-fixnum 0 fixnum>= assert-false
    most-negative-fixnum most-positive-fixnum fixnum>= assert-false
    most-negative-fixnum most-negative-fixnum fixnum>= assert-true
    most-positive-fixnum most-positive-fixnum fixnum>= assert-true
    0 most-positive-fixnum fixnum>= assert-false
;

fixnum>=-test-1

test: >=-test-1 ( -- )
     0  0 >= assert-true
     1  1 >= assert-true
     1  2 >= assert-false
     2  1 >= assert-true
    -2 -1 >= assert-false
    -1 -2 >= assert-true
    -2  1 >= assert-false
     1 -2 >= assert-true

    most-negative-fixnum 0 >= assert-false
    0 most-positive-fixnum >= assert-false

    most-negative-fixnum most-positive-fixnum >= assert-false
    most-negative-fixnum most-negative-fixnum >= assert-true
    most-positive-fixnum most-positive-fixnum >= assert-true
    most-positive-fixnum most-negative-fixnum >= assert-true

    most-positive-int64 0.0 >= assert-true
    most-negative-int64 0.0 >= assert-false
;

>=-test-1

test: fixnum-test-5 ( -- )
    1 2 fixnum- -1 assert=
    1 2 - -1 assert=
;

fixnum-test-5

test: fixnum-test-6 ( -- )
    2 3 fixnum* 6 assert=
    2 3 * 6 assert=
;

fixnum-test-6

test: fixnum-test-7 ( -- )
    8 3 fixnum/i 2 assert=
    8 3 / float? assert
    8 3 / 2 = assert-false
    8 3 / 2 swap = assert-false
    8 3 / 2 equal? assert-false
    8 3 / 2 swap equal? assert-false
    -8 3 fixnum/i -2 assert=
    -8 3 / -2 = assert-false
;

fixnum-test-7

test: mod-test-1 ( -- )
     7  3 mod  1 assert=
     7 -3 mod  1 assert=
    -7  3 mod -1 assert=

     7  3 fixnum>int64 mod  1 assert=
     7 -3 fixnum>int64 mod  1 assert=
    -7  3 fixnum>int64 mod -1 assert=

    fixnum-tag-bits 3 = [
        most-positive-fixnum 17 mod 15 assert=
        most-positive-fixnum 1 + dup int64? assert 17 mod 16 assert=
        most-positive-fixnum 2 + dup int64? assert 17 mod  0 assert=
        most-positive-fixnum 3 + dup int64? assert 17 mod  1 assert=

        most-positive-fixnum 17 mod 15 fixnum>int64 assert=
        most-positive-fixnum 1 + 17 fixnum>int64 mod 16 assert=
        most-positive-fixnum 2 + 17 fixnum>int64 mod  0 assert=
        most-positive-fixnum 3 + 17 fixnum>int64 mod  1 assert=
    ] when
;

mod-test-1

test: fixnum-abs-test-1
     17 fixnum-abs 17 assert-eq
    -17 fixnum-abs 17 assert-eq

    most-positive-fixnum dup fixnum-abs assert-eq
    most-positive-fixnum 1 - dup fixnum-abs assert-eq

    most-negative-fixnum 1 + fixnum-abs most-positive-fixnum assert-eq
    most-negative-fixnum fixnum-abs dup int64? assert most-positive-fixnum 1 + assert=
;

fixnum-abs-test-1

-- fixnum-bitand, bitand
test: fixnum-test-9 ( -- )
    15 7 bitand 7 assert=
    15 0xf0 bitand 0 assert=
    3 1 bitand 1 assert=
;

fixnum-test-9

-- fixnum+
test: fixnum-test-10 ( -- )
     42  87 fixnum+  129 assert=
    -42  87 fixnum+   45 assert=
     42 -87 fixnum+  -45 assert=
    -42 -87 fixnum+ -129 assert=

    fixnum-tag-bits 3 = [
        most-positive-fixnum 1152921504606846975 assert-eq
        most-positive-fixnum 1 - 1152921504606846974 assert-eq
        most-positive-fixnum 1 + dup int64? assert 1152921504606846976 assert=

        most-negative-fixnum -1152921504606846976 assert-eq
        most-negative-fixnum 1 + -1152921504606846975 assert-eq
        most-negative-fixnum 1 - dup int64? assert -1152921504606846977 assert=
    ] when
;

fixnum-test-10

test: fixnum>string-test-1 ( -- )
    -17 fixnum>string "-17" assert=
      0 fixnum>string   "0" assert=
     42 fixnum>string  "42" assert=

    fixnum-tag-bits 3 = [
        most-negative-fixnum fixnum>string "-1152921504606846976" assert=
        most-negative-fixnum 1 + fixnum>string "-1152921504606846975" assert=
        most-negative-fixnum 2 + fixnum>string "-1152921504606846974" assert=
        most-positive-fixnum fixnum>string "1152921504606846975" assert=
    ] when
;

fixnum>string-test-1

test: fixnum>hex-test-1 ( -- )
    -17 fixnum>hex "-11" assert=
      0 fixnum>hex   "0" assert=
     42 fixnum>hex  "2a" assert=

    fixnum-tag-bits 3 = [
        most-negative-fixnum     fixnum>hex "-1000000000000000" assert=
        most-negative-fixnum 1 + fixnum>hex  "-fffffffffffffff" assert=
        most-negative-fixnum 2 + fixnum>hex  "-ffffffffffffffe" assert=
        most-positive-fixnum     fixnum>hex   "fffffffffffffff" assert=
    ] when

    -576460752303423488 >hex "-800000000000000" assert=
     576460752303423487 >hex  "7ffffffffffffff" assert=
;

fixnum>hex-test-1

test: number>string-test-1 ( -- )
    -17 number>string "-17" assert=
    0 number>string "0" assert=
    42 number>string "42" assert=


    fixnum-tag-bits 3 = [
        most-negative-fixnum number>string "-1152921504606846976" assert=
        most-positive-fixnum number>string  "1152921504606846975" assert=
    ] when
;

number>string-test-1

test: fixnum-max-test-1 ( -- )
    1 2 fixnum-max 2 assert-eq
    2 1 fixnum-max 2 assert-eq
    -1 2 fixnum-max 2 assert-eq
    2 -1 fixnum-max 2 assert-eq
    most-positive-fixnum 0 fixnum-max most-positive-fixnum assert-eq
    most-negative-fixnum 0 fixnum-max zero? assert-true
    0 most-positive-fixnum fixnum-max most-positive-fixnum assert-eq
    0 most-negative-fixnum fixnum-max zero? assert-true
;

fixnum-max-test-1

test: max-test-1 ( -- )
    1 2 max 2 assert-eq
    2 1 max 2 assert-eq
    -1 2 max 2 assert-eq
    2 -1 max 2 assert-eq
    most-positive-fixnum 0 max most-positive-fixnum assert-eq
    most-negative-fixnum 0 max zero? assert-true
    0 most-positive-fixnum max most-positive-fixnum assert-eq
    0 most-negative-fixnum max zero? assert-true
;

max-test-1

test: fixnum-min-test-1 ( -- )
    1 2 fixnum-min 1 assert-eq
    2 1 fixnum-min 1 assert-eq
    -1 2 fixnum-min -1 assert-eq
    2 -1 fixnum-min -1 assert-eq
    most-positive-fixnum 0 fixnum-min zero? assert-true
    most-negative-fixnum 0 fixnum-min most-negative-fixnum assert-eq
    0 most-positive-fixnum fixnum-min zero? assert-true
    0 most-negative-fixnum fixnum-min most-negative-fixnum assert-eq
;

fixnum-min-test-1

test: min-test-1 ( -- )
    1 2 min 1 assert-eq
    2 1 min 1 assert-eq
    -1 2 min -1 assert-eq
    2 -1 min -1 assert-eq
    most-positive-fixnum 0 min zero? assert-true
    most-negative-fixnum 0 min most-negative-fixnum assert-eq
    0 most-positive-fixnum min zero? assert-true
    0 most-negative-fixnum min most-negative-fixnum assert-eq
;

min-test-1

test: min-length-test-1
    "test"     "this is a test" min-length 4 assert=
    ""         "effluvia"       min-length 0 assert=
    { 1 2 3 }  { 4 }            min-length 1 assert=
    vector{ 1 2 3 } ""          min-length 0 assert= ;

min-length-test-1

test: dip-test-1
    clear
    87 42 [ 3 * ] dip get-data-stack vector{ 261 42 } sequence= assert-true
    clear
;

dip-test-1

test: 2dip-test-1 ( -- )
    clear
    42 17 89 [ 1 + ] 2dip get-data-stack { 43 17 89 } sequence= assert-true
    clear
;

2dip-test-1

test: each-index-test-1 ( -- )
    clear
    { "a" "b" "c" } [ 2array ] each-index get-data-stack
    { { "a" 0 } { "b" 1 } { "c" 2 } } sequence= assert-true
    clear
;

each-index-test-1

test: map-test-1
    vector{ 1 2 3 } [ dup + ] map vector{ 2 4 6 } assert=
    clear
    { { 1 2 } { 3 4 } { 5 6 } } [ first ] map get-data-stack { { 1 3 5 } } assert=
    clear
    { 3 -4 2 -5 -6 } [ abs ] map get-data-stack { { 3 4 2 5 6 } } assert=
    clear
;

map-test-1

test: map-index-test-1 ( -- )
    clear
    { "a" "b" "c" } [ 2array ] map-index get-data-stack
    { { { "a" 0 } { "b" 1 } { "c" 2 } } } assert=
    clear
    vector{ "a" "b" "c" } [ 2array ] map-index get-data-stack
    { vector{ { "a" 0 } { "b" 1 } { "c" 2 } } } assert=
    clear
;

map-index-test-1

test: keep-test-1 ( -- )
    42 [ dup ] keep get-data-stack vector{ 42 42 42 } sequence= assert-true
    clear
;

keep-test-1

test: bi@-test-1
    3 4 [ dup ] bi@ get-data-stack vector{ 3 3 4 4 } sequence= assert-true
    clear
;

bi@-test-1

test: array-test-1 ( -- )
    10 42 <array>
    [ array? assert-true ] keep
    [ length 10 assert= ] keep
    10 [ over nth 42 assert-eq ] each-integer
    drop
;

array-test-1

test: array-test-2
    10 f <array> >local: a
    10 [ [ number>string ] keep a array-set-nth ] each-integer
    a [ number>string assert= ] each-index
    [ -1 a array-nth ] assert-must-fail
    [ 10 a array-nth ] assert-must-fail
    [ "test" a array-nth ] assert-must-fail
;

array-test-2

test: array-test-3
    { "one" "two" "three" } array-first "one" assert=
    { "one" "two" } array-first "one" assert=
    { 42 } array-first 42 assert=
    [ { } array-first ] assert-must-fail
;

array-test-3

test: 1array-test-1 ( -- )
    clear
    71 1array get-data-stack { { 71 } } sequence= assert-true
    clear
    "test" 1array [ array? assert-true ] [ array-first "test" assert= ] bi
;

1array-test-1

test: 2array-test-1 ( -- )
    clear
    "test1" "test2" 2array get-data-stack { { "test1" "test2" } } sequence= assert-true
    clear
    "test1" "test2" 2array [ array? assert-true ] [ array-first "test1" assert= ] bi
;

2array-test-1

test: 3array-test-1 ( -- )
    clear
    1 2 3 3array get-data-stack { { 1 2 3 } } sequence= assert-true
    clear
    "ready" "steady" "go!" 3array
    [ array? assert-true ] [ array-first "ready" assert= ] bi
;

3array-test-1

test: 4array-test-1 ( -- )
    clear
    1 2 3 4 4array get-data-stack { { 1 2 3 4 } } sequence= assert-true
    clear
    "fee" "fie" "fo" "fum" 4array
    [ array? assert-true ] [ array-first "fee" assert= ] bi
;

4array-test-1

-- vector-insert-nth
test: vector-test-1 ( -- )
    17 0 vector{ 0 1 2 3 } [ vector-insert-nth ] keep
    vector{ 17 0 1 2 3 } sequence= assert-true
    clear
;

vector-test-1

test: vector-remove-nth!-test-1
    3 vector{ 0 1 2 3 4 5 } [ vector-remove-nth! ] keep
    [ length 5 assert-eq ] keep
    vector{ 0 1 2 4 5 } assert=

    [ 17 vector{ 0 1 2 3 4 5 } vector-remove-nth! ] assert-must-fail
;

vector-remove-nth!-test-1

test: vector-test-2 ( -- )
    1 <vector> [ vector? assert-true ] keep
    100 [ dup pick vector-set-nth ] each-integer
    [ [ assert-eq ] vector-each-index ] keep
    clear

    1 <vector>
    "test" [ 100 pick vector-set-nth ] keep
    100 pick vector-nth assert-eq

    -- verify that new cells are initialized to f
    100 [ over vector-nth assert-false ] each-integer
    clear

    local: v
    1 <vector> !> v
    42 9 v set-nth
    87 v push
    v vector{ f f f f f f f f f 42 87 } sequence= assert-true

    -- FIXME this fails Nov 25 2016 9:42 AM
    -- 14 19 v set-nth
    -- v vector{ f f f f f f f f f 42 87 f f f f f f f f 14 } sequence= assert-true
;

vector-test-2

test: vector-test-3 ( -- )
    1 <vector> [ vector? assert-true ] keep
    10 [ over vector-push ] each-integer
    10 [ dup pick vector-nth assert-eq ] each-integer
    [ [ assert-eq ] each-index ] keep
    10 [ 9 swap - over vector-pop assert-eq ] each-integer
    vector-length zero? assert-true
;

vector-test-3

-- vector-pop*
test: vector-test-4 ( -- )
    vector{ 1 2 3 } [ vector-pop* ] keep
    [ length 2 assert= ] keep
    [ vector-pop* ] keep
    [ length 1 assert= ] keep
    [ vector-pop* ] keep
    [ length zero? assert-true ]
;

vector-test-4

-- vector-last
test: vector-test-5 ( -- )
    clear
    vector{ 1 2 3 } vector-last get-data-stack { 3 } sequence= assert-true
    clear
    vector{ "test" } vector-last "test" assert=
;

vector-test-5

test: vector-nth-test-1
    vector{ 0 1 2 3 } >local: v
    0 v vector-nth 0 assert=
    1 v vector-nth 1 assert=
    2 v vector-nth 2 assert=
    3 v vector-nth 3 assert=

    [ 4 v vector-nth ] assert-must-fail
    [ most-positive-fixnum v vector-nth ] assert-must-fail

    [ -1 v vector-nth ] assert-must-fail
    [ most-negative-fixnum v vector-nth ] assert-must-fail
    [ "test" v vector-nth ] assert-must-fail
;

vector-nth-test-1

test: vector-?nth-test-1
    vector{ 0 1 2 3 } >local: v
    0 v vector-?nth 0 assert=
    1 v vector-?nth 1 assert=
    2 v vector-?nth 2 assert=
    3 v vector-?nth 3 assert=

    4 v vector-?nth assert-false
    most-positive-fixnum v vector-?nth assert-false

    [ -1 v vector-?nth ] assert-must-fail
    [ most-negative-fixnum v vector-?nth ] assert-must-fail
    [ "test" v vector-?nth ] assert-must-fail
;

vector-?nth-test-1

test: vector>array-test-1 ( -- )
    vector{ 1 2 3 } vector>array
    [ array? assert-true ] keep
    { 1 2 3 } assert=
;

vector>array-test-1

: %local-test-1 ( -- 42 )
    local: foo
    42 !> foo
    foo
;

test: local-test-1 ( -- )
    %local-test-1 42 assert-eq
;

local-test-1

: %local-test-2 ( -- )
    42 >local: foo
    17 >local: bar
    foo bar -
;

test: local-test-2 ( -- )
    %local-test-2 25 assert-eq
;

local-test-2

test: if-test-1 ( -- )
    t [ 42 ] [ 17 ] if 42 assert-eq
    f [ 42 ] [ 17 ] if 17 assert-eq
    0 [ 42 ] [ 17 ] if 42 assert-eq
;

if-test-1

test: if*-test-1 ( -- )
    clear
    t [ 42 ] [ 17 ] if* get-data-stack { t 42 } sequence= assert-true
    clear
    f [ 42 ] [ 17 ] if* get-data-stack { 17 } sequence= assert-true
    clear
    0 [ 42 ] [ 17 ] if* get-data-stack { 0 42 } sequence= assert-true
    clear
;

if*-test-1

test: symbol?-test-1 ( -- )
    ' dup symbol? assert-true
    ' assert-true symbol? assert-true
    42 symbol? assert-false
    -3 symbol? assert-false
    "test" symbol? assert-false
;

symbol?-test-1

test: string>number-test-1
    "." string>number assert-false
    "-" string>number assert-false
;

string>number-test-1

test: string>number-test-2
    "0b11"    string>number   3 assert-eq
    "0b1100"  string>number  12 assert-eq

    "-0b11"   string>number  -3 assert-eq
    "-0b1100" string>number -12 assert-eq
;

string>number-test-2

test: string>number-test-3
    17   50   expt 3.3300140732146817e+61 assert=
    17.0 50   expt 3.3300140732146817e+61 assert=
    17   50.0 expt 3.3300140732146817e+61 assert=
    17.0 50.0 expt 3.3300140732146817e+61 assert=
;

string>number-test-3

test: string>number-test-4
     "0x7fffffffffffffff" string>number most-positive-int64 assert=
    "-0x8000000000000000" string>number most-negative-int64 assert=
;

string>number-test-4

test: string>number-test-5
    most-positive-fixnum number>string string>number
    dup fixnum? assert-true
    most-positive-fixnum assert-eq

    most-negative-fixnum number>string string>number
    dup fixnum? assert-true
    most-negative-fixnum assert-eq

    most-positive-fixnum 1 + number>string string>number
    dup int64? assert-true
    most-positive-fixnum 1 + assert=

    most-negative-fixnum 1 - number>string string>number
    dup int64? assert-true
    most-negative-fixnum 1 - assert=
;

string>number-test-5

test: '-test-1 ( -- )
    [ ' dup ] call symbol? assert-true
    3 [ dup ] call get-data-stack { 3 3 } sequence= assert-true
    clear
;

'-test-1

test: hashcode-test-1 ( -- )
    "test"
    [ string-hashcode fixnum? assert-true ] keep
    [ hashcode dup fixnum? assert-true ] keep
    string-hashcode assert-eq
;

hashcode-test-1

test: hashcode-test-2 ( -- )
    ' dup
    [ symbol-name "dup" string= assert-true ] keep
    [ symbol-vocab-name "feline" string= assert-true ] keep
    [ symbol-hashcode ] keep
    [ symbol-name hashcode ] keep
    symbol-vocab-name hashcode hash-combine assert-eq
;

hashcode-test-2

test: hashtable-test-1 ( -- )
    local: ht
    16 <hashtable> !> ht
    42 "parker" ht set-at
    ht hashtable-count 1 assert=
    87 "penelope" ht set-at
    ht hashtable-count 2 assert=
    "parker" ht at* assert-true
    42 assert=
    "penelope" ht at* assert-true
    87 assert=
    "cody may" ht at* assert-false
    assert-false
;

hashtable-test-1

test: hashtable-test-2 ( -- )
    72 <hashtable> hashtable-capacity 128 assert=
;

hashtable-test-2

test: hashtable-test-3 ( -- )
    local: ht
    16 <hashtable> !> ht
    1000 [ dup number>string ht set-at ] each-integer
    1000 [ dup number>string ht at assert= ] each-integer
    "charlie" ht at* assert-false assert-false
;

hashtable-test-3

global: ht

100 >constant: n1       -- total number of entries
40  >constant: n2       -- number of entries to delete

test: hashtable-test-4 ( -- )
    1 <hashtable> !> ht
    n1 [ dup number>string ht set-at ] each-integer
    n1 [ dup number>string ht at assert= ] each-integer

    -- delete first n2 entries
    n2 [ number>string ht delete-at ] each-integer

    -- verify remaining entries are findable
    n1 n2 - [ n2 + dup number>string ht at assert= ] each-integer

    -- delete first n2 entries again (should make no difference)
    n2 [ number>string ht delete-at ] each-integer

    -- verify remaining entries are findable
    n1 n2 - [ n2 + dup number>string ht at assert= ] each-integer

    -- add deleted entries back
    n2 [ dup number>string ht set-at ] each-integer

    -- verify all entries are findable
    n1 [ dup number>string ht at assert= ] each-integer

    ht hashtable-keys length n1 assert-eq
    ht hashtable-keys [ string? assert-true ] each
    ht hashtable-values length n1 assert-eq
    ht hashtable-values [ fixnum? assert-true ] each

    f !> ht
;

hashtable-test-4

test: hashtable-test-5
    local: ht
    16 <hashtable> !> ht
    -- fixnum keys
    1000 [ dup ht set-at ] each-integer
    1000 [ dup ht at assert= ] each-integer
    "charlie" ht at* assert-false assert-false
;

hashtable-test-5

test: length-test-1 ( -- )
    "test" length 4 assert-eq
    "testing" string>sbuf length 7 assert-eq
    { 1 2 3 } length 3 assert-eq
    vector{ 1 2 3 "test" } length 4 assert-eq
    [ dup + ] length 2 assert-eq
    3 [ + ] <curry> length 2 assert-eq
    3 ' + <curry> length 2 assert-eq
;

length-test-1

test: find-test-1 ( -- )
    vector{ 1 2 3 4 5 6 } [ 3 = ] find
    get-data-stack vector{ 2 3 } sequence= assert-true
    clear
    vector{ 1 2 3 4 5 6 } [ 17 = ] find
    get-data-stack f f 2array sequence= assert-true
    clear
    4 vector{ 1 2 3 4 5 6 } [ dupd = ] find
    get-data-stack vector{ 4 3 4 } sequence= assert-true
    clear
;

find-test-1

test: find-from-test-1 ( -- )
    4 "this is a test" [ 'e' = ] find-from
    get-data-stack { 11 'e' } sequence= assert-true
    clear
    0 "this is a test" [ 's' = ] find-from
    get-data-stack { 3 's' } sequence= assert-true
    clear
    99 "this is a test" [ 'e' = ] find-from
    get-data-stack { f f } sequence= assert-true
    clear
    -1 "this is a test" [ 'e' = ] find-from
    get-data-stack { f f } sequence= assert-true
    clear
;

find-from-test-1

test: find-last-from-test-1
    13 "this is a test" [ 'e' = ] find-last-from
    get-data-stack { 11 'e' } sequence= assert-true
    clear
    99 "this is a test" [ 'e' = ] find-last-from
    get-data-stack { f f } sequence= assert-true
    clear
    -99 "this is a test" [ 'e' = ] find-last-from
    get-data-stack { f f } sequence= assert-true
    clear
    4 vector{ 1 2 3 4 5 3 } [ 3 = ] find-last-from
    get-data-stack { 2 3 } sequence= assert-true
    clear
    3 4 vector{ 1 2 3 4 5 3 } [ dupd = ] find-last-from
    get-data-stack { 3 2 3 } sequence= assert-true
    clear
;

find-last-from-test-1

test: map-find-test-1 ( -- )
    clear
    vector{ 1 2 3 4 5 6 } [ 3 = ] map-find get-data-stack { t 3 } sequence= assert-true
    clear
    vector{ 1 2 3 4 5 6 } [ 17 = ] map-find get-data-stack { f f } sequence= assert-true
    clear
    4 vector{ 1 2 3 4 5 6 } [ dupd = ] map-find get-data-stack { 4 t 4 } sequence= assert-true
    clear
;

map-find-test-1

test: find-integer-test-1
    clear
    10 [ 5 eq? ] find-integer get-data-stack { 5 } assert=
    clear
;

find-integer-test-1

test: find-integer-test-2
    clear
    0 [ "shouldn't happen!" error ] find-integer get-data-stack { f } assert=
    clear
    -7 [ "shouldn't happen!" error ] find-integer get-data-stack { f } assert=
    clear
;

find-integer-test-2

test: ?lookup-symbol-test-1
    "dup" "feline" ?lookup-symbol ' dup assert-eq
    "xxx" "feline" ?lookup-symbol assert-false
    "dup" "xxx" ?lookup-symbol assert-false
;

?lookup-symbol-test-1

test: immediate?-test-1 ( -- )
    ' symbol: immediate? assert-true
    ' dup immediate? assert-false
    42 immediate? assert-false
    f immediate? assert-false
    ' f immediate? assert-true
;

immediate?-test-1

test: sequence=-test-1 ( -- )
    { "this is a test" } { "this is a test" } sequence= assert-true
;

sequence=-test-1

test: symbol-props-test-1 ( -- )
    clear
    "foo" ' dup symbol-prop get-data-stack { f } sequence= assert-true
    clear
    "this is a test" "foo" ' dup symbol-set-prop
    "foo" ' dup symbol-prop get-data-stack { "this is a test" } sequence= assert-true
    clear

    -- clean up
    f "foo" ' dup symbol-set-prop
;

symbol-props-test-1

test: symbol-props-gc-test-1 ( -- )
    "this is a test" "foo" ' dup symbol-set-prop
    "foo" ' dup symbol-prop get-data-stack { "this is a test" } sequence= assert-true
    clear

    gc

    "foo" ' dup symbol-prop get-data-stack { "this is a test" } sequence= assert-true
    clear

    -- clean up
    f "foo" ' dup symbol-set-prop
;

symbol-props-gc-test-1

test: times-test-1 ( -- )
    0 10 [ 1 + ] times 10 assert-eq
;

times-test-1

test: filter-test-1 ( -- )
    vector{ 1 2 3 4 } [ 3 < ] filter vector{ 1 2 } assert=
    { 1 2 3 4 } [ 3 < ] filter { 1 2 } assert=

    3 vector{ 1 2 3 4 } [ over = ] filter nip vector{ 3 } assert=
    3 { 1 2 3 4 } [ over = ] filter nip { 3 } assert=
;

filter-test-1

test: in-bounds?-test-1 ( -- )
    { 1 2 3 }
    0 over in-bounds? assert-true
    1 over in-bounds? assert-true
    2 over in-bounds? assert-true
    3 over in-bounds? assert-false
    -1 swap in-bounds? assert-false
;

in-bounds?-test-1

test: empty?-test-1
    { } empty? assert-true
    { 1 } empty? assert-false
    vector{ } empty? assert-true
    vector{ 1 } empty? assert-false

    f empty? assert-true
    [ 42 empty? ] assert-must-fail
;

empty?-test-1

test: until-test-1
    clear
    1 [ dup 1 = ] [ 1 + ] until get-data-stack { 1 } sequence= assert-true
    clear
    1 [ dup 4 = ] [ 1 + ] until get-data-stack { 4 } sequence= assert-true
    clear
    [ t ] [ 42 ] until get-data-stack empty? assert-true
    clear
;

until-test-1

test: while-test-1
    clear
    1 [ dup 1 = ] [ 1 + ] while get-data-stack { 2 } sequence= assert-true
    clear
    1 [ dup 4 = ] [ 1 + ] while get-data-stack { 1 } sequence= assert-true
    clear
    [ f ] [ 42 ] while get-data-stack empty? assert-true
    clear
;

while-test-1

test: bi-test-1 ( -- )
    clear
    42 [ 1 + ] [ 2 + ] bi get-data-stack { 43 44 } sequence= assert-true
    clear
;

bi-test-1

test: 2bi-test-1
    clear
    1 2 3 4 [ dup ] [ + ] 2bi get-data-stack { 1 2 3 4 4 7 } sequence= assert-true
    clear
    1 2 3 4 [ nip ] [ + ] 2bi get-data-stack { 1 2 4 7 } sequence= assert-true
    clear
;

2bi-test-1

tuple: foo a b c ;

test: tuple-class-test-1
    foo tuple-class? assert-true
    foo tuple-class-name dup symbol? assert-true ' foo assert-eq
    foo tuple-class-slots dup array? assert-true { "a" "b" "c" } equal? assert-true
    foo tuple-class-layout array? assert-true
    foo tuple-class-layout array-first dup tuple-class? assert-true foo assert-eq
    foo tuple-class-layout array-second 3 assert-eq
;

tuple-class-test-1

test: tuple-class-test-2
    gc

    foo tuple-class? assert-true
    foo tuple-class-name dup symbol? assert-true ' foo assert-eq
    foo tuple-class-slots dup array? assert-true { "a" "b" "c" } equal? assert-true
    foo tuple-class-layout array? assert-true
    foo tuple-class-layout array-first dup tuple-class? assert-true foo assert-eq
    foo tuple-class-layout array-second 3 assert-eq
;

tuple-class-test-2

test: tuple-instance?-test-1
    t tuple-instance? assert-false
    f tuple-instance? assert-false
    42 tuple-instance? assert-false
    2000000 tuple-instance? assert-false
    "test" tuple-instance? assert-false
    ' dup tuple-instance? assert-false
    ' dup symbol-name tuple-instance? assert-false

    foo tuple-instance? assert-false
    foo make-instance tuple-instance? assert-true
;

tuple-instance?-test-1

test: tuple-instance-test-1
    foo make-instance

    [ foo? assert-true ] keep
    [ tuple-instance? assert-true ] keep
    [ tuple-size 3 assert= ] keep
    [ object-typecode foo tuple-class-typecode assert-eq ] keep

    drop
;

tuple-instance-test-1

global: temp-string "test" !> temp-string

test: tuple-test-1 ( -- )
    foo make-instance
    [ foo? assert-true ] keep
    [ foo-a assert-false ] keep
    [ foo-b assert-false ] keep
    [ foo-c assert-false ] keep
    42 over foo-a!
    71 over foo-b!
    temp-string over foo-c!
    [ foo-a 42 assert= ] keep
    [ foo-b 71 assert= ] keep
    [ foo-c temp-string assert= ] keep
    [ foo-c "test" assert= ] keep

    f !> temp-string
    gc
    [ foo-c "test" assert= ] keep

    drop
;

tuple-test-1

test: vocab?-test-1
    42 vocab? assert-false
    "feline" vocab? assert-false
    "feline" lookup-vocab ( vocab ? ) assert-true vocab? assert-true
;

vocab?-test-1

test: lookup-vocab-test-1
    "feline" lookup-vocab ( vocab ? ) assert-true vocab? assert-true
    "feline" lookup-vocab ( vocab ? ) assert-true ( vocab ) lookup-vocab assert-true vocab? assert-true
    "feline" lookup-vocab ( vocab ? ) assert-true ( vocab ) dup lookup-vocab assert-true assert-eq
    current-vocab lookup-vocab assert-true vocab? assert-true
    "not a vocab" lookup-vocab assert-false vocab? assert-false
;

lookup-vocab-test-1

test: vocab-empty?-test-1
    feline-vocab vocab-empty? assert-false
    "asdf" dup delete-vocab ensure-vocab vocab-empty? assert-true
;

vocab-empty?-test-1

test: set-current-vocab-test-1
    [ 42 set-current-vocab ] assert-must-fail
;

set-current-vocab-test-1

test: unless*-test-1 ( -- )
    clear
    f [ 42 ] unless* get-data-stack { 42 } assert=
    clear
    t [ 42 ] unless* get-data-stack { t } assert=
    clear
    "test" [ 42 ] unless* get-data-stack { "test" } assert=
    clear
;

unless*-test-1

global: zork

test: global-test-1 ( -- )
    42 !> zork zork 42 assert-eq
;

global-test-1

-- : global-test-2 ( -- )
--     << last-word symbol-name >> ?nl write-string
--     87 ' zork set-global
--     ' zork get-global 87 eq? assert-true

--     [
--         "test" dup zork! zork eq? assert-true
--         ' zork get-global 87 eq? assert-true
--         19 ' zork set-global
--         zork "test" assert=
--         ' zork get-global 19 eq? assert-true
--     ] with-scope

--     ' zork get-global 19 eq? assert-true
-- ;

-- global-test-2

-- : global-test-3 ( -- )
--     << last-word symbol-name >> ?nl write-string
--     f zork!
--     zork assert-false
--     [ [ 71 zork! zork ] with-scope ] [ ] recover 71 eq? assert-true
--     [ [ 71 zork! "error" error ] with-scope ] [ drop zork ] recover assert-false
-- ;

-- global-test-3

test: index-test-1
    3 { 1 2 3 4 } index 2 assert-eq
    99 { 1 2 3 4 } index assert-false
    's' "this is a test" index 3 assert-eq
    'a' "this is a test" index 8 assert-eq
    "bar" { "foo" "bar" "baz" } index 1 assert-eq
;

index-test-1

test: index-from-test-1
    0 0 { 0 1 2 3 4 5 } index-from 0 assert-eq
    3 3 { 0 1 2 3 4 5 } index-from 3 assert-eq
    3 4 { 0 1 2 3 4 5 } index-from assert-false
    0 4 { 0 1 2 3 4 5 } index-from assert-false
    5 5 { 0 1 2 3 4 5 } index-from 5 assert-eq

    99 0 { 0 1 2 3 4 } index-from assert-false
    0 99 { 0 1 2 3 4 } index-from assert-false
;

index-from-test-1

test: member?-test-1
    17 { 1 2 3 } member? assert-false
    1  { 1 2 3 } member? 0 assert=
    f  { 1 2 3 } member? assert-false
    f  { 1 f 3 } member? 1 assert=
;

member?-test-1

test: member?-test-2 ( -- )
    "bar" { "foo" "bar" "baz" } member? 1 assert=
    "bag" { "foo" "bar" "baz" } member? assert-false
    4 { 1 2 3 4 } member? 3 assert=
    1 { 1 2 3 4 } member? 0 assert=
    "test" { 1 2 3 4 } member? assert-false
    0 { 1 2 3 4 } member? assert-false
;

member?-test-2

test: member-eq?-test-1
    { 1 2 3 4 } >local: a
    0 a member-eq? assert-false
    1 a member-eq? 0 assert=
    2 a member-eq? 1 assert=
    "test" >local: s
    s a member-eq? assert-false
    vector{ 1 2 3 4 } >local: v
    a [ v member-eq? assert ] each
    v [ a member-eq? assert ] each
    s v member-eq? assert-false
    s v push
    s v member-eq? 4 assert= ;

member-eq?-test-1

test: any?-test-1
    { 1 2 3 4 } [ char? ] any? assert-false
    { 1 2 3 4 't' } [ char? ] any? assert-true
    { 't' 1 2 3 4 } [ char? ] any? assert-true ;

any?-test-1

test: string-head-test-1 ( -- )
    "this is a test"
    [ 4 string-head "this" assert= ] keep

    -- FIXME "" confuses the parser Aug 22 2016 12:49 PM
--     [ 0 string-head "" assert= ] keep

    [ 0 string-head [ string? assert-true ] [ length zero? assert-true ] bi ] keep
    [ 14 string-head "this is a test" assert= ] keep
    drop
;

string-head-test-1

test: string-tail-test-1 ( -- )
    "this is a test"
    [ 10 string-tail "test" assert= ] keep
    [ 14 string-tail [ string? assert-true ] [ length zero? assert-true ] bi ] keep
    [ 0 string-tail "this is a test" assert= ] keep
    drop
;

string-tail-test-1

magenta >constant: test-magenta

test: constant-test-1 ( -- )
    test-magenta 5 assert-eq
;

constant-test-1

test: string-skip-whitespace-test-1 ( -- )
    "   this is a test   "
    [  0 swap string-skip-whitespace  3 assert-eq ] keep
    [  2 swap string-skip-whitespace  3 assert-eq ] keep
    [  3 swap string-skip-whitespace  3 assert-eq ] keep
    [  6 swap string-skip-whitespace  6 assert-eq ] keep
    [  7 swap string-skip-whitespace  8 assert-eq ] keep
    [ 16 swap string-skip-whitespace 16 assert-eq ] keep
    [ 17 swap string-skip-whitespace  f assert-eq ] keep
    [ 18 swap string-skip-whitespace  f assert-eq ] keep
    [ 19 swap string-skip-whitespace  f assert-eq ] keep
    [ 20 swap string-skip-whitespace  f assert-eq ] keep
    [ 99 swap string-skip-whitespace  f assert-eq ] keep
    drop
;

string-skip-whitespace-test-1

-- multiline string
test: string-skip-whitespace-test-2 ( -- )
    "   this is
a multiline string   "
    [  0 swap string-skip-whitespace  3 assert-eq ] keep
    [  2 swap string-skip-whitespace  3 assert-eq ] keep
    [  3 swap string-skip-whitespace  3 assert-eq ] keep
    [  6 swap string-skip-whitespace  6 assert-eq ] keep
    [  7 swap string-skip-whitespace  8 assert-eq ] keep
    [ 10 swap string-skip-whitespace 11 assert-eq ] keep
    [ 11 swap string-skip-whitespace 11 assert-eq ] keep
    [ 12 swap string-skip-whitespace 13 assert-eq ] keep
    drop
;

string-skip-whitespace-test-2

test: string-skip-to-whitespace-test-1 ( -- )
    "   this is a test   "
    [  0 swap string-skip-to-whitespace  0 assert-eq ] keep
    [  2 swap string-skip-to-whitespace  2 assert-eq ] keep
    [  3 swap string-skip-to-whitespace  7 assert-eq ] keep
    [  6 swap string-skip-to-whitespace  7 assert-eq ] keep
    [  7 swap string-skip-to-whitespace  7 assert-eq ] keep
    [  8 swap string-skip-to-whitespace 10 assert-eq ] keep
    [ 16 swap string-skip-to-whitespace 17 assert-eq ] keep
    [ 17 swap string-skip-to-whitespace 17 assert-eq ] keep
    [ 18 swap string-skip-to-whitespace 18 assert-eq ] keep
    [ 19 swap string-skip-to-whitespace 19 assert-eq ] keep
    [ 20 swap string-skip-to-whitespace  f assert-eq ] keep
    [ 99 swap string-skip-to-whitespace  f assert-eq ] keep
    drop
;

string-skip-to-whitespace-test-1

-- multiline string
test: string-skip-to-whitespace-test-2 ( -- )
    "   this is
a multiline string   "
    [  3 swap string-skip-to-whitespace  7 assert-eq ] keep
    [  7 swap string-skip-to-whitespace  7 assert-eq ] keep
    [  8 swap string-skip-to-whitespace 10 assert-eq ] keep
    [ 10 swap string-skip-to-whitespace 10 assert-eq ] keep
    [ 11 swap string-skip-to-whitespace 12 assert-eq ] keep
    drop
;

string-skip-to-whitespace-test-2

test: ?-test-1 ( -- )
    t "yes" "no" ? "yes" assert=
    f "yes" "no" ? "no"  assert=
    0 "yes" "no" ? "yes" assert=
;

?-test-1

test: slice-test-1
    2 5 { 11 12 13 14 15 16 17 18 } <slice>    { 13 14 15 } sequence= assert-true
    2 5 { 11 12 13 14 15 16 17 18 } <slice> gc { 13 14 15 } sequence= assert-true

    2 5 { 11 12 13 14 15 16 17 18 } <slice> dup slice? assert-true

    [ slice-length      3 assert-eq ] keep
    [ 0 swap slice-nth 13 assert-eq ] keep
    [ 1 swap slice-nth 14 assert-eq ] keep
    [ 2 swap slice-nth 15 assert-eq ] keep

    [ 0 swap slice-nth-unsafe 13 assert-eq ] keep
    [ 1 swap slice-nth-unsafe 14 assert-eq ] keep
    [ 2 swap slice-nth-unsafe 15 assert-eq ] keep

    [ length      3 assert-eq ] keep
    [ 0 swap nth 13 assert-eq ] keep
    [ 1 swap nth 14 assert-eq ] keep
    [ 2 swap nth 15 assert-eq ] keep

    drop
;

slice-test-1

test: index?-test-1
    0 index? assert-true
    1 index? assert-true
    most-positive-fixnum index? assert-true
    -1 index? assert-false
    most-negative-fixnum index? assert-false
    "test" index? assert-false
    { } index? assert-false
;

index?-test-1

test: curry-nth-test-1
    3 [ + ] <curry>
    0 over curry-nth 3 assert-eq
    1 over curry-nth ' + assert-eq
    0 over nth 3 assert-eq
    1 over nth ' + assert-eq
    clear
;

curry-nth-test-1

test: curry-nth-unsafe-test-1
    3 [ + ] <curry>
    0 over curry-nth-unsafe 3 assert-eq
    1 over curry-nth-unsafe ' + assert-eq
    0 over nth-unsafe 3 assert-eq
    1 over nth-unsafe ' + assert-eq
    clear
;

curry-nth-unsafe-test-1

test: ?nth-test-1
    4 { 0 1 2 3 } [ ?nth ] <curry> each-integer
    get-data-stack { 0 1 2 3 } sequence= assert-true
    clear

    { 0 1 2 3 }
    -1 over ?nth assert-false
    4 over ?nth assert-false
    42  over ?nth assert-false
    drop
;

?nth-test-1

test: ?nth-test-2
    4 vector{ 0 1 2 3 } [ ?nth ] <curry> each-integer
    get-data-stack { 0 1 2 3 } sequence= assert-true
    clear

    vector{ 0 1 2 3 }
    -1 over ?nth assert-false
    4 over ?nth assert-false
    42  over ?nth assert-false
    drop
;

?nth-test-2

test: and-test-1
    t f and assert-false
    f t and assert-false
    0 t and assert-true
    t 0 and 0 assert-eq

    f 71 and 71 eq? assert-false
    t 71 and 71 assert-eq
    "test" 42 and 42 assert-eq
;

and-test-1

test: or-test-1
    t f or assert-true
    f t or assert-true
    0 t or 0 assert-eq
    t 0 or assert-true

    f 71 or 71 assert-eq
    t 71 or assert-true
    "test" 42 or "test" assert=
;

or-test-1

test: sbuf-insert-nth!-test-1
    "oat" string>sbuf >local: sb
    'b' 0 sb sbuf-insert-nth!
    sb "boat" sequence= assert-true
    's' 3 sb sbuf-insert-nth!
    sb "boast" sequence= assert-true
;

sbuf-insert-nth!-test-1

test: sbuf-?last-test-1
    "testing" string>sbuf sbuf-?last 'g' assert-eq
    16 <sbuf> sbuf-?last assert-false
;

sbuf-?last-test-1

test: sbuf-reverse!-test-1
    "12345678"  string>sbuf sbuf-reverse!  "87654321" sequence= assert-true
    "123456789" string>sbuf sbuf-reverse! "987654321" sequence= assert-true
    "1" string>sbuf sbuf-reverse! "1" sequence= assert-true
    "" string>sbuf sbuf-reverse! "" sequence= assert-true
;

sbuf-reverse!-test-1

test: sbuf-shorten-test-1
    "12345678" string>sbuf >local: sb
    sb sbuf-length 8 assert-eq
    sb sbuf-validate
    16 sb sbuf-shorten
    sb sbuf-length 8 assert-eq
    sb sbuf-validate
    sb "12345678" sequence= assert-true
    4 sb sbuf-shorten
    sb sbuf-length 4 assert-eq
    sb sbuf-validate
    sb "1234" sequence= assert-true

    most-positive-fixnum sb sbuf-shorten
    sb sbuf-length 4 assert-eq
    sb sbuf-validate
    sb "1234" sequence= assert-true

    [ -1 sb sbuf-shorten ] assert-must-fail
    [ most-negative-fixnum sb sbuf-shorten ] assert-must-fail
;

sbuf-shorten-test-1

test: string-index-from-test-1
    't' 0 "this is a test" string-index-from zero? assert-true
    'h' 0 "this is a test" string-index-from 1 assert-eq
    'h' 2 "this is a test" string-index-from assert-false
    't' 1 "this is a test" string-index-from 10 assert-eq
    'e' 4 "this is a test" string-index-from 11 assert-eq
    'x' 0 "this is a test" string-index-from assert-false

    't' most-positive-fixnum "this is a test" string-index-from assert-false
;

string-index-from-test-1

test: base>integer-test-1
      "0" 10 base>integer   0 assert-eq
     "42" 10 base>integer  42 assert-eq
    "-42" 10 base>integer -42 assert-eq

    fixnum-tag-bits 3 = [
         "1152921504606846975" 10 base>integer most-positive-fixnum assert-eq
        "-1152921504606846976" 10 base>integer most-negative-fixnum assert-eq

         "2305843009213693950" 10 base>integer most-positive-fixnum dup + assert=
     ] when
;

base>integer-test-1

test: decimal>number-test-1
    "0" decimal>number 0 assert-eq
    "-0" decimal>number 0 assert-eq
    "1" decimal>number 1 assert-eq
    "-1" decimal>number -1 assert-eq
    "0.0" decimal>number 0.0 assert=
    "-0.0" decimal>number -0.0 assert=
    most-positive-fixnum fixnum>string decimal>number most-positive-fixnum assert-eq
    most-negative-fixnum fixnum>string decimal>number most-negative-fixnum assert-eq
;

decimal>number-test-1

test: negate-test-1
    0 negate 0 assert-eq
    42 negate -42 assert-eq

    fixnum-tag-bits 3 = [
        most-positive-fixnum negate number>string "-1152921504606846975" assert=
        most-positive-fixnum negate -1152921504606846975 assert-eq

        most-positive-fixnum dup fixnum-fixnum+ negate number>string  "-2305843009213693950" assert=
        most-positive-fixnum dup fixnum-fixnum+ negate -2305843009213693950 assert=

        most-negative-fixnum negate number>string "1152921504606846976" assert=
        most-negative-fixnum negate 1152921504606846976 assert=

        most-negative-fixnum dup fixnum-fixnum+ negate number>string "2305843009213693952" assert=
        most-negative-fixnum dup fixnum-fixnum+ negate 2305843009213693952 assert=
    ] when

    most-positive-int64 9223372036854775807 assert=
    most-positive-int64 negate dup int64? assert-true
    -9223372036854775807 assert=

    most-negative-int64 -9223372036854775808 assert=
    most-negative-int64 negate dup uint64? assert-true
    dup uint64>string "9223372036854775808" assert=
    negate dup int64? assert-true most-negative-int64 assert=
;

negate-test-1

test: string-substring-test-1
    "this is a test" >local: s

     0  4 s string-substring "this"  assert=
    10 14 s string-substring "test"  assert=
     5 10 s string-substring "is a " assert=
    13 14 s string-substring "t"     assert=

     0  0 s string-substring "" assert=
     4  4 s string-substring "" assert=
    14 14 s string-substring "" assert=

     0 14 s string-substring "this is a test" assert=

    [  0 15 s string-substring ] assert-must-fail
    [  0 -4 s string-substring ] assert-must-fail
    [ -2 14 s string-substring ] assert-must-fail
    [  4  3 s string-substring ] assert-must-fail
;

string-substring-test-1

test: sbuf-substring-test-1
    "this is a test" string>sbuf
     0  4 pick sbuf-substring "this"  assert=
    10 14 pick sbuf-substring "test"  assert=
     5 10 pick sbuf-substring "is a " assert=
    13 14 pick sbuf-substring "t"     assert=

    0 0 pick sbuf-substring "" assert=
    4 4 pick sbuf-substring "" assert=


    0 14 rot sbuf-substring "this is a test" assert=
;

sbuf-substring-test-1

-- generic
test: substring-test-1
    "this is a test"
     0  4 pick substring "this"  assert=
    10 14 pick substring "test"  assert=
     5 10 pick substring "is a " assert=
    13 14 pick substring "t"     assert=

    0 0 pick substring "" assert=
    4 4 pick substring "" assert=

    0 14 pick substring "this is a test" assert=

    string>sbuf
     0  4 pick substring "this"  assert=
    10 14 pick substring "test"  assert=
     5 10 pick substring "is a " assert=
    13 14 pick substring "t"     assert=

    0 0 pick substring "" assert=
    4 4 pick substring "" assert=

    0 14 rot substring "this is a test" assert=
;

substring-test-1

test: string-has-prefix?-test-1
    "foo" "foobar" string-has-prefix? assert-true
    "foobar" "foo" string-has-prefix? assert-false
    "foo" "foo" string-has-prefix? assert-true
    "0x" "0" string-has-prefix? assert-false
    "0x" "0x0" string-has-prefix? assert-true

    "" "foo" string-has-prefix? assert-true
    "foo" "" string-has-prefix? assert-false
    "" "" string-has-prefix? assert-true

    [ 42 "test" string-has-prefix? ] assert-must-fail
    [ "test" 42 string-has-prefix? ] assert-must-fail
;

string-has-prefix?-test-1

test: string-has-suffix?-test-1
    "bar" "foobar" string-has-suffix? assert-true
    "foobar" "bar" string-has-suffix? assert-false
    "foo" "foo" string-has-suffix? assert-true

    "" "foo" string-has-suffix? assert-true
    "foo" "" string-has-suffix? assert-false
    "" "" string-has-suffix? assert-true

    [ 42 "test" string-has-suffix? ] assert-must-fail
    [ "test" 42 string-has-suffix? ] assert-must-fail
;

string-has-suffix?-test-1

test: substring-start-test-1
    "test" "this is a test" substring-start 10 assert=
    "test" "testing" substring-start 0 assert=
    "test" "test" substring-start 0 assert=

    "test" "no match" substring-start assert-false
    "this string is too long" "test" substring-start assert-false
;

substring-start-test-1

test: vector-find-string-test-1
    vector{ "foo" "bar" "baz" "zork" } >local: v
    "foo"  v vector-find-string assert-true 0 assert=
    "zork" v vector-find-string assert-true 3 assert=
    "baz"  v vector-find-string assert-true 2 assert=
    "bar"  v vector-find-string assert-true 1 assert=

    "cat"  v vector-find-string assert-false "cat" assert=
;

vector-find-string-test-1

test: 1+!>-test-1 ( -- )
    42 >local: bar
    bar 42 assert=
    1+!> bar
    bar 43 assert=
    0 >local: foo
    100 [ foo assert= 1+!> foo ] each-integer
;

1+!>-test-1

test: 1-!>-test-1 ( -- )
    42 >local: bar
    bar 42 assert=
    1-!> bar
    bar 41 assert=
    0 >local: foo
    100 [ negate foo assert= 1-!> foo ] each-integer
;

1-!>-test-1

global: bar

test: 1+!>-test-2 ( -- )
    ' bar symbol-global? assert-true
    42 !> bar
    bar 42 assert=
    1+!> bar
    bar 43 assert=
    0 !> bar
    100 [ bar assert= 1+!> bar ] each-integer
;

1+!>-test-2

test: 1-!>-test-2 ( -- )
    ' bar symbol-global? assert-true
    42 !> bar
    bar 42 assert=
    1-!> bar
    bar 41 assert=
    0 !> bar
    100 [ negate bar assert= 1-!> bar ] each-integer
;

1-!>-test-2

test: 1+!>-test-3 ( -- )
    ' bar symbol-global? assert-true
    ' test:bar ' bar assert-eq

    42 !> bar
    bar 42 assert=
    1+!> bar
    bar 43 assert=

    87 >local: bar
    bar 87 assert=

    test:bar 43 assert=

    1+!> bar
    bar 88 assert=
    0 !> bar
    100 [ bar assert= 1+!> bar ] each-integer

    test:bar 43 assert=
;

1+!>-test-3

: %case-test-1 ( x -- y )
    {
        { 1 [ "one" ] }
        { 2 [ "two" ] }
        { 3 [ "three" ] }
        { 4 [ "four" ] }
        [ drop "not found" ]
    } case ;

test: case-test-1
    clear

    7 %case-test-1 get-data-stack { "not found" } assert= clear
    2 %case-test-1 get-data-stack { "two" }       assert= clear
    4 %case-test-1 get-data-stack { "four" }      assert= clear
    1 %case-test-1 get-data-stack { "one" }       assert= clear
    3 %case-test-1 get-data-stack { "three" }     assert= clear
;

case-test-1

: %case-test-2 ( x -- y )
    {
        { 1 [ "one" ] }
        { 2 [ "two" ] }
        { 3 [ "three" ] }
        { 4 [ "four" ] }
        -- no default
    } case ;

test: case-test-2
    clear

    [ 7 %case-test-2 ] assert-must-fail

    2 %case-test-2 get-data-stack { "two" }     assert= clear
    4 %case-test-2 get-data-stack { "four" }    assert= clear
    1 %case-test-2 get-data-stack { "one" }     assert= clear
    3 %case-test-2 get-data-stack { "three" }   assert= clear
;

case-test-2

test: case-test-3
    3 {
        { 1 [ "one" ] }
        { 2 [ "two" ] }
        [ drop "early" ]
        { 3 [ "three" ] }
        { 4 [ "four" ] }
    } case
    "early" assert=
;

case-test-3

: %case-test-4 ( x -- y )
    {
        { "fee"  [ 1 ] }
        { "fie"  [ 2 ] }
        { "pho"  [ 3 ] }
        { "phum" [ 4 ] }
    } case
;

test: case-test-4
    "pho"  %case-test-4 3 assert=
    "fee"  %case-test-4 1 assert=
    "phum" %case-test-4 4 assert=
    "fie"  %case-test-4 2 assert=
    [ "effluvia" %case-test-4 ] assert-must-fail
;

case-test-4

: %cond-test-1 ( x -- y )
    {
        { [ dup 1 = ] [ drop "one" ] }
        { [ dup 2 = ] [ drop "two" ] }
        { [ dup 3 = ] [ drop "three" ] }
        { [ dup 4 = ] [ drop "four" ] }
        -- no default
    } cond ;

test: cond-test-1
    3 %cond-test-1 "three" assert=
    1 %cond-test-1 "one" assert=
    4 %cond-test-1 "four" assert=
    2 %cond-test-1 "two" assert=
    [ 17 %cond-test-1 ] assert-must-fail
;

cond-test-1

: %cond-test-2 ( x -- y )
    {
        { [ dup 1 = ] [ drop "one" ] }
        { [ dup 2 = ] [ drop "two" ] }
        { [ dup 3 = ] [ drop "three" ] }
        { [ dup 4 = ] [ drop "four" ] }
        [ drop "something else" ]
    } cond ;

test: cond-test-2
    3 %cond-test-2 "three" assert=
    1 %cond-test-2 "one" assert=
    4 %cond-test-2 "four" assert=
    2 %cond-test-2 "two" assert=
    9 %cond-test-2 "something else" assert=
;

cond-test-2

test: cond-test-3
    3 {
        { [ dup 1 = ] [ drop "one" ] }
        [ drop "early" ]
        { [ dup 2 = ] [ drop "two" ] }
        { [ dup 3 = ] [ drop "three" ] }
        { [ dup 4 = ] [ drop "four" ] }
    } cond
    "early" assert=
;

cond-test-3

test: cond-test-4
    [ { } cond ] assert-must-fail
;

cond-test-4

: %return-if-test-1 ( arg -- "yes"/"no" )
    [ "yes" ] return-if
    "no" ;

test: return-if-test-1
    clear
    t %return-if-test-1 get-data-stack { "yes" } assert=
    clear
    f %return-if-test-1 get-data-stack { "no"  } assert=
    clear
    0 %return-if-test-1 get-data-stack { "yes" } assert=
    clear

    lp@
    t %return-if-test-1 "yes" assert=
    lp@ assert=

    lp@
    f %return-if-test-1 "no"  assert=
    lp@ assert=

    depth zero? assert ;

return-if-test-1

: %return-if-test-2
    >local: arg

    arg [ arg ] return-if
    arg ;

test: return-if-test-2
    clear
    "foo" dup %return-if-test-2 assert-eq
    depth zero? assert

    f %return-if-test-2 assert-false
    depth zero? assert

    lp@
    "foo" dup %return-if-test-2 assert-eq
    lp@ assert=

    lp@
    f %return-if-test-2 assert-false
    lp@ assert=

    depth zero? assert ;

return-if-test-2

-- return-if before first local
: %return-if-test-3
    dup 3 = [ drop 47 ] return-if
    >local: arg
    arg 9 = [ arg 1 + ] return-if
    arg ;

global: saved-lp

test: return-if-test-3
    clear
    lp@ !> saved-lp
    3 %return-if-test-3 get-data-stack { 47 } assert=
    clear
    9 %return-if-test-3 get-data-stack { 10 } assert=
    clear
    5 %return-if-test-3 get-data-stack {  5 } assert=
    clear
    lp@ saved-lp assert= ;

return-if-test-3

-- test: @-test-1
--     ' dup symbol-code-address @
--     [ bignum? assert-true ] keep
--     [ 17901119438411630920 assert= ] keep
--     [ $f86d8d48f85d8948 assert= ] keep
--     bignum>hex "f86d8d48f85d8948" assert= ;

-- @-test-1

test: vector-?pop-test-1
    vector{ 1 2 }
    [ vector-?pop 2 assert= ] keep
    [ vector-?pop 1 assert= ] keep
    [ empty? assert-true ] keep
    vector-?pop assert-false ;

vector-?pop-test-1

test: vector-reverse!-test-1
    vector{ 1 2 3 4 5 } >local: v
    v vector-reverse! v assert-eq
    v vector{ 5 4 3 2 1 } sequence= assert
    vector{ 1 2 3 4 } !> v
    v vector-reverse! v assert-eq
    v vector{ 4 3 2 1 } sequence= assert
    vector{ 17 } !> v
    v vector-reverse! v assert-eq
    v vector{ 17 } sequence= assert
    vector{ } !> v
    v vector-reverse! v assert-eq
    v vector{ } sequence= assert
;

vector-reverse!-test-1

test: count-test-1
    vector{ 1 2 3 4 5 }
    dup ' odd?   count 3 assert=
    dup ' even?  count 2 assert=
    dup [ odd? ] count 3 assert=
    [ even? ]    count 2 assert= ;

count-test-1

test: format-test-1
    1 2 3 4 "the numbers %d, %d, %d and %d" format
    "the numbers 1, 2, 3 and 4" assert=
;

format-test-1

test: string>float-test-1
    "42.0" string>float 42.0 assert=
    "42" string>float 42.0 assert=
    "-42.0" string>float -42.0 assert=
    "-42" string>float -42.0 assert=


    fixnum-tag-bits 3 = [
        most-positive-fixnum fixnum>string string>float 1.152921504606847e+18 assert=
        most-negative-fixnum fixnum>string string>float -1.152921504606847e+18 assert=
    ] when
;

string>float-test-1

test: int64>float-test-1
    42 fixnum>int64 int64>float 42.0 assert=

    fixnum-tag-bits 3 = [
        most-positive-fixnum dup + dup int64? assert-true
        int64>float 2.305843009213694e+18 assert=
    ] when
;

int64>float-test-1

test: int64-fixnum+-test-1
    42 fixnum>int64 87 int64-fixnum+ 129 assert-eq

    fixnum-tag-bits 3 = [
        most-positive-fixnum 10 + dup int64? assert-true
        5 + dup int64? assert-true
        1152921504606846990 assert=

        "0x7fffffffffffffff" 16 base>integer most-positive-fixnum int64-fixnum+
        1.0376293541461623e+19 assert=
    ] when
;

int64-fixnum+-test-1

test: fixnum-fixnum<=-test-1
    1 2 fixnum-fixnum<= assert-true
    2 2 fixnum-fixnum<= assert-true
    2 1 fixnum-fixnum<= assert-false
    -1 0 fixnum-fixnum<= assert-true
    0 -1 fixnum-fixnum<= assert-false
    0 0 fixnum-fixnum<= assert-true
    -1 -1 fixnum-fixnum<= assert-true
    -1 0 fixnum-fixnum<= assert-true
;

fixnum-fixnum<=-test-1

test: <=-test-1
    1 2 <= assert-true
    2 2 <= assert-true
    2 1 <= assert-false
    -1 0 <= assert-true
    0 -1 <= assert-false
    0 0 <= assert-true
    -1 -1 <= assert-true
    -1 0 <= assert-true

    most-negative-fixnum most-positive-fixnum <= assert-true
    most-positive-fixnum most-negative-fixnum <= assert-false

    most-negative-fixnum 10 - dup <= assert-true
    most-negative-fixnum 10 - dup 5 + <= assert-true

    most-positive-fixnum 10 + dup <= assert-true
    most-positive-fixnum 10 + dup 5 + <= assert-true
;

<=-test-1

test: fixnum-fixnum>=-test-1
    43 42 fixnum-fixnum>= assert-true
    43 43 fixnum-fixnum>= assert-true
    42 43 fixnum-fixnum>= assert-false
    -1 1 fixnum-fixnum>= assert-false
    1 -1 fixnum-fixnum>= assert-true
    most-negative-fixnum most-positive-fixnum fixnum-fixnum>= assert-false
    most-positive-fixnum most-negative-fixnum fixnum-fixnum>= assert-true
    most-positive-fixnum dup fixnum-fixnum>= assert-true
    most-negative-fixnum dup fixnum-fixnum>= assert-true
    0 0 fixnum-fixnum>= assert-true
;

fixnum-fixnum>=-test-1

test: >=-test-2
    1 2 >= assert-false
    2 2 >= assert-true
    2 1 >= assert-true
    -1 0 >= assert-false
    0 -1 >= assert-true
    0 0 >= assert-true
    -1 -1 >= assert-true
    -1 0 >= assert-false

    most-negative-fixnum most-positive-fixnum >= assert-false
    most-positive-fixnum most-negative-fixnum >= assert-true

    most-negative-fixnum dup 10 - >= assert-true
    most-negative-fixnum 10 - dup 5 + swap >= assert-true

    most-positive-fixnum 10 + dup >= assert-true
    most-positive-fixnum 10 + dup 5 + swap >= assert-true
;

>=-test-2

test: iterator-test-1
    "this is a test" <iterator> >local: iter
    "" string>sbuf >local: sb
    [ iter next dup ] [ sb push ] while drop
    sb sbuf>string "this is a test" assert=
;

iterator-test-1

test: fixnum-fixnum+-test-1
    1  2 fixnum-fixnum+  3 assert-eq
    1 -2 fixnum-fixnum+ -1 assert-eq

    fixnum-tag-bits 3 = [
        most-positive-fixnum 0 fixnum-fixnum+ most-positive-fixnum assert-eq

        most-positive-fixnum   1 fixnum-fixnum+  1152921504606846976 assert=
        most-negative-fixnum  -1 fixnum-fixnum+ -1152921504606846977 assert=
        most-positive-fixnum dup fixnum-fixnum+  2305843009213693950 assert=
        most-negative-fixnum dup fixnum-fixnum+ -2305843009213693952 assert=
    ] when
;

fixnum-fixnum+-test-1

test: fixnum-1+-test-1
    42 fixnum-1+ 43 assert-eq
    -1 fixnum-1+  0 assert-eq

    most-negative-fixnum fixnum-1+
    [ fixnum? assert-true ]
    [ most-negative-fixnum 1 fixnum-fixnum+ assert= ]
    [ most-negative-fixnum 1 + assert= ]
    tri

    -- overflow
    most-positive-fixnum fixnum-1+
    [ int64? assert-true ]
    [ most-positive-fixnum fixnum>int64 1 int64-fixnum+ assert= ]
    [ most-positive-fixnum 1 + assert= ]
    tri
;

fixnum-1+-test-1

test: fixnum-1--test-1
    43 fixnum-1- 42 assert-eq
     0 fixnum-1- -1 assert-eq
    -1 fixnum-1- -2 assert-eq

    most-positive-fixnum fixnum-1-
    [ fixnum? assert-true ]
    [ most-positive-fixnum fixnum>int64 1 int64-fixnum- assert= ]
    [ most-positive-fixnum 1 - assert= ]
    tri

    -- overflow
    most-negative-fixnum fixnum-1-
    [ int64? assert-true ]
    [ most-negative-fixnum 1 fixnum-fixnum- assert= ]
    [ most-negative-fixnum 1 - assert= ]
    tri
;

fixnum-1--test-1

test: fixnum-fixnum*-test-1
    fixnum-tag-bits 3 = [
        most-positive-fixnum 1 fixnum-fixnum* 1152921504606846975 assert-eq
        most-positive-fixnum 2 fixnum-fixnum* 2305843009213693950 assert=
        most-positive-fixnum 3 fixnum-fixnum* 3458764513820540925 assert=

        most-positive-fixnum dup fixnum-fixnum* 1329227995784915870597964051066650625 assert=
        most-positive-fixnum dup fixnum-fixnum* most-positive-fixnum 2 expt assert=

        most-negative-fixnum 1 fixnum-fixnum* -1152921504606846976 assert=

        most-positive-fixnum most-negative-fixnum fixnum-fixnum*
        -1329227995784915871750885555673497600 assert=
    ] when
;

fixnum-fixnum*-test-1

test: int64-int64*-test-1
    42 fixnum>int64 dup int64-int64* dup fixnum? assert 1764 assert-eq

    most-positive-fixnum dup fixnum-fixnum* dup *
    most-positive-fixnum 4 expt assert=
;

int64-int64*-test-1

test: fixnum-fixnum/i-test-1
    3  2 fixnum-fixnum/i  1 assert=
    3 -2 fixnum-fixnum/i -1 assert=
    most-positive-fixnum -1 fixnum-fixnum/i most-positive-fixnum negate assert=
    most-negative-fixnum -1 fixnum-fixnum/i most-positive-fixnum 1 + assert=
;

fixnum-fixnum/i-test-1

test: float-float/f-test-1
    15.0 4.0 float-float/f 3.75 assert=
    56323.0 4000.0 float-float/f 14.08075 assert=
    -17.67 7.2 float-float/f -2.454166666666667 assert=
;

float-float/f-test-1

test: float-float<-test-1
    3.0 4.0 float-float< assert-true
    4.0 3.0 float-float< assert-false
    -3.0 -4.0 float-float< assert-false
    -4.0 -3.0 float-float< assert-true
    3.0 3.0 float-float< assert-false
    -3.0 -3.0 float-float< assert-false
;

float-float<-test-1

test: float-float<=-test-1
    3.0 4.0 float-float<= assert-true
    4.0 3.0 float-float<= assert-false
    -3.0 -4.0 float-float<= assert-false
    -4.0 -3.0 float-float<= assert-true
    3.0 3.0 float-float<= assert-true
    -3.0 -3.0 float-float<= assert-true
;

float-float<=-test-1

test: float-float>-test-1
    3.0 4.0 float-float> assert-false
    4.0 3.0 float-float> assert-true
    -3.0 -4.0 float-float> assert-true
    -4.0 -3.0 float-float> assert-false
    3.0 3.0 float-float> assert-false
    -3.0 -3.0 float-float> assert-false
;

float-float>-test-1

test: float-float>=-test-1
    3.0 4.0 float-float>= assert-false
    4.0 3.0 float-float>= assert-true
    -3.0 -4.0 float-float>= assert-true
    -4.0 -3.0 float-float>= assert-false
    3.0 3.0 float-float>= assert-true
    -3.0 -3.0 float-float>= assert-true
;

float-float>=-test-1

test: fixnum-equal?-test-1
    42 42 fixnum-equal? assert-true
    42 dup >float swap fixnum-equal? assert-true
    "test" 42 fixnum-equal? assert-false
;

fixnum-equal?-test-1

test: float-sqrt-test-1
    2.0 float-sqrt 1.4142135623730951 assert=

    fixnum-tag-bits 3 = [
        most-positive-fixnum >float float-sqrt 1073741824.0 assert=
    ] when

    2 53 expt >float float-sqrt 94906265.624251559 assert=
;

float-sqrt-test-1

test: sqrt-test-1
    2 sqrt 1.4142135623730951 assert=

    fixnum-tag-bits 3 = [
        most-positive-fixnum sqrt 1073741824.0 assert=
    ] when

    2 53 expt sqrt 94906265.624251559 assert=
    pi sqrt 1.7724538509055159 assert=
    0 sqrt 0.0 assert=
    [ -1 sqrt ] assert-must-fail
;

sqrt-test-1

test: int32?-test-1
    most-negative-fixnum int32? assert-false
    min-int32 1 - int32? assert-false
    min-int32 int32? assert-true
    min-int32 1 + int32? assert-true
    -1 int32? assert-true
    0 int32? assert-true
    1 int32? assert-true
    max-int32 1 - int32? assert-true
    max-int32 int32? assert-true
    max-int32 1 + int32? assert-false
    most-positive-fixnum int32? assert-false

    pi int32? assert-false
    "test" int32? assert-false
;

int32?-test-1

public

: this-is-a-public-word ;

public: this-is-another-public-word ;

private: this-is-not-a-public-word ;

private

: this-is-a-private-word ;

private: this-is-another-private-word ;

public: this-is-not-a-private-word ;

public

test: visibility-test-1
    ' this-is-a-public-word             [ symbol-private? assert-false ] [ symbol-public? assert-true ]  bi
    ' this-is-another-public-word       [ symbol-private? assert-false ] [ symbol-public? assert-true ]  bi
    ' this-is-not-a-public-word         [ symbol-private? assert-true ]  [ symbol-public? assert-false ] bi
    ' this-is-a-private-word            [ symbol-private? assert-true ]  [ symbol-public? assert-false ] bi
    ' this-is-another-private-word      [ symbol-private? assert-true ]  [ symbol-public? assert-false ] bi
    ' this-is-not-a-private-word        [ symbol-private? assert-false ] [ symbol-public? assert-true ]  bi
;

visibility-test-1

test: generic?-test-1
    ' length generic? assert-true
    ' dup generic? assert-false
;

generic?-test-1

test: vector-remove-test-1
    3 vector{ } vector-remove vector{ } assert=
    3 vector{ 17 } vector-remove vector{ 17 } assert=
    17 vector{ 17 } vector-remove vector{ } assert=
    3 vector{ 3 1 2 3 4 5 3 6 3 } vector-remove vector{ 1 2 4 5 6 } assert=

    vector{ 3 1 2 3 4 5 3 6 3 } >local: v1
    3 v1 vector-remove >local: v2
    v1 vector{ 3 1 2 3 4 5 3 6 3 } assert=
    v2 vector{ 1 2 4 5 6 } assert=
    v1 v2 eq? assert-false
;

vector-remove-test-1

test: vector-remove!-test-1
    3 vector{ } vector-remove! vector{ } assert=
    3 vector{ 17 } vector-remove! vector{ 17 } assert=
    17 vector{ 17 } vector-remove! vector{ } assert=
    3 vector{ 3 1 2 3 4 5 3 6 3 } vector-remove! vector{ 1 2 4 5 6 } assert=

    vector{ 3 1 2 3 4 5 3 6 3 } >local: v1
    3 v1 vector-remove! >local: v2
    v1 vector{ 1 2 4 5 6 } assert=
    v2 vector{ 1 2 4 5 6 } assert=
    v1 v2 assert-eq
;

vector-remove!-test-1

test: vector-adjoin-test-1
    vector{ 1 2 3 4 5 6 } >local: v
    42 v vector-adjoin
    v vector{ 1 2 3 4 5 6 42 } assert=
    4 v vector-adjoin
    v vector{ 1 2 3 5 6 42 4 } assert=
    -- no change if element is already at the end of the sequence
    4 v vector-adjoin
    v vector{ 1 2 3 5 6 42 4 } assert=
;

vector-adjoin-test-1

test: string-nth-test-1
    "this is a test" >local: s
    0 s string-nth 't' assert-eq
    1 s string-nth 'h' assert-eq
    13 s string-nth 't' assert-eq

    [ -1 s string-nth ] assert-must-fail
    [ 14 s string-nth ] assert-must-fail
;

string-nth-test-1

test: type-of-test-1
    "test" type-of string assert-eq
    "test" string>sbuf type-of sbuf assert-eq
    "test" type-of type-of type assert-eq
    42 type-of fixnum assert-eq
    t type-of boolean assert-eq
    f type-of boolean assert-eq
    vector{ 1 2 3 } type-of vector assert-eq
    { 1 2 3 } type-of array assert-eq
    16 <hashtable> type-of hashtable assert-eq
    ' dup type-of symbol assert-eq
    current-vocab type-of vocab assert-eq
    [ dup + ] type-of quotation assert-eq
    ' dup <wrapper> dup wrapper? assert-true
    type-of wrapper assert-eq
    3 [ + ] <curry> dup curry? assert-true
    type-of curry assert-eq
    2 5 { 11 12 13 14 15 16 17 18 } <slice> dup slice? assert-true
    type-of slice assert-eq
    3 5 <range> dup range? assert-true
    type-of range assert-eq
    "this is a test" <lexer> dup lexer? assert-true
    type-of lexer assert-eq
    pi type-of float assert-eq
    "test" <iterator> dup iterator? assert-true
    type-of iterator assert-eq
    ' length symbol-def type-of generic-function assert-eq
    max-uint64 type-of uint64 assert-eq
;

type-of-test-1

test: symbol-equal?-test-1
    ' dup dup symbol-equal? assert-true
    ' drop ' dup symbol-equal? assert-false

    42 ' dup symbol-equal? assert-false
    ' dup 42 symbol-equal? assert-false

    42 42 symbol-equal? assert-false

    -- generic
    ' dup dup equal? assert-true
    ' drop ' dup equal? assert-false
;

symbol-equal?-test-1

test: boolean-equal?-test-1
    t t boolean-equal? assert-true
    f f boolean-equal? assert-true
    t f boolean-equal? assert-false
    f t boolean-equal? assert-false

    0 t boolean-equal? assert-false
    t 0 boolean-equal? assert-false
    0 f boolean-equal? assert-false
    f 0 boolean-equal? assert-false

    1 t boolean-equal? assert-false
    t 1 boolean-equal? assert-false
    1 f boolean-equal? assert-false
    f 1 boolean-equal? assert-false

    -1 t boolean-equal? assert-false
    t -1 boolean-equal? assert-false
    -1 f boolean-equal? assert-false
    f -1 boolean-equal? assert-false

    "test" "test" boolean-equal? assert-false
    "test" 42 boolean-equal? assert-false

    -- generic
    t t equal? assert-true
    f f equal? assert-true
    t f equal? assert-false
    f t equal? assert-false
;

boolean-equal?-test-1

test: boolean?-test-1
    t boolean? assert-true
    f boolean? assert-true
    0 boolean? assert-false
    1 boolean? assert-false
    -1 boolean? assert-false
;

boolean?-test-1

test: callable?-test-1
    ' dup callable? assert-true
    ' callable?-test-1 callable? assert-true

    [ dup ] callable? assert-true

    3 [ + ] <curry> dup curry? assert-true callable? assert-true

    42 callable? assert-false
    "test" callable? assert-false
;

callable?-test-1

test: abs-test-1
      0 abs  0 assert-eq

     42 abs 42 assert-eq
    -42 abs 42 assert-eq

    most-positive-fixnum dup abs assert-eq
    most-positive-fixnum dup negate abs assert-eq

    most-negative-fixnum abs int64? assert
    most-negative-fixnum abs most-negative-fixnum negate assert=

    most-positive-int64 dup abs assert=
    most-positive-int64 dup negate abs assert=

    most-negative-int64 abs float? assert
    most-negative-int64 abs most-positive-int64 assert=

    pi dup abs assert-eq
    pi dup negate abs assert=
;

abs-test-1

test: floor-test-1
    0.0 float-floor 0 assert-eq

    pi float-floor 3 assert-eq
    pi negate float-floor -4 assert-eq

    most-positive-int64 dup int64-int64+ float-floor 1.8446744073709552e+19 assert=
;

floor-test-1

test: float-truncate-test-1
     42.7 float-truncate  42 assert-eq
    -42.7 float-truncate -42 assert-eq

    most-positive-int64 dup int64-int64+ float-truncate 1.8446744073709552e+19 assert=
;

float-truncate-test-1

test: fixnum/f-test-1
    42 4 fixnum/f 10.5 assert=
    42 fixnum>int64 dup int64? assert-true 4 fixnum/f 10.5 assert=
    42.0 4 fixnum/f 10.5 assert=

    fixnum-tag-bits 3 = [
        most-positive-fixnum 1 + 2 fixnum/f  5.7646075230342349e+17 assert=
        most-negative-fixnum     2 fixnum/f -5.7646075230342349e+17 assert=
    ] when
;

fixnum/f-test-1

test: lshift-test-1
    1 1 lshift 2 assert-eq
    1 2 lshift 4 assert-eq

    1 60 lshift-signed 1152921504606846976 2dup assert=
    swap assert=

    1 63 lshift uint64>string "9223372036854775808" assert=

    most-positive-fixnum 1 lshift dup uint64? assert-true
    most-positive-fixnum dup + assert=

    most-positive-fixnum 1 lshift-signed dup int64? assert-true
    most-positive-fixnum dup + assert=
;

lshift-test-1

test: bitnot-test-1
      0 bitnot   -1 assert-eq
     -1 bitnot    0 assert-eq

    123 bitnot -124 assert-eq

    63 [ 1 swap lshift-signed dup bitnot swap negate 1 - assert= ] each-integer
;

bitnot-test-1

test: path-append-test-1
    windows? [
        "foo"   "bar" path-append "foo\\bar" assert=
        "foo\\" "bar" path-append "foo\\bar" assert=
    ] when

    linux? [
        "foo"   "bar" path-append "foo/bar" assert=
        "foo/"  "bar" path-append "foo/bar" assert=
    ] when
;

path-append-test-1

test: canonical-path-test-1
    "." canonical-path string? assert-true

    " " canonical-path assert-false
    "" canonical-path assert-false

    windows? [ "..." canonical-path assert-false ] unless

    "~" canonical-path user-home assert=

    "~/" canonical-path user-home "/" path-append canonical-path assert=
    "~/foo.bar" canonical-path user-home "foo.bar" path-append canonical-path assert=

    windows? [
        "~\\" canonical-path user-home "\\" path-append canonical-path assert=
        "~\\foo.bar" canonical-path user-home "foo.bar" path-append canonical-path assert=
    ] when
;

canonical-path-test-1

test: path-is-absolute?-test-1
    clear

    windows? [
        "" path-is-absolute? assert-false
        "foo" path-is-absolute? assert-false
        "\\foo" path-is-absolute? assert-true
        "foo\\bar" path-is-absolute? assert-false
        "\\foo\\bar" path-is-absolute? assert-true
        "c" path-is-absolute? assert-false
    ] when

    linux? [
        "" path-is-absolute? assert-false
        "foo" path-is-absolute? assert-false
        "/foo" path-is-absolute? assert-true
        "foo/bar" path-is-absolute? assert-false
        "/foo/bar" path-is-absolute? assert-true
    ] when

    depth zero? assert-true
;

path-is-absolute?-test-1

test: path-extension-test-1
    "test.feline" path-extension ".feline" assert=
    "test" path-extension assert-false

    "foo.bar/test.feline" path-extension ".feline" assert=
    "foo.bar/test" path-extension assert-false

    windows? [
        "foo.bar\\test.feline" path-extension ".feline" assert=
        "foo.bar\\test" path-extension assert-false
    ] when
;

path-extension-test-1

test: ensure-feline-extension-test-1
    clear
    "test.feline" ensure-feline-extension "test.feline" assert=
    "test" ensure-feline-extension "test.feline" assert=
;

ensure-feline-extension-test-1

test: 2tri-test-1
    clear
    10 20 [ 1 + ] [ 2 + ] [ 3 + ] 2tri
    get-data-stack { 10 21 10 22 10 23 } assert=
    clear
;

2tri-test-1

test: ?bounds-test-1
    clear

    0 "test" ?bounds get-data-stack { 0 "test" } assert=
    clear
    1 "test" ?bounds get-data-stack { 1 "test" } assert=
    clear
    2 "test" ?bounds get-data-stack { 2 "test" } assert=
    clear
    3 "test" ?bounds get-data-stack { 3 "test" } assert=
    clear

    4 "test" ?bounds get-data-stack { f f } assert=
    clear

    -1 "test" ?bounds get-data-stack { f f } assert=
    clear
    most-negative-fixnum "test" ?bounds get-data-stack { f f } assert=
    clear
    most-positive-fixnum "test" ?bounds get-data-stack { f f } assert=
    clear
;

?bounds-test-1

generic: %method-test-1

method: string %method-test-1
    string-length ;

method: fixnum %method-test-1
    dup + ;

test: method-test-1
    clear
    "testing" %method-test-1 get-data-stack { 7 } assert=
    clear
    87 %method-test-1 get-data-stack { 174 } assert=
    clear
;

method-test-1

tuple: tuple-1 ;
tuple: tuple-2 ;

generic: %method-test-2

method: tuple-1 %method-test-2 drop 42 ;
method: tuple-2 %method-test-2 drop 87 ;

test: method-test-2
    clear
    tuple-1 make-instance %method-test-2 get-data-stack { 42 } assert=
    clear
    tuple-2 make-instance %method-test-2 get-data-stack { 87 } assert=
    clear
;

method-test-2

test: tri-test-1
    clear
    42 [ 1 + ] [ 2 + ] [ 3 + ] tri
    get-data-stack { 43 44 45 } assert=
    clear
;

tri-test-1

test: file-attributes-test-1
    windows? "c:/windows" "/home" ?
    [ file-exists? assert-true ]
    [ directory? assert-true ]
    [ regular-file? assert-false ]
    tri

    feline-home "src/test.feline" path-append
    [ file-exists? assert-true ]
    [ directory? assert-false ]
    [ regular-file? assert-true ]
    tri
;

file-attributes-test-1

test: char>string-test-1
    'a' char>string "'a'" assert=
    '7' char>string "'7'" assert=
    '~' char>string "'~'" assert=

     3 code-char char>string "'\\x03'" assert=
     8 code-char char>string "'\\x08'" assert=  -- \b
     9 code-char char>string "'\\x09'" assert=  -- \t
    10 code-char char>string "'\\x0a'" assert=  -- \n
    13 code-char char>string "'\\x0d'" assert=  -- \r
    32 code-char char>string "'\\x20'" assert=
;

char>string-test-1

test: keyword-test-1
    #:foo [ keyword? assert-true ] [ symbol? assert-false ] bi
    #:foo verify-keyword #:foo assert-eq
    #:foo #:foo assert-eq
    #:foo gc #:foo assert-eq
    { #:foo #:bar } [ first #:foo assert-eq ] [ second #:bar assert-eq ] bi
;

keyword-test-1

test: keyword-name-test-1
    #:foo keyword-name "foo" assert=
    [ ' dup keyword-name ] assert-must-fail
    [ "test" keyword-name ] assert-must-fail
    [ 93 keyword-name ] assert-must-fail
;

keyword-name-test-1

test: reduce-test-1
    { 1 2 3 4 5 } 1 [ * ] reduce 120 assert-eq
    { 1 2 3 4 5 } 0 [ + ] reduce  15 assert-eq

    { 91 47 1000 -3 15 -7.1 0 }
    [ most-positive-fixnum [ min ] reduce -7.1 assert= ]
    [ most-negative-fixnum [ max ] reduce 1000 assert= ]
    bi

    { }    42 [ + ] reduce 42 assert-eq
    { 17 } 42 [ + ] reduce 59 assert-eq
;

reduce-test-1

test: cleave-test-1
    clear
    19 { [ dup + ] [ dup * ] } cleave get-data-stack { 38 361 } assert=
    clear
    14 { [ 23 + ] } cleave get-data-stack { 37 } assert=
    clear
    97 { } cleave get-data-stack { } assert=
    clear
;

cleave-test-1

test: sbuf-append-string-test-1
    "this is a test" string>sbuf >local: sb
    " and this is " sb sbuf-append-string
    "another test" sb sbuf-append-string
    sb "this is a test and this is another test" sequence= assert
;

sbuf-append-string-test-1

test: sbuf-push-test-1
    8 <sbuf> >local: sb
    sb sbuf-capacity 8 assert-eq
    't' sb sbuf-push
    'e' sb sbuf-push
    's' sb sbuf-push
    't' sb sbuf-push
    'i' sb sbuf-push
    'n' sb sbuf-push
    'g' sb sbuf-push
    sb sbuf-capacity 8 assert-eq
    sb sbuf-length 7 assert-eq
    'x' sb sbuf-push
    sb sbuf-capacity 8 assert-eq
    sb sbuf-length 8 assert-eq
    'y' sb sbuf-push
    sb sbuf-capacity 9 >= assert
    sb sbuf-length 9 assert-eq
    sb "testingxy" sequence= assert
;

sbuf-push-test-1

test: thread-test-1
    current-thread thread? assert-true
    sp0 current-thread thread-sp0 assert-eq
;

thread-test-1

?nl "Reached end of test.feline" write-string
