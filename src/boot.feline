// Copyright (C) 2016-2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline ;
in: feline

public

: blank?                                // char -> ?
    "\t\n\r " member? ;

: apropos ( pattern )
    all-words [ symbol-name pattern swap substring-start ] filter
    [
        dup symbol-qualified-name write
        symbol-private? [ 48 tab "private" write ] when
        nl
    ] each ;

: a
    must-parse-token apropos ;

{
    "syntax.feline"
    "declare.feline"
    "control.feline"
    "backtrace.feline"
    "dump.feline"
    "strings.feline"
    "sequences.feline"
    "files.feline"
    "tuple.feline"
    "accept.feline"
    "help.feline"
} [ load-system-file ] each

private

feline-source-directory "disassembler.feline" path-append constant disassembler.feline

global disassembler-file-write-time

: maybe-load-disassembler
    disassembler.feline file-write-time disassembler-file-write-time neq? [
        disassembler.feline [ load ] [ file-write-time disassembler-file-write-time! ] bi
    ] when ;

public

: d
    maybe-load-disassembler
    "disassembler" use-vocab
    "d" "disassembler" vocab-find-name [ call-symbol ] when ;

private

feline-home "feral" path-append "editor.feline" path-append constant editor.feline

: load-editor
    [
        f load-verbose? set
        editor.feline load
    ] with-dynamic-scope ;

feline-home "feral" path-append "editorx.feline" path-append constant editorx.feline

: load-editorx
    [
        f load-verbose? set
        editorx.feline load
    ] with-dynamic-scope ;

: load-inspector
    [
        f load-verbose? set
        "inspector.feline" load-system-file
    ] with-dynamic-scope ;

public

: e
    "editor" delete-vocab
    load-editor
    "editor" use-vocab
    "edit" "editor" vocab-find-name [ call-symbol ] when ;

: x
    "editor" delete-vocab
    load-editorx
    "editor" use-vocab
    "edit" "editor" vocab-find-name [ call-symbol ] when ;

: i
    "inspector" delete-vocab
    load-inspector
    "inspect" "inspector" vocab-find-name [ call-symbol ] when ;

: opt
    "compiler" delete-vocab
    [
        f load-verbose? set
        "compiler.feline" load-system-file
    ] with-dynamic-scope
    "opt" "compiler" vocab-find-name [ call-symbol ] when ;

: run-tests
    [
        t load-verbose? set

        {
            "test.feline"
            "control-test.feline"
            "random-tests.feline"
            "clisp-tests.feline"
            "stress.feline"
        } [ load-system-file nl nl ] each

        .version

    ] with-dynamic-scope ;
