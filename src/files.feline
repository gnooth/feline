// Copyright (C) 2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline ;
in: feline

public

: file-name-as-directory // string -> string'
    dup string-?last path-separator-char? [
        path-separator-char string-append-char
    ] unless ;

// returns filename without its directory component
: file-name-nondirectory ( filename )
    filename length :> len
    len 1- filename [ path-separator-char? ] find-last-from // -> index/nil element/nil
    [ 1+ filename tail ] [ filename nip ] if ;

// Returns the filename's extension, including its leading '.' (".ext"),
// or nil if the filename has no extension.
: file-name-extension // filename -> string/nil
    file-name-nondirectory :> name
    name length :> len

    nil !> index
    {
        { [ len zero? ] [ nil ] }
        { [ name first '.' eq? ] [ nil ] }
        { [ name last '.' eq? ] [ nil ] }
        {
            [ '.' len 1- name string-last-index-from dup index! ]
            [ index name tail ]
        }
        // otherwise...
        [ nil ]
    } cond ;

: file-name-directory-win64 ( filename ) // filename -> dirname/nil
// returns the file name's directory component
    filename length :> len

    {
        [ len 3 eq? ]
        [ 1 filename nth-unsafe ':' eq? ]
        [ 2 filename nth-unsafe path-separator-char? ]
    } &&
    [ nil ] ?return

    [ len 2 eq? ] [ 1 filename nth-unsafe ':' eq? ] both?
    [ nil ] ?return

    nil !> dirname
    len 1- filename [ path-separator-char? ] find-last-from // -> index/nil element/nil
    [
        // -> index
        filename head dirname!
        [ dirname length 2 eq? ] [ 1 dirname nth-unsafe ':' eq? ] both?
        [
            dirname path-separator-char string-append-char dirname!
        ] when
    ] [
        // -> nil
        drop
    ] if

    dirname ;

: file-name-directory-linux ( filename ) // filename -> dirname/nil
    filename length :> len
    len 1- filename [ path-separator-char? ] find-last-from [
        // -> index
        dup zero? [ drop "/" ] [ filename head ] if
    ] when ;

: file-name-directory // filename -> dirname/nil
// returns the file name's directory component
    win64? [ file-name-directory-win64 ] [ file-name-directory-linux ] if ;

: verify-extension // extension filename  -> filename/nil
    tuck
    file-name-extension equal? [ drop nil ] unless ;

win64? #if

: directory-files // string -> sequence/nil
    1 ?enough !> arg

    arg empty? [ nil ] ?return

    // canonical-path calls tilde-expand-filename
    arg canonical-path arg!

    // canonical-path might return nil
    arg null? [ nil ] ?return

    arg directory? [
        arg "*" path-append arg!
    ] [
        arg last path-separator-char? [ arg "*" + arg! ] when
    ] if

    arg file-name-extension :> extension

    arg find-first-file :> p

    p zero? [ nil ] ?return

    64 <vector> :> v

    nil !> filename
    extension [
        p find-file-filename alien->string filename!
        extension filename verify-extension [
            filename v push
        ] when

        [ p find-next-file ] [
            p find-file-filename alien->string filename!
            extension filename verify-extension [
                filename v push
            ] when
        ] while
    ] [
        p find-file-filename alien->string filename!
        filename v push

        [ p find-next-file ] [
            p find-file-filename alien->string filename!
            filename v push
        ] while
    ] if

    p find-close assert-true

    v ;

#endif

linux? #if

: directory-files // string -> sequence/nil
    1 ?enough !> arg
    arg empty? [ nil ] ?return

    arg tilde-expand-filename arg!

    nil !> dir
    arg directory? [
        arg dir!
    ] [
        arg file-name-directory dir!
        dir [ get-current-directory dir! ] unless
    ] if

    arg file-name-extension :> extension
    64 <vector> :> v

    dir opendir :> p

    nil !> entry
    nil !> filename

    [ p readdir dup entry! zero? ] [
        entry alien->string filename!

        extension [
            // We only check that the filename's extension matches the
            // extension of the argument; the argument's base name is
            // ignored.
            extension filename verify-extension [ v push ] when*
        ] [
            filename v push
        ] if
    ] until

    p closedir

    // REVIEW closedir returns 0 on success
    drop

    v ;

#endif
