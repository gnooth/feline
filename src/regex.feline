// Copyright (C) 2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline ;
in: regex

empty

public

// Parsing
var regex

: escape ( iter )                       // string-iterator -> char
    iter string-iterator-peek [
        iter string-iterator-next // -> char
        {
            { 't' [ '\t' ] }
            { 'n' [ '\n' ] }
            [ ]
        } case
    ] [
        '\'
    ] if ;

: parse-character-class                 // string-iterator -> void
    1 ?enough :> iter

    32 make-sbuf :> buf

    local negate?
    local done?
    local char
    local char1
    local char2

    iter string-iterator-peek '^' eq? [
        true negate?!
        1 iter string-iterator-skip
    ] when

    [
        iter string-iterator-peek
        done? not and
    ] [
        iter string-iterator-next char!
        char
        {
            { ']' [ true done?! ] }
            {
                '-'
                [
                    [ iter string-iterator-index 1- iter nth dup char1! alphanumeric? ]
                    [ iter string-iterator-peek dup char2! alphanumeric? ]
                    both? [
                        // at this point char1 has already been added to buf
                        char1 char!
                        [
                            char char-code 1+ code-char char!
                            char dup char2 neq? and
                        ] [
                            char buf push
                        ] while
                    ] [
                        char buf push
                    ] if
                ]
            }
            { '\' [ iter escape buf push ] }
            [ buf push ]
        } case
    ] while

    negate? :nccl :ccl ?
    buf sbuf->string
    2array regex push ;

: parse-regex                           // string -> void
    1 ?enough make-string-iterator :> iter
    16 make-vector regex!
    local char

    [ iter string-iterator-next dup char! ]
    [
        char
        {
            { '.' [ :any regex push ] }
            { '^' [ iter string-iterator-index 0? [ :bol regex push ] when ] }
            { '$' [ iter string-iterator-peek '$' :eol ? regex push ] }
            {
                '?'
                [
                    iter string-iterator-index 0> [
                        :question regex last 2array
                        regex length 1- regex set-nth
                    ] when
                ]
            }
            {
                '*'
                [
                    iter string-iterator-index 0> [
                        :star regex last 2array
                        regex length 1- regex set-nth
                    ] when
                ]
            }
            {
                '+'
                [
                    iter string-iterator-index 0> [
                        :plus regex last 2array
                        regex length 1- regex set-nth
                    ] when
                ]
            }
            { '[' [ iter parse-character-class ] }
            { '\' [ iter escape regex push ] }
            [ regex push ]
        } case
    ] while ;

var text

: op-first ( op )                       // op -> sub/nil
    op array? [ first ] [ nil ] if* ;

: op-literal ( op )                     // op -? char/nil
    op char? ;

defer match-here

: greedy-match-star                     // op text-index regex-index -> index/nil

    !> regex-index !> text-index :> op

    0 !> n                              // number of chars matched

    [
        [ text-index text length < ]
        [ [ op :any eq? ] [ op op-literal text-index text nth eq? ] either? ]
        both?
    ] [
        text-index 1+ text-index!
        n 1+ n!
    ] while

    local result

    text-index regex-index match-here result!
    result [ result ] ?return

    // must backtrack
    n 1- n!
    text-index 1- text-index!

    [
        [ n 0> ]
        [ [ op :any eq? ] [ op op-literal text-index text nth eq? ] either? ]
        both?
    ] [
        text-index 1- text-index!
        n 1- n!
        text-index regex-index match-here [
            result!
            0 n!                        // force termination
        ] when*
    ] while

    result ;

: lazy-match-star                       // op text-index regex-index -> index/nil
    !> regex-index !> text-index :> op

    local result

    text-index regex-index match-here result!
    result [ result ] ?return

    [
        [ text-index text length < ]
        [ [ op :any eq? ] [ op op-literal text-index text nth eq? ] either? ]
        both?
    ] [
        text-index 1+ text-index!
        text-index regex-index match-here [
            result!
            text length text-index!     // force termination
        ] when*
    ] while

    result ;

: match-star greedy-match-star ;

: match-plus
    !> regex-index !> text-index :> op

    0 !> n                              // number of chars matched

    [
        [ text-index text length < ]
        [ [ op :any eq? ] [ op op-literal text-index text nth eq? ] either? ]
        both?
    ] [
        text-index 1+ text-index!
        n 1+ n!
    ] while

    n 1 < [ nil ] ?return

    local result

    text-index regex-index match-here result!
    result [ result ] ?return

    // must backtrack
    n 1- n!
    text-index 1- text-index!

    [
        [ n 1 > ]
        [ [ op :any eq? ] [ op op-literal text-index text nth eq? ] either? ]
        both?
    ] [
        text-index 1- text-index!
        n 1- n!
        text-index regex-index match-here [
            result!
            0 n!                        // force termination
        ] when*
    ] while

    result ;

: %match-here ( text-index regex-index ) // text-index regex-index -> index/nil
    regex length :> regex-length
    regex-index regex-length eq? [ text-index ] ?return
    regex-index regex nth :> op

    op op-first :question eq? [
        {
            {
                [ text-index text length eq? ]
                [ text-index ]
            }
            {
                [ op second text-index text nth eq? ]
                [ text-index 1+ regex-index 1+ match-here ]
            }
            [ text-index regex-index 1+ match-here ]
        } cond
    ] ?return

    op op-first :star eq? [
        op second
        text-index regex-index 1+ match-star
    ] ?return

    op op-first :plus eq? [
        op second
        text-index regex-index 1+ match-plus
    ] ?return

    op :bol eq? [
        text-index 0? [ text-index regex-index 1+ match-here ] [ nil ] if
    ] ?return

    op :eol eq? regex-index 1+ regex-length eq? and [
        text-index text length eq? [ text-index ] [ nil ] if
    ] ?return

    text-index text length eq? [ nil ] ?return

    op :any eq?
    op op-literal text-index text nth eq?
    or
    [ text-index 1+ regex-index 1+ match-here ] ?return

    [ op op-first :ccl eq? ]
    [ text-index text nth op second member-eq? ] both?
    [ text-index 1+ regex-index 1+ match-here ] ?return

    [ op op-first :nccl eq? ]
    [ text-index text nth op second member-eq? not ] both?
    [ text-index 1+ regex-index 1+ match-here ] ?return

    nil ;

' %match-here is match-here

: find-regex-from                       // pattern string start -> index1/nil index2/nil
    3 ?enough
    verify-index !> index1

    text!

    parse-regex
    regex empty? [ nil nil ] ?return

    text length :> text-length

    nil !> index2

    [
        index1 text-length <
        index2 nil? and
    ] [
        index1 0 match-here index2!
        index2 [ index1 1+ index1! ] unless
    ] do while

    index2 [ index1 index2 ] [ nil nil ] if ;

: find-last-regex-from                  // pattern string start -> index1/nil index2/nil
    3 ?enough
    verify-index 1- !> index1

    index1 0 < [ 2drop nil nil ] ?return

    text!
    text empty? [ drop nil ] ?return

    parse-regex
    regex empty? [ nil nil ] ?return

    local index2
    [
        index1 0 >=
        index2 nil? and
    ] [
        index1 0 match-here index2!
        index2 [ index1 1- index1! ] unless
    ] while
    index2 [ index1 index2 ] [ nil nil ] if ;

: find-regex                            // pattern string -> index1/nil index2/nil
    0 find-regex-from ;

: find-last-regex                       // pattern string -> index1/nil index2/nil
    dup length find-last-regex-from ;

: matches?                              // text pattern -> ?
    parse-regex
    text!
    0 0 match-here as-boolean ;

// Testing
: test1 ( text pattern expected )       // text pattern expected -> void
    ?nl text pattern "%S %S -> " format write
    text pattern matches? dup .
    expected assert-eq ;

: test2 ( pattern text expected1 expected2 ) // pattern text expected -> void
    ?nl pattern text "%S %S -> " format write
    pattern text find-regex 2dup [ object->string ] bi@ "%s %s" format print
    expected2 assert-eq expected1 assert-eq ;

: tests
    "a" "a" true test1
    "b" "a" nil test1
    "ab" "ab" true test1
    "ab" "a." true test1
    "ab" ".b" true test1
    "fooooobar" "f.*bar" true test1
    "a" "[ab]" true test1
    "b" "[ab]" true test1
    "c" "[ab]" nil test1
    "d" "[a-z]" true test1

    "[^a]" "ab" 1 2 test2
    "[^ab]" "abcd" 2 3 test2
    "[ab]" "dcba" 2 3 test2

    "text.*x" "no text index here" 3 13 test2

    // basic.dat
    "abracadabra$" "abracadabracadabra" 7 18 test2
    "a...b" "abababbb" 2 7 test2
    "XXXXXX" "..XXXXXX" 2 8 test2 ;
