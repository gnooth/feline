// Copyright (C) 2018-2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline ;
in: unit-test

empty

private

var location
var expected
var quot
var got
var saved

: do-unit-test                          // sequence quotation location -> void
    location! quot! expected!
    get-datastack saved!
    quot call
    get-datastack got!
    saved set-datastack
    expected got sequence= [
        location set-error-location
        expected got "ERROR: expected %s, got %s." format error
    ] unless ;

public

syntax: unit-test
    in-definition? get [
        current-lexer-location accum-push
        ' do-unit-test accum-push
    ] [
        current-lexer-location do-unit-test
    ] if ;

using: feline ;
in: feline

global run-tests-when-defined?

syntax: test:
    parse-name :> sym
    make-quotation current-quotation!
    parse-definition :> vec
    ' ?nl 0 vec vector-insert-nth
    sym symbol-name 1 vec vector-insert-nth
    ' write-string 2 vec vector-insert-nth
    vec vector->array current-quotation quotation-set-array
    current-quotation sym symbol-set-def
    locals-count sym symbol-set-locals-count
    nil current-quotation!
    sym compile-word
    run-tests-when-defined? [ sym call-symbol ] when ;
