// Copyright (C) 2018-2019 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline ;
in: inspector

empty

global inspected-object

: make-typed-slot                       -- arg index -> slot
    :> index
    :> arg
    arg string? [
        arg index make-slot
    ] [
        arg array? assert
        arg first arg second index
        make-slot/3
    ] if
;

: builtin-type-set-layout               -- slots type -> void
    [ [ 1+ make-typed-slot ] map-index ] dip type-set-layout
;

{
    "symbol"
    { "raw-typecode" :raw }
    "layout"
} type builtin-type-set-layout

{
    { "raw-code-address" :raw }
    { "raw-code-size" :raw }
    "symbol"
    "methods"
    "dispatch"
} generic-function builtin-type-set-layout

{
    { "raw typecode" :raw }
    "generic function"
    "callable"
} method builtin-type-set-layout

{
    "array"
    { "raw-code-address" :raw }
    { "raw-code-size" :raw }
} quotation builtin-type-set-layout

{
    { "count" :raw }
    { "deleted" :raw }
    { "capacity" :raw }
    { "data address" :raw }
    { "hash function" :raw }
    { "test function" :raw }
    { "raw mask" :raw }
} hashtable builtin-type-set-layout

{ "name" "hashtable" } vocab builtin-type-set-layout

: print-slot ( object n )               -- object n -> void
    object object-layout :> layout
    n layout nth :> slot
    4 tab
    n 1+ 2 dec.r
    8 tab
    slot slot-name write
    32 tab
    object n 1+ slot@
    slot slot-type :raw eq? [ normalize ] when
    short.
;

: inspect
    1 ?enough
    dup inspected-object!
    inspected-object type-of type-name print
    inspected-object object-layout :> layout
    layout [
        layout length dup "%d slots" format print
        [ inspected-object swap print-slot ] each-integer
    ] when
;
