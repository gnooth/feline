// Copyright (C) 2016 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

LANGUAGE: feline

USING: feline ;
IN: feline

: display-help ( content -- )
    nl 4 [ bl ] times first write
;

: help ( symbol -- )
    dup symbol-help dup                 // -- symbol content/f content/f
    [ ?nl swap symbol-name write display-help ]
    [ 2drop ]
    if
;

HELP: drop
    "( x -- )
    Remove x from the stack."
;

HELP: dup
    "( x -- x x )
    Duplicate x." ;

HELP: dupd
    "( x y -- x x y)
    Duplicate the second stack item."
;

HELP: filter
    "( seq quot -- subseq )     quot: ( ... elt -- ... ? )
    Returns a new sequence containing the elements of the original
    sequence for which the quotation returns a true value."
;

HELP: find
    "( seq quot -- i elt )      quot: ( ... elt -- ... ? )
    Applies quot to each element of seq in order. If the quotation
    returns a true value for some element, find returns the index of
    that element and the element itself. Otherwise find returns f for
    both the index and the element."
;

HELP: map
    "( seq quot -- newseq )     quot: ( ... elt -- ... newelt )
    Applies quot to each element of seq in order. The results are
    collected in a new sequence of the same type as seq."
;

HELP: member?
    "( obj seq -- ? )
    Returns true if seq contains an element equal to obj."
;

HELP: 2nip
    "( x y z -- z )
    Remove x and y from the stack."
;

HELP: over
    "( x y -- x y x )
    Place a copy of x on top of the stack."
;

HELP: rot
    "( x y z -- z y x )
    Rotate the top three stack entries."
;

HELP: swap
    "( x y -- y x )
    Exchange the top two stack items."
;

HELP: swapd
    "( x y z -- y z x )
    Exchange the second and third stack items."
;

HELP: times
    "( n quot -- )    quot: ( ... -- ... )
    Calls quot n times."
;
