-- Copyright (C) 2016-2017 Peter Graves <gnooth@gmail.com>

-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.

-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline ;
in: help

empty

private

   96 >constant: backquote

white >constant: fg-title
 cyan >constant: fg-parameter
white >constant: fg-default

: bold   ( -- ) color? [ esc[ "1m" write-string ] when ;
: normal ( -- ) color? [ esc[ "0m" write-string ] when ;

: format-string ( string -- )
    >local: s
    color? [
        f >local: in-quote?
        backquote s index >local: i
        [ i ] [
            s i string-head write-string
            1+!> i
            s i string-tail !> s
            in-quote? not !> in-quote?
            in-quote? fg-parameter fg-default ? foreground
            backquote s index !> i
        ] while
    ] when
    s write-string ;

: format-title ( string -- )
    bold
    fg-title foreground
    write-string
    normal
    fg-default foreground ;

: format-help ( symbol content -- )
    ?nl swap symbol-name format-title
    nl 4 spaces first format-string ;

public

: help ( symbol -- )
    symbol-name >local: name

    "feline.help" file-lines >local: glossary

    glossary [ name swap string-has-prefix? ] find    -- index/f element/f

    >local: line
    >local: i

    local: v

    line [
        8 <vector> !> v
        [
            i 1 + !> i
            i glossary length >=
        ] [
            i glossary vector-nth ( string )
            dup "    " over string-has-prefix? swap empty? or [
                v vector-push
            ] [
                drop glossary length !> i
            ] if
        ] until
    ] when

    v empty? [
        v vector-last empty? [ v vector-pop* ] when
    ] unless

    name help:format-title nl

    256 <sbuf> >local: sb
    v [ sb sbuf-append-string 10 sb sbuf-push ] each
    sb sbuf>string help:format-string

    f !> glossary
    gc
;

using: feline help ;
in: feline

: h ( -- )
    parse-token [ find-name [ help ] [ drop ] if ] when* ;
