// Copyright (C) 2016-2019 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline ;
in: help

empty

private

96 code-char constant backquote

white constant fg-title
cyan  constant fg-parameter
white constant fg-default

: bold   color? [ esc[ "1m" write-string ] when ;
: normal color? [ esc[ "0m" write-string ] when ;

: format-string                         // string ->
    :> s!
    f :> in-quote?!
    f :> i!
    color? [
        backquote s index i!
        [
            i
        ] [
            i s string-head write-string
            i 1+ i!
            i s string-tail s!
            in-quote? not in-quote?!
            in-quote? fg-parameter fg-default ? foreground
            backquote s index i!
        ] while
    ] when
    s write-string ;

: format-title                          // string ->
    bold
    fg-title foreground
    write-string
    normal
    fg-default foreground ;

feline-source-directory "feline.help" path-append constant feline.help

var glossary
var glossary-file-write-time

: maybe-load-glossary
    feline.help file-write-time glossary-file-write-time eq? [
        ?nl "Loading glossary" print
        feline.help [ file-lines glossary! ] [ file-write-time glossary-file-write-time! ] bi
    ] unless ;

public

: symbol-help                           // symbol -> string/f
    symbol-name :> name

    maybe-load-glossary

    glossary [ name swap string-has-prefix? ] find      // index/f element/f

    :> line
    :> line-number!

    f :> v!
    f :> sb!
    f :> help-string!

    line [
        8 <vector> v!
        [
            line-number 1+ line-number!
            line-number glossary vector-length >=
        ] [
            line-number glossary vector-nth
            dup "    " over string-has-prefix? swap empty? or [
                v vector-push
            ] [
                drop glossary vector-length line-number!
            ] if
        ] until

        v empty? [
            v vector-last empty? [ v vector-pop* ] when
        ] unless

        256 <sbuf> sb!
        v [ sb sbuf-append-string 10 code-char sb sbuf-push ] each
        sb sbuf>string help-string!
    ] when

    help-string
;

: help                                  // symbol ->
    dup symbol-name :> name
    symbol-help [
        name format-title nl
        format-string
    ] when*
;

using: feline help ;
in: feline

: help help:help ;

: h
    parse-token [ find-name [ help:help ] [ drop ] if ] when* ;
