// Copyright (C) 2016 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

LANGUAGE: feline

USING: feline ;
IN: feline

: display-help ( content -- )
    nl 4 [ bl ] times first write
;

: help ( symbol -- )
    dup symbol-help dup                 // -- symbol content/f content/f
    [ ?nl swap symbol-name write display-help ]
    [ 2drop ]
    if
;

HELP: 2dip
    "( x y quot -- x y )
    Remove x and y from the stack, call quot, and restore x and y
    to the top of the stack when quot returns."
;

HELP: 2nip
    "( x y z -- z )
    Remove x and y from the stack."
;

HELP: <vector>
    "( n -- vector )
    Create a new vector with an initial capacity of n elements."
;

HELP: bi
    "( x quot1 quot2 -- )
    Apply quot1 to x, then apply quot2 to x."
;

HELP: dip
    "( x quot -- x )
    Remove x from the stack, call quot, and restore x to the top
    of the stack when quot returns."
;

HELP: drop
    "( x -- )
    Remove x from the stack."
;

HELP: dup
    "( x -- x x )
    Duplicate x." ;

HELP: dupd
    "( x y -- x x y)
    Duplicate the second item on the stack."
;

HELP: each
    "( seq quot -- )            quot: ( ... elt -- ... )
    Apply quot to each element of seq in order."
;

HELP: each-index
    "( seq quot -- )            quot: ( ... elt index -- ... )
    Call quot for each element of seq with both the element and its
    index on the stack."
;

HELP: filter
    "( seq quot -- subseq )     quot: ( ... elt -- ... ? )
    Return a new sequence containing the elements of the original
    sequence for which the quotation returns a true value."
;

HELP: find
    "( seq quot -- i elt )      quot: ( ... elt -- ... ? )
    Apply quot to each element of seq in order. If the quotation
    returns a true value for some element, return the index of that
    element and the element itself. Otherwise return f for both the
    index and the element."
;

HELP: in-bounds?
    "( n seq -- ? )
    Return t if n is within the bounds of seq."
;

HELP: map
    "( seq quot -- newseq )     quot: ( ... elt -- ... newelt )
    Apply quot to each element of seq in order. Collect the results
    in a new sequence of the same type as seq."
;

HELP: map-index
    "( seq quot -- newseq )     quot: ( ... elt index -- ...newelt )
    Call quot for each element of seq with both the element and its
    index on the stack. Collect the results in a new sequence of the
    the same type as seq."
;

HELP: member?
    "( obj seq -- ? )
    Return t if seq contains an element equal to obj."
;

HELP: over
    "( x y -- x y x )
    Place a copy of x on top of the stack."
;

HELP: rot
    "( x y z -- z y x )
    Rotate the top three stack entries."
;

HELP: swap
    "( x y -- y x )
    Exchange the top two stack items."
;

HELP: swapd
    "( x y z -- y z x )
    Exchange the second and third stack items."
;

HELP: times
    "( n quot -- )    quot: ( ... -- ... )
    Call quot n times."
;
