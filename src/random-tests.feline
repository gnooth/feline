-- Copyright (C) 2017 Peter Graves <gnooth@gmail.com>

-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.

-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline ;
in: user

"random-tests" delete-vocab

in: random-tests

: t/f? ( -- ? ) random 1 bitand zero? ;

: random-sign ( -- +1/-1 ) t/f? 1 -1 ? ;

: random-bignum ( -- bignum )
    random t/f? [ most-positive-fixnum + ] [ most-negative-fixnum - ] if ;

: random-fixnum ( -- fixnum )
    random t/f? [ negate ] when ;

: random-integer ( -- integer )
    t/f? ' random-bignum ' random-fixnum if ;

: random-float ( -- float)
    random-integer >float ;

test: test-1
    10 [ random-bignum bignum? assert-true ] times ;

test-1

global: x
global: y

global: verbose?

: ?echo
    verbose? [ ?nl 2 tab x . space y . nl ] when ;

1000 >global: #reps

: %test-2
    random-integer !> x
    random-integer !> y
    ?echo
    x y + y x + assert= ;

test: test-2
    #reps ' %test-2 times ;

test-2

: %test-3
    random-integer !> x
    random-integer !> y
    ?echo
    x y - y x - negate assert=
    x y - y + x assert= ;

test: test-3
    #reps ' %test-3 times ;

test-3

: %test-4
    random-integer !> x
    random-integer !> y
    ?echo
    x y < [
        x y >= assert-false
        y x < assert-false
        y x > assert-true
        y x <= assert-false
        y negate x negate < assert-true
        x y - 0 < assert-true
    ] when ;

test: test-4
    #reps ' %test-4 times ;

test-4

: %test-5
    random-integer !> x
    random-integer !> y
    ?echo
    x y <= [
        x y > assert-false
        y x >= assert-true
        y negate x negate <= assert-true
        x y - 0 <= assert-true
    ] when ;

test: test-5
    #reps ' %test-5 times ;

test-5

: %test-6
    random-fixnum !> x
    random-fixnum !> y
    ?echo
    x y fixnum-fixnum* y x fixnum-fixnum* assert=
    x fixnum>bignum y fixnum>bignum 2dup bignum-bignum*
    -rot bignum-bignum* assert= ;

test: test-6
    #reps ' %test-6 times ;

test-6

: %test-7
    random-integer !> x
    random-float !> y
    ?echo
    x y + y x + assert=
    x y - y x - negate assert=
    x y - negate y x - assert=
;

test: test-7
    #reps ' %test-7 times ;

test-7

: %test-8
    random-integer !> x
    random-float !> y
    ?echo
    x y * y x * assert=
    x negate y * y negate x * assert=
    x y negate * x y * negate assert=
;

test: test-8
    #reps ' %test-8 times ;

test-8

: %test-9
    random-integer !> x
    random-integer !> y
    ?echo
    x y /i y * x y mod + x assert=
    x y /i y * x y mod + x assert=
;

test: test-9
    #reps ' %test-9 times ;

test-9

f !> x
f !> y

?nl "Reached end of random-tests.feline" write-string
