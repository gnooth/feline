// Copyright (C) 2016 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

require-system-file test-framework

LANGUAGE: feline

CONTEXT: feline forth ;
CURRENT: feline

test: test1 ( -- )
    100000 local #reps
    10 <vector> local v
    v vector? check-t
    #reps 0 do
        i v vector-push
    loop
    v vector-length #reps = check-t
    #reps 0 do
        i v vector-nth i = check-t
    loop
    v ~vector
    v vector? check-false
;

test1

test: test2 ( -- )
    10000 local #reps
    10 <vector> local v
    v vector? check-t
    #reps 0 ?do
        i v vector-push
    loop
    v vector-length #reps = check-t
    #reps 0 ?do
        i v vector-nth i = check-t
    loop
    #reps 0 ?do
        0 v vector-nth i = check-t
        0 v vector-remove-nth!
    loop
    v vector-length 0 = check-t
    v ~vector
    v vector? check-false
;

test2

test: test3 ( -- )
    10000 local #reps
    10 <vector> local v
    v vector? check-t
    #reps 0 do
        i v vector-push
    loop
    v vector-length #reps = check-t
    #reps 0 do
        v vector-length #reps i - = check-t
        0 v vector-nth i = check-t
        0 v vector-remove-nth!
    loop
    v ~vector
    v vector? check-false
;

test3

test: test4
    10000 local #reps
    10 <vector> local v
    v vector? check-t
    #reps 0 do
        i v vector-push
    loop
    v vector-length #reps = check-t
    #reps 0 do
        v vector-length #reps i - = check-t
        v vector-length 1 - v vector-pop = check-t
    loop
    v ~vector
    v vector? check-false
;

test4

test: test5 ( -- )
    10 <vector> local v
    42 v vector-push
    v vector-length 1 = check-t
    0 v vector-nth 42 = check-t
    v ~vector
    v vector? check-false
;

test5

test: test6 ( -- )
    10 <vector> local v
    v vector-length zero? check-t
    13 v vector-push
    v vector-length 1 = check-t
    42 0 v vector-set-nth
    v vector-length 1 = check-t
    0 v vector-nth 42 = check-t
    v ~vector
    v vector? check-false
;

test6

0 global v

test: test7 ( -- )
    10 <vector> !> v
    "foo" v vector-push
    "bar" v vector-push
    "baz" v vector-push

    "foo" v vector-find-string          // -- index flag
    check-t
    0 = check-t

    "baz" v vector-find-string
    check-t
    2 = check-t

    "gazonk" v vector-find-string
    check-false
    check-false

    42 v vector-find-string
    check-false
    check-false
;

test7

// each-integer vector-each-index vector-set-length
test: test8 ( -- )
    10 <vector> !> v
    v vector-length 0 = check-t
    // element is index+1
    16 [ 1 + v vector-push ] each-integer
    v vector-length 16 = check-t
    v V{ 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 } vector-equal? check-t
    v [ ( element index -- ) 1 + = check-t ] vector-each-index
    9 v vector-set-length
    v vector-length 9 = check-t
    v [ ( element index -- ) 1 + = check-t ] vector-each-index
    25 v vector-set-length
    v vector-length 25 = check-t
    9 0 do
        i v vector-nth i 1 + = check-t
    loop
    25 10 do
        i v vector-nth f = check-t
    loop
    0 v vector-set-length
    v vector-length 0 = check-t
    42 v vector-push
    87 v vector-push
    19 v vector-push
    v vector-length 3 = check-t
    0 v vector-nth 42 = check-t
    1 v vector-nth 87 = check-t
    2 v vector-nth 19 = check-t
    0 !> v
;

test8

test: test9
    10 <vector> !> v
    42 0 v vector-set-nth
    v vector-length 1 = check-t
    0 v vector-nth 42 = check-t
    87 12 v vector-set-nth
    v vector-length 13 = check-t
    12 v vector-nth 87 = check-t
;

test9

// V{ vector-equal?
test: test10
    V{ } !> v
    v vector? t = check-t
    v vector-length 0 = check-t
    V{ 1 2 3 } !> v
    v vector? t = check-t
    v vector-length 3 = check-t
    0 v vector-nth 1 = check-t
    1 v vector-nth 2 = check-t
    2 v vector-nth 3 = check-t
    v V{ 1 2 3 } vector-equal? t = check-t
    V{ 1 2 3 } v vector-equal? t = check-t
    f !> v
;

test10

test: test11
    V{ } vector-clone
    V{ } vector-equal? t = check-t
    V{ 1 2 3 } vector-clone
    V{ 1 2 3 } vector-equal? t = check-t
;

test11

// vector>array
test: test12
    V{ 1 2 3 } vector>array local a
    a array? check-t
    a array-length 3 = check-t
    0 a array-nth 1 = check-t
    1 a array-nth 2 = check-t
    2 a array-nth 3 = check-t
;

test12

// 2nth-unsafe
test: test13
    V{  1  2  3 } local x
    V{ 17 18 19 } local y
    0 x y 2nth-unsafe 17 = check-t 1 = check-t
    1 x y 2nth-unsafe 18 = check-t 2 = check-t
    2 x y 2nth-unsafe 19 = check-t 3 = check-t
;

test13

empty

?cr .( Reached end of vector-tests )
