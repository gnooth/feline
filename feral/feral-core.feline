// Copyright (C) 2017-2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline accessors feral-config ;
in: feral-core

defer message
defer clear-message

defer add-recent-file

global execute-command-input-string

: shell-command-to-string ( command )   // command -> string/nil
    local result
    directories:get-temporary-filename :> tempfile
    command " > " + tempfile + " 2>&1 " + run-shell-command // should return fixnum 0
    0? [
        tempfile safe-file-contents result!
    ] when
    tempfile delete-file
    // delete-file returns true if it succeeds
    drop
    result ;

tuple: line
    prev
    next
    number                              // 0-based line number
    text
    state
    properties ;

: make-line/1                           // string -> line
    verify-string
    line make-instance
    :neutral >>state
    tuck
    text<< ;

: make-line/2                           // string line-number -> line
    line make-instance
    :neutral >>state
    swap verify-fixnum >>number
    swap verify-string >>text ;

: line-get-property ( keyword line )    // keyword line -> value
    line properties>> [ keyword swap at ] [ nil ] if* ;

: line-set-property ( value keyword line ) // value keyword line -> void
    line properties>> [
        2 <hashtable> line properties<<
    ] unless
    value keyword line properties>> set-at ;

method: line length                     // line -> length
    text>> string-length ;

method: line substring                  // from to line -> substring
    text>> string-substring ;

generic indentation-length

method: string indentation-length       // string -> index
    [ whitespace? not ] find [ drop 0 ] unless ;

method: line indentation-length         // line -> index
    text>> indentation-length ;

generic indentation-string

method: string indentation-string       // string -> string'
    [ indentation-length ] keep head ;

method: line indentation-string         // line -> string
    text>> indentation-string ;

: line-before? ( line1 line2 )          // line1 line2 -> ?
    line1 number>> line2 number>> <
;

tuple: position
    line
    offset ;

: make-position                         // line offset -> position
    position make-instance :> pos
    pos offset<<
    pos line<<
    pos ;

: copy-position ( pos )                 // position -> copy
    pos line>> pos offset>> make-position ;

: position-equal? ( pos1 pos2 )
    [ pos1 line>> pos2 line>> eq? ]
    [ pos1 offset>> pos2 offset>> eq? ]
    both? ;

method: position equal? position-equal? ;

: position-before? ( pos1 pos2 )        // pos1 pos2 -> ?
    pos1 line>> :> line1
    pos2 line>> :> line2
    {
        { [ line1 number>> line2 number>> < ] [ true ] }
        { [ line1 line2 eq? ] [ pos1 offset>> pos2 offset>> < ] }
        // default
        [ nil ]
    } cond ;

generic before?

method: line before? line-before? ;

method: position before? position-before? ;

: move-next                             // position -> position/nil
    !> pos
    pos offset>> :> offset
    pos line>> :> line
    {
        { [ offset line length < ] [ offset 1+ pos offset<< ] }
        {
            [ line next>> ]
            [
                line next>> pos line<< 0
                pos offset<<
            ]
        }
        [ nil pos! ]
    } cond
    pos ;

: move-prev                             // position -> position/nil
    !> pos
    pos offset>> :> offset
    pos line>> :> line
    {
        { [ offset 0> ] [ offset 1- pos offset<< ] }
        {
            [ line prev>> ]
            [
                line prev>> pos line<<
                pos line>> length pos offset<<
            ]
        }
        [ nil pos! ]
    } cond
    pos ;

tuple: region
    begin
    end ;

: make-region/2 ( pos1 pos2 )           // pos1 pos2 -> region
    region make-instance :> region
    pos1 pos2 before? [ pos1 pos2 ] [ pos2 pos1 ] if
    [ copy-position ] bi@
    region [ end<< ] [ begin<< ] bi
    region
;

: in-region? ( pos region )             // pos region -> ?
    pos region begin>> before? [
        nil
    ] [
        pos region end>> before?
    ] if ;

generic begin

method: region begin                    // region -> position
    begin>> ;

generic begin-line

method: region begin-line               // region -> line
    begin>> line>> ;

generic begin-offset

method: region begin-offset             // region -> offset
    begin>> offset>> ;

generic end

method: region end                      // region -> position
    end>> ;

generic end-line

method: region end-line                 // region -> line
    end>> line>> ;

generic end-offset

method: region end-offset               // region -> offset
    end>> offset>> ;

tuple: region-iterator
    current
    end ;

: make-region-iterator                  // region -> iterator
    region-iterator make-instance
    swap [ begin-line ] [ end-line ] bi
    [ >>current ] dip
    >>end                               // -> iterator
;

: region-iterator-next                  // iterator -> line/nil

    dup current>> null? [ drop nil ] ?return

    [ current>> ] keep                  // -> current iterator

    dup
    [ current>> ] [ end>> ] bi eq?      // -> current iterator ?

    [ nil ] [
        dup current>> [ next>> ] when*
    ] if

    swap current<<
;

: region-each-line                      // region callable ->
    swap

    dup end>> offset>> zero? [
        // region ends at offset 0 of its last line
        // don't include this line
        [ begin>> ] [ end>> ] bi        // -> callable begin end
        line>> prev>> 0 make-position   // -> callable begin end'
        make-region/2                   // -> callable region'
    ] when

    make-region-iterator                // -> callable iterator
    [
        // -> callable iterator
        dup region-iterator-next dup
    ] [
        // -> callable iterator line
        pick call
    ] while
    // -> callable iterator nil
    3drop ;

: region-as-string ( region )
    region [ begin-line ] [ end-line ] bi eq? [
        region [ begin-offset ] [ end-offset ] [ begin-line ] tri substring
    ] ?return

    1024 <sbuf> :> sb

    region [ begin-offset ] [ begin-line length ] [ begin-line ] tri substring
    sb sbuf-append-string
    '\n' sb sbuf-push

    region begin-line next>> !> line
    region end-line :> region-end-line

    [ line region-end-line neq? ] [
        line text>> sb sbuf-append-string
        '\n' sb sbuf-push
        line next>> line!
    ] while

    region end-offset 0 > [
        0 region end-offset region-end-line text>> substring
        sb sbuf-append-string
    ] when

    sb sbuf>string
;

global transient-map

global current-context

tuple: buffer
    name
    mode
    parent
    local-map
    read-only
    dot
    mark
    anchor
    goal-column
    filename
    directory
    autosave-filename
    mod-count
    mod-count-last-save
    eol
    undo-stack
    redo-stack
    first-line
    last-line
    top-line
    indent-size
    tab-width
    command
    needs-scan
    identifier-char-function
    properties ;

"\n"   constant LF
"\r\n" constant CR+LF

: make-buffer                           // -> buffer
    buffer make-instance :> buf

    0 buf goal-column<<
    0 buf mod-count<<
    0 buf mod-count-last-save<<
    LF buf eol<<

    100 make-vector buf undo-stack<<
    16 make-vector buf redo-stack<<

    buf ;

: buffer-append-line ( line buf )       // line buffer -> void
    buf last-line>> line prev<<
    buf last-line>> [ line swap next<< ] when*
    line buf last-line<<
    buf first-line>> [
        line buf first-line<<
    ] unless

    // REVIEW
    line number>> [
        line prev>> [ number>> 1+ ] [ 0 ] if* line number<<
    ] unless ;

: buffer-get-property ( keyword buffer ) // keyword buffer -> value
    buffer properties>> [ keyword swap at ] [ nil ] if* ;

: buffer-set-property ( value keyword buffer ) // value keyword buffer -> void
    buffer properties>> [
        2 <hashtable> buffer properties<<
    ] unless
    value keyword buffer properties>> set-at ;

global repaint?

var dot-line-changed?

var current-command
var last-command

var in-redo?

global minibuffer

: minibuffer? minibuffer eq? ;

global buffer-list

: in-buffer-list? // buffer -> ?
    buffer-list member-eq? ;

// deprecated
: listed? // buffer -> ?
    in-buffer-list? ;

: find-buffer-from-file-name            // filename -> buffer/nil
    !> filename
    win64? [
        filename string-upcase filename!
        buffer-list [
            filename>> [ string-upcase filename string-equal? ] [ nil ] if*
        ] find
    ] [
        // not win64
        buffer-list [ filename>> filename = ] find
    ] if
    // -> index/nil buffer/nil
    nip ;

global current-buffer-lock  make-mutex current-buffer-lock!

: lock-current-buffer
    [ current-buffer-lock mutex-trylock ] [ 1 sleep ] until ;

: unlock-current-buffer
    current-buffer-lock mutex-unlock [
        ?nl "unlock-current-buffer: mutex-unlock returned false" print
    ] unless ;

global current-buffer

forget current-buffer!

: current-buffer!                       // buffer -> void
    1 ?enough dup buffer? assert
    lock-current-buffer
    ' current-buffer symbol-set-value
    unlock-current-buffer ;

: current-buffer-filename               // void -> string/nil
    current-buffer [ filename>> ] [ nil ] if* ;

: current-buffer-directory              // void -> string/nil
    current-buffer [ directory>> ] [ nil ] if* ;

: set-current-buffer ( buf )            // buffer -> void
    [ buf ] [ buf current-buffer neq? ] both? [
        current-buffer [
            buffer-list [ current-buffer eq? ] find [
                drop
                buf buffer-list vector-remove-eq! drop
                buffer-list [ current-buffer eq? ] find assert // -> index
                1+ // insert after current buffer
                buf swap buffer-list vector-insert-nth
            ] when
        ] when
        buf current-buffer!
        true repaint?!
    ] when ;

: keep-current-buffer                   // quotation -> void
// Save the value of current-buffer. Call the quotation. Restore
// the saved value of current-buffer when the quotation returns.
    current-buffer                      // -> quotation current-buffer
    swap                                // -> current-buffer quotation
    dip
    current-buffer! ;

: buffer-modified?                      // buffer -> ?
    dup mod-count>> swap mod-count-last-save>> neq? ;

: dot                                   // -> position
    current-buffer dot>> ;

: dot!                                  // position -> void
    current-buffer dot<< ;

: dot-line                              // -> line
    dot line>> ;

: dot-line-number                       // -> line-number
    dot line>> number>> ;

: dot-line!                             // line -> void
    dot line<< ;

: dot-offset                            // -> n
    dot offset>> ;

: dot-offset!                           // n -> void
    dot offset<< ;

// REVIEW dot-offset++
: ++dot-offset
    dot-offset 1+ dot-offset! ;

// REVIEW dot-offset--
: --dot-offset
    dot-offset 1- dot-offset! ;

: move-dot-to                           // line offset -> void
    dot-offset! dot-line! ;

: mark                                  // -> position/nil
    current-buffer mark>> ;

: mark!                                 // position -> void
    current-buffer mark<< ;

: mark-line                             // -> line/nil
    mark [ mark line>> ] [ nil ] if ;

: mark-line-number                      // -> line-number/nil
    mark [ mark line>> number>> ] [ nil ] if ;

: mark-offset                           // -> n
    mark offset>> ;

: unmark
    mark [ nil mark! true repaint?! ] when ;

: copy-dot                              // -> position
    dot copy-position ;

: copy-mark                             // -> position
    mark [ copy-position ] [ nil ] if* ;

: anchor                                // -> position/nil
    current-buffer anchor>> ;

: anchor!                               // position -> void
    current-buffer anchor<< ;

: top-line                              // -> line
    current-buffer top-line>> ;

: top-line!                             // line -> void
    current-buffer top-line<< ;

: top-line-number                       // void -> n
    current-buffer top-line>> number>> ;

: dot-line-text                         // -> string
    dot-line text>> ;

: dot-line-text!                        // string ->
    dot-line text<< ;

: dot-char                              // -> char/?
    dot-offset dot-line-text ?nth ;

: dot-char-next                         // void -> char/nil
    dot-offset 1+ dot-line-text ?nth ;

: dot-char-prev                         // void -> char/nil
    dot-offset 1- dot-line-text ?nth ;

: dot-line-length                       // -> n
    dot-line-text string-length ;

: dot-line-head                         // -> string
    dot-offset dot-line text>> string-head ;

: dot-line-tail                         // -> string
    dot-offset dot-line text>> string-tail ;

: dot-line-next                         // -> line
    dot line>> next>> ;

: dot-line-prev                         // -> line
    dot line>> prev>> ;

: at-bol?                               // void -> ?
    dot-offset zero? ;

: at-eol?                               // void -> ?
    dot-offset dot-line-length eq? ;

: at-bof?                               // void -> ?
    at-bol? dot-line-prev null? and ;

: at-eof?                               // void -> ?
    at-eol? dot-line-next null? and ;

: first-line                            // void -> line
    current-buffer first-line>> ;

: first-line!                           // line -> void
    current-buffer first-line<< ;

: last-line                             // -> line
    current-buffer last-line>> ;

: last-line!                            // line -> void
    current-buffer last-line<< ;

: last-line-number                      // -> n
    last-line number>> ;

: buffer-renumber ( buf )
    buf first-line>> !> line
    0 !> n
    [ line next>> ] [
        n line number<<
        n 1+ n!
        line next>> line!
    ] while
    n line number<<
    line buf last-line<< ;

: renumber
    current-buffer buffer-renumber ;

: line-count                            // -> n
    last-line-number [ 1+ ] [ renumber last-line-number 1+ ] if* ;

: goal-column                           // -> n
    current-buffer goal-column>> ;

: goal-column!                          // n ->
    current-buffer goal-column<< ;

: mod-count                             // -> n
    current-buffer mod-count>> ;

: mod-count!                            // n ->
    current-buffer mod-count<< ;

: mod-count-last-save                   // -> n
    current-buffer mod-count-last-save>> ;

: mod-count-last-save!               // n ->
    current-buffer mod-count-last-save<< ;

: modified?                             // -> ?
    mod-count mod-count-last-save neq? ;

: modified mod-count 1+ mod-count! ;

: undo-stack                            // -> vector
    current-buffer undo-stack>> ;

: redo-stack                            // -> vector
    current-buffer redo-stack>> ;

: tab-width                             // void -> n
    current-buffer tab-width>> [ 8 ] unless* ;

: indent-size                           // void -> n
    current-buffer indent-size>> [ 4 ] unless* ;

: nth-line ( line-number )              // line-number -> line/nil

    line-number 0< [ nil ] ?return

    first-line !> line
    0 !> n

    [ line n line-number < and ] [
        n 1+ n!
        line next>> line!
    ] while

    line ;

: insert-after ( line prev )            // line prev -> void
    // insert line after prev

    prev [ prev next>> ] [ first-line ] if :> next

    prev [
        line prev next<<
    ] [
        line dup first-line! top-line!
    ] if
    prev line prev<<

    next line next<<
    next [ line next prev<< ] [ line last-line! ] if
;

: insert-before ( line next )           // line next -> void
    // insert line before next

    next [ next prev>> ] [ nil ] if :> prev

    prev [ line prev insert-after ] ?return

    // prev is null
    line first-line prev<<
    first-line line next<<
    line first-line!
;

: unlink ( line )                       // line -> void
    line next>> :> next
    line prev>> :> prev

    prev [ next prev next<< ] when
    next [ prev next prev<< ] when

    nil line next<<
    nil line prev<<

    renumber
;

winui? #if
: textview-rows                         // -> n
    winui-textview-rows ;
#endif

gtkui? #if
: textview-rows                         // -> n
    gtkui-textview-rows ;
#endif

termui? #if
: textview-rows                         // -> n
    terminal-rows 2 - ;
#endif

: bottom-line                           // -> line
    top-line !> line
    0 !> i

    [ i textview-rows 1- < ] [
        line next>> [ line! ] when*
        i 1+ i!
    ] while

    line ;

: bottom-line-number                    // -> n
    bottom-line number>> ;

: detab ( s )                           // string -> string'
    '\t' s string-index nil? [ s ] ?return

    256 <sbuf> :> sb

    s [
        dup '\t' eq? [
            drop
            '\s' sb sbuf-push
            [ sb sbuf-length tab-width mod 0? ] [ '\s' sb sbuf-push ] until
        ] [
            sb sbuf-push
        ] if
    ] each

    sb sbuf>string ;

: line-offset-column ( line offset )    // line offset -> column
    line text>> :> text
    offset text length min :> limit
    0 !> column
    limit [
        text string-nth '\t' eq? [
            column tab-width column tab-width mod - + column!
        ] [
            column 1+ column!
        ] if
    ] each-integer
    column ;

: position-column ( pos )               // position -> column
    pos line>> pos offset>> line-offset-column ;

: line-column-offset ( line column )    // line column -> offset

    0 !> offset
    0 !> col
    line length :> limit

    [
        [ offset limit < ] [ col column < ] both?
    ]
    [
        offset line text>> string-nth '\t' eq? [
            col tab-width col tab-width mod - + col!
        ] [
            col 1+ col!
        ] if
        offset 1+ offset!
    ] while

    offset ;

: dot-column                            // -> column
    dot position-column ;

: dot-row                               // -> n
    dot-line-number top-line-number - ;

: mark-column                           // -> column/nil
    mark [ mark position-column ] [ nil ] if ;

: line-selected? ( line )               // line -> ?
    mark null? [ nil ] ?return
    dot mark make-region/2 :> region
    {
        {
            [ region begin-line line before? ]
            [ line region end-line before? ]
        }
        {
            [ region begin-line line eq? ]
            [ region begin-offset 0 eq? line region end-line before? and ]
        }
        // default
        [ nil ]
    } cond ;

: line-starts-in-selection? ( line )    // line -> ?
    mark null? [ nil ] ?return

    mark dot make-region/2 :> region
    line 0 make-position :> pos

    pos region in-region? ;

: line-is-partly-selected? ( line )     // line -> ?
    mark [
        line dot-line eq? line mark-line eq? or
    ] [ nil ] if ;

: line-contains-selection? ( line )     // line -> ?
    mark [
        line dot-line eq? line mark-line eq? and
    ] [ nil ] if ;

: insert-string-internal ( s )
    dot-line-head s + dot-line-tail + dot-line-text!
    dot-offset s length + dot-offset!
    true dot-line-changed?! ;

: insert-line-separator-internal
    // insert line separator at dot
    // move dot past the inserted separator
    // no undo

    dot-line-tail make-line/1 :> new-line
    dot-line-head dot-line-text!
    new-line dot-line insert-after
    new-line dot-line!
    0 dot-offset!
;

: insert-multiline-string-internal ( s )        // string -> void
    s string-lines :> lines
    lines length :> len
    lines last :> last-line

    local line
    lines [
        line!

        line insert-string-internal
        line last-line neq? [
            insert-line-separator-internal
        ] when
    ] each

    s last '\n' eq? [ insert-line-separator-internal ] when

    renumber ;

: insert-string ( s )                   // string -> void
    // insert string at dot
    // moves dot past inserted string
    // no undo

    '\n' s index [
        s insert-multiline-string-internal
    ] [
        s insert-string-internal
    ] if
;

: reframe?                              // -> ?
    dot-line-number
    top-line-number
    dup textview-rows 1- +
    within? not ;

: reframe
    textview-rows 2 /i verify-index !> i
    dot-line !> line
    [ i 0> line prev>> and ] [
        line prev>> line!
        i 1- i!
    ] while
    line top-line!
    true repaint?! ;

: maybe-reframe reframe? [ reframe ] when ;

tuple: mode
    name
    indent-size
    comment-start
    initialize-buffer-function
    identifier-char-function
    formatter
    format-line-function
    scan-buffer-function ;

: current-mode                          // -> mode
    current-buffer mode>> ;

global whole-words-only-default

global ignore-case-default

tuple: search
    pattern
    whole-words-only
    ignore-case
    identifier-char-function ;

: make-search                           // pattern -> search
    verify-string
    search make-instance
    swap >>pattern
    whole-words-only-default >>whole-words-only
    ignore-case-default >>ignore-case ;

global current-search

global last-search

"segments.feline" feral-loader:load-feral-source-file

use: segments

: trivial-format-line                   // string -> segments
    1 ?enough verify-string
    0 feral-colors:color-text make-segment/3 1array ;

unuse: segments

: formatter // mode -> formatter
    1 ?enough
    dup mode? assert
    formatter>> [ ' trivial-format-line ] unless* ;

: alphanumeric?                         // char -> ?
    verify-char char-code :> c
    [ 'A' char-code c <= ] [ c 'Z' char-code <= ] both? [ true ] ?return
    [ 'a' char-code c <= ] [ c 'z' char-code <= ] both? [ true ] ?return
    [ '0' char-code c <= ] [ c '9' char-code <= ] both? [ true ] ?return
    nil ;

: default-identifier-char?              // char -> ?
    :> x
    [ x alphanumeric? ] [ x '_' eq? ] either? ;

: asm-mode-identifier-char? ( x )       // x -> ?
    [ x alphanumeric? ] [ x "_$#@~.?" member-eq? ] either? ;

[ drop nil ] ' identifier-char-function>> set-default-method

: identifier-char-function              // void -> callable
    {
        [ current-search identifier-char-function>> ]
        [ current-buffer identifier-char-function>> ]
        [ current-mode   identifier-char-function>> ]
        [ ' default-identifier-char? ]
    } || ;

: identifier-char?                      // char -> ?
    identifier-char-function call ;

: in-whitespace?                        // void -> ?
    dot-char whitespace? ;

: not-in-whitespace?                    // void -> ?
    dot-char whitespace? not ;

: in-word?                              // void -> ?
    dot-char [ identifier-char? ] [ nil ] if* ;

: not-in-word?                          // void -> ?
    dot-char [ identifier-char? not ] [ true ] if* ;

: identifier-at-dot                     // void -> start/nil string/nil

    // REVIEW identifier-char-function might not be a symbol
    identifier-char-function verify-symbol 1quotation [ not ] compose
    :> not-identifier-char-function

    [ mark ] [ mark-line dot-line eq? ] both? [
        mark dot make-region/2 begin-offset
    ] [
        dot-offset dot-line-length 1- min 0 max
    ] if :> offset

    offset dot-line-text not-identifier-char-function find-last-from drop !> start

    // advance to first identifier char
    start [ start 1+ start! ] [ 0 start! ] if

    start dot-line-text not-identifier-char-function find-from drop !> end

    end [ dot-line-length end! ] unless

    start
    start end dot-line-text string-substring ;

: find-substring-in-range ( pattern string start end )  // pattern string start end -> i/nil
    pattern unsafe-string-data-address :> pattern-data-address
    string unsafe-string-data-address :> string-data-address
    pattern string-length :> pattern-length

    start end [
        string-data-address +
        pattern-data-address
        pattern-length unsafe-memequal
    ] find-integer-in-range ;

: find-substring-from ( pattern string start )  // pattern string start -> i/nil
    string string-length pattern string-length - 1+ :> end
    pattern string start end find-substring-in-range ;

: delimited? ( string index pattern-length )    // string index pattern-length -> ?
    true !> result
    index 0> [
        index 1- string string-nth identifier-char? [ nil result! ] when
    ] when
    result nil? [ nil ] ?return
    index pattern-length + :> after
    after string string-length < [
        after string string-nth identifier-char? [ nil result! ] when
    ] when
    result ;

: find-word-from ( pattern string start )   // pattern string start -> i/nil
    pattern string-length :> pattern-length
    start !> index
    local found
    [ index found nil? and ] [
        pattern string index find-substring-from index!
        index [
            string index pattern-length delimited? [
                index found!
            ] [
                index string length < [ index 1+ ] [ nil ] if index!
            ] if
        ] when
    ] while
    found ;
