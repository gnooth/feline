// Copyright (C) 2017-2019 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feral-core feline accessors feral-config ;
in: editor

: adjust-dot-column
    goal-column dot-offset!
    dot-offset dot-line-length > [
        dot-line-length dot-offset!
    ] when
;

: beginning-of-buffer
    add-undo-move
    unmark
    first-line top-line!
    first-line 0 make-position dot!
    0 goal-column!
    t repaint?!
;

: end-of-buffer
    add-undo-move
    unmark
    last-line dot-line!
    dot-line-length dot-offset!
    dot-offset goal-column!

    reframe? [
        dot-line-number textview-rows 1- - nth-line top-line!
        t repaint?!
    ] when
;

: gotoline-internal                     // line-number -> void
    1- 0 max line-count 1- min
    dup dot-line-number <> [
        add-undo-move
        unmark
        nth-line dot-line!
        0 dot-offset!
        maybe-reframe
    ] [
        drop
        add-undo-move
        unmark
        0 dot-offset!
    ] if
;

: do-home
    add-undo-move

    unmark

    0 dot-offset!
    0 goal-column!
;

: end-of-line
    add-undo-move

    unmark

    dot-line-length dot-offset!
    dot-offset goal-column!
;

: beginning-of-block
    dot mark make-region/2 begin dot!
;

: end-of-block
    dot mark make-region/2 end dot!
;

: do-left
    last-command ' do-left eq? [ add-undo-move ] unless

    mark [
        beginning-of-block
        unmark
    ] return-if

    dot-offset 0 > [
        dot-offset 1- dot-offset!
        dot-offset goal-column!
    ] [
        dot-line-prev [
            dot-line-prev dot-line!
            dot-line-length dot-offset!
            dot-offset goal-column!
            reframe? [
                dot-line top-line!
                t repaint?!
            ] when
        ] when
    ] if
;

: do-right
    last-command ' do-right eq? [ add-undo-move ] unless

    mark [
        end-of-block
        unmark
    ] return-if

    dot-offset dot-line-length < [
        dot-offset 1+ dot-offset!
        dot-offset goal-column!
    ] [
        dot-line-next [
            dot-line-next dot-line!
            0 dot-offset!
            dot-offset goal-column!
            reframe? [
                dot-line-number textview-rows 1- - nth-line top-line!
                t repaint?!
            ] when
        ] when
    ] if
;

: do-down
    reset-redo

    mark [
        add-undo-move
        end-of-block
        unmark
    ] return-if

    dot-line-next [
        last-command ' do-down eq? [ add-undo-move ] unless
        dot-line-next dot-line!
        unmark
        reframe? [
            dot-line-number textview-rows 1- - nth-line top-line!
            t repaint?!
        ] when
        adjust-dot-column
    ] when
;

: do-up
    reset-redo

    dot-line-prev [
        last-command ' do-up eq? [ add-undo-move ] unless
        dot-line-prev dot-line!
        unmark
        reframe? [
            dot-line top-line!
            t repaint?!
        ] when
        adjust-dot-column
    ] when
;

winui? #if

: mousewheel-scroll-up
    current-command last-command!
    ' mousewheel-scroll-up current-command!

    top-line prev>> [
        top-line!
        4 [ top-line prev>> [ top-line! ] when* ] times

        dot-line-number bottom-line-number > [
            last-command ' mousewheel-scroll-up eq? [ add-undo-move ] unless
            bottom-line dot-line!
            0 dot-offset!
        ] when

        t repaint?!
        update-display
    ] when* ;

: mousewheel-scroll-down
    current-command last-command!
    ' mousewheel-scroll-down current-command!

    top-line next>> [
        top-line!
        4 [ top-line next>> [ top-line! ] when* ] times

        dot-line-number top-line-number < [
            last-command ' mousewheel-scroll-down eq? [ add-undo-move ] unless
            top-line dot-line!
            0 dot-offset!
        ] when

        t repaint?!
        update-display
    ] when* ;

#endif

: do-window-up
    top-line prev>> [
        top-line prev>> top-line!
        dot-line-number bottom-line-number > [
            add-undo-move
            bottom-line dot-line!
            0 dot-offset!
        ] when
        t repaint?!
    ] when
;

: do-window-down
    top-line next>> [
        top-line next>> top-line!
        dot-line-number top-line-number < [
            add-undo-move
            top-line dot-line!
            0 dot-offset!
        ] when
        t repaint?!
    ] when
;

: do-page-down
    add-undo-move

    dot-row :> goal-row

    top-line-number textview-rows + last-line-number > [
        last-line dot-line!
        adjust-dot-column
    ] return-if

    top-line :> line!
    0 :> i!

    [ line next>> i textview-rows < and ] [
        i 1+ i! line next>> line!
    ] while

    line top-line!

    goal-row i!

    [ line next>> i 0 > and ] [
        i 1- i! line next>> line!
    ] while

    line dot-line!

    t repaint?!
    adjust-dot-column
;

: do-page-up
    add-undo-move

    dot-row :> goal-row

    dot-line :> line!
    0 :> i!

    [ line prev>> i textview-rows < and ] [
        i 1+ i! line prev>> line!
    ] while

    line dot-line!

    goal-row i!

    [ line prev>> i 0 > and ] [
        i 1- i! line prev>> line!
    ] while

    line top-line!

    t repaint?!
    adjust-dot-column
;
