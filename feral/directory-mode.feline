// Copyright (C) 2019 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feral-core feline accessors directories mini ;
in: directory-mode

private

tuple: directory-mode ;

global instance

global directory-mode-local-map

: name-offset                           // string -> index/f
    1 ?enough verify-string :> s

    win64? [
        // 05/24/2019  09:37 AM             3,019 directory-mode.feline
        //                                      ^^^

        // At offset 37, we require a digit, followed by a space,
        // followed by an alphanumeric character.
        {
            [ 37 s ?nth digit? ]
            [ 38 s ?nth '\s' eq? ]
            [ 39 s ?nth alphanumeric? ]
        } && // -> ?

        // If the string qualifies, the filename begins at offset 39.
        39 f ?
    ] [ f ] if ;

public

: get-instance                          // void -> directory-mode
    instance [
        directory-mode make-instance dup instance!
    ] unless* ;

method: directory-mode initialize-buffer // buffer mode -> void
    2 ?enough
    drop :> buf
    get-instance dup assert buf mode<<
    directory-mode-local-map buf local-map<<
    t buf read-only<< ;

in: editor

public

: dir
    current-buffer filename>> [ file-name-directory ] [ get-current-directory ] if*
    :> directory

    directory find-buffer :> buf!

    buf [ buf current-buffer! t repaint! ] return-if

    win64? "dir " "ls -l " ? directory + shell-command-to-string :> s

    s length 0 > [
        make-buffer buf!
        s buf buffer-set-contents
        buf first-line>> 0 make-position buf dot<<
        buf first-line>> buf top-line<<
        t buf read-only<<
        directory buf filename<<
        "Directory of " directory + buf name<<

        directory-mode:get-instance dup buf mode<<
        buf swap initialize-buffer

        buf buffer-list vector-push
        buf current-buffer!

        t repaint!
    ] [ "No changes" message ] if ;

: dir-open-file                         // void -> void
    dot-line-text :> s

    s directory-mode:name-offset [ s tail ] [ f ] if* :> filename!

    filename [
        current-buffer filename>> filename path-append filename!
        filename print
        filename find-buffer [
            current-buffer!
        ] [
            filename 1 create-buffer/2
        ] if*
        t repaint!
    ] when ;

using: feline ;
in: directory-mode

private

: initialize-local-map
    128 <hashtable> :> m
    ' editor:dir-open-file      key:enter       m set-at
    m directory-mode-local-map!
;

initialize-local-map
