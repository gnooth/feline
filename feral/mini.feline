// Copyright (C) 2019 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline ;
in: user

"mini" delete-vocab

in: mini

private

global completion-provider

public

: set-completion-provider completion-provider! ;

feral-config:winui? #if

using: history feline accessors ;
in: mini

private

global minibuf

global minibuffer-contents

global prompt

tuple: minibuffer
    text ;

: create-minibuffer
    minibuffer make-instance minibuf!
    "" minibuf text<<
;

create-minibuffer

: repaint-minibuffer
    winui-hide-caret

    minibuf text>> :> s!                // string or sbuf

    s string? [ s sbuf>string s! ] unless

    0 0 s winui-minibuffer-text-out
    s length 0 winui-minibuffer-clear-eol

    winui-show-caret
;

public

: minibuffer-set-text                   // string-or-sbuf -> void
    minibuf text>> over sequence= [ drop ] [
        minibuf text<<
        winui-minibuffer-invalidate
    ] if
;

private

: do-enter
    minibuf text>> :> sb
    sb sbuf? assert-true

    sb sbuf>string minibuffer-contents!

    current-history [
        prompt length minibuffer-contents tail update-history
        f current-history!
    ] when

    "" minibuffer-set-text
    f set-completion-provider
    winui-minibuffer-exit
;

: do-escape
    f minibuffer-contents!
    "" minibuffer-set-text
    f current-history!
    f set-completion-provider
    winui-minibuffer-exit ;

: do-bs
    minibuf text>> :> sb
    sb sbuf? assert-true

    sb length prompt length > [
        sb length 1 - sb sbuf-shorten
        sb length winui-char-width * 0
        winui-set-caret-pos
        winui-minibuffer-invalidate
    ] when
;

: do-normal-char ( c )
    minibuf text>> :> sb
    sb sbuf? assert-true

    c sb sbuf-push
    sb length winui-char-width * 0
    winui-set-caret-pos
    winui-minibuffer-invalidate
;

: minibuffer-set-text-from-history ( s ) // string/f -> void
    s null? ?exit
    prompt s + string>sbuf :> sb
    sb minibuffer-set-text
    sb length winui-char-width * 0
    winui-set-caret-pos
    winui-minibuffer-invalidate ;

: do-previous history-previous minibuffer-set-text-from-history ;

: do-next history-next minibuffer-set-text-from-history ;

: minibuffer-set-completion-text // string/f -> void
    minibuffer-set-text-from-history ;

: do-tab
    completion-provider null? ?exit

    minibuf text>> :> sb
    sb sbuf? assert-true
    prompt length sb sbuf>string tail 1 ?enough dup print
    completion-provider call [
        minibuffer-set-completion-text
    ] when* ;

global minibuffer-keymap

: initialize-minibuffer-keymap
    128 <hashtable> :> m
    ' do-enter      key:enter       m set-at
    ' do-escape     key:escape      m set-at
    ' do-bs         key:backspace   m set-at
    ' do-previous   feral-key:up    m set-at
    ' do-next       feral-key:down  m set-at
    ' do-tab        feral-key:tab   m set-at
    m minibuffer-keymap! ;

initialize-minibuffer-keymap

: lookup-key                            // key -> symbol/f
    minibuffer-keymap at ;

: winui-minibuffer-char                 // tagged-char -> void
    dup printable-char? [
        do-normal-char
    ] [
        lookup-key [ call-symbol ] when*
    ] if ;

: winui-minibuffer-keydown              // key -> void
    lookup-key [ call-symbol ] when* ;

public

: message                               // string ->
    minibuffer-set-text
;

: clear-message
    "" minibuffer-set-text
;

: minibuffer-accept-string              // prompt -> string/f
    verify-string prompt!
    f minibuffer-contents!
    prompt string>sbuf minibuffer-set-text
    prompt length winui-char-width * 0 winui-set-caret-pos
    winui-minibuffer-main
    minibuffer-contents [
        prompt length minibuffer-contents tail
    ] [ f ] if
;

: minibuffer-accept-string/2            // prompt default -> string/f
    2 ?enough
    verify-string :> default
    verify-string prompt!
    f minibuffer-contents!

    prompt default +
    [ string>sbuf minibuffer-set-text ]
    [ length winui-char-width * 0 winui-set-caret-pos ]
    bi

    winui-minibuffer-main

    minibuffer-contents [
        prompt length minibuffer-contents tail
    ] [ f ] if
;

#else

using: feline accept-string ;
in: mini

: status-y                              // -> n
    terminal-rows 2 - ;

: message-y                             // -> n
    terminal-rows 1- ;

: message                               // string ->
    0 message-y at-xy write-string ;

: clear-message hide-cursor 0 message-y at-xy clear-to-eol ;

: minibuffer-accept-string              // prompt -> string
    0 message-y at-xy
    accept-string
    clear-message ;

: minibuffer-accept-string/2            // prompt default -> string
    0 message-y at-xy
    accept-string/2
    clear-message ;

#endif
