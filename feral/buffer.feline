//  Copyright (C) 2017-2019 Peter Graves <gnooth@gmail.com>

//  This program is free software: you can redistribute it and/or modify
//  it under the terms of the GNU General Public License as published by
//  the Free Software Foundation, either version 3 of the License, or
//  (at your option) any later version.

//  This program is distributed in the hope that it will be useful,
//  but WITHOUT ANY WARRANTY; without even the implied warranty of
//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
//  GNU General Public License for more details.

//  You should have received a copy of the GNU General Public License
//  along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feral-core feline accessors modes mini ;
in: editor

: clear-buffer ( buf )                  // buffer -> void
    nil buf first-line<<
    nil buf last-line<<
    nil buf top-line<<
    nil buf dot<<
    nil buf mark<< ;

: buffer-set-contents ( s buf )         // string buffer -> void
    buf clear-buffer
    s string-lines [ make-line/2 buf buffer-append-line ] each-index ;

: create-buffer                         // void -> void
    make-buffer :> buf
    "" 0 make-line/2

    [ buf buffer-append-line ]
    [ 0 make-position buf dot<< ]
    bi

    buf buffer-list vector-push
    buf current-buffer!

    dot-line top-line!
;

: create-buffer/2                       // filename line-number -> void
    verify-index  :> line-number
    verify-string :> filename

    make-buffer :> buf

    filename buf filename<<

    filename file-name-directory buf directory<<

    filename file-name-nondirectory buf name<<

    filename file-name-extension [ modes at buf mode<< ] when*

    filename file-contents :> contents

    contents string-lines verify-vector :> lines

    contents empty? [
        "" lines vector-push
    ] [
        // detect eol
        '\r' contents string-index CR+LF LF ? buf eol<<
        contents string-last-char '\n' eq? [
            "" lines vector-push
        ] when
    ] if

    lines [
        make-line/2 buf buffer-append-line
    ] each-index

    buf first-line>> line? assert
    buf last-line>>  line? assert

    buf first-line>> 0 make-position buf dot<<
    buf first-line>> buf top-line<<

    buf buffer-list vector-push

    buf set-current-buffer

    line-number 1- 0 max line-count 1- min nth-line dot-line!

    0 dot-offset!

    buf mode>> mode? [
        buf mode>> initialize-buffer-function>> [ buf swap call ] when*
    ] [
        buf dup mode>> initialize-buffer
    ] if

    get-current-directory :> dir
    dir [
        filename file-name-directory [
            set-current-directory [
                "git symbolic-ref -q --short HEAD" shell-command-to-string [
                    dup string-?last '\n' eq? [
                        1 swap head*
                    ] when
                    :git-branch buf buffer-set-property
                ] when*
                dir set-current-directory assert
            ] when
        ] when*
    ] when

    t repaint! ;

: find-buffer-from-file-name            // filename -> buffer/nil
    !> filename
    win64? [
        filename string-upcase filename!
        buffer-list [
            filename>> [ string-upcase filename string-equal? ] [ nil ] if*
        ] find
    ] [
        // not win64
        buffer-list [ filename>> filename = ] find
    ] if
    // -> index/nil buffer/nil
    nip ;

: next-buffer
    buffer-list length 1 > [
        buffer-list [ current-buffer eq? ] find [
            // -> index
            1+ dup buffer-list length < [ drop 0 ] unless
            buffer-list vector-nth current-buffer!
            t repaint!
        ] when
    ] when ;

: previous-buffer
    buffer-list length 1 > [
        buffer-list [ current-buffer eq? ] find [
            // -> index
            1- dup 0 >= [ drop buffer-list length 1- ] unless
            buffer-list vector-nth current-buffer!
            t repaint!
        ] when
    ] when ;

: buffer-name ( buf )
    buf name>> [ buf filename>> ] unless* ;

use: feral-config

winui? #if
use: mini
#endif

: confirm-kill-current-buffer           // -> ?
    f :> confirmed?!

    modified? [
        "Save file? (y or n) " minibuffer-accept-string
        "y" = [ do-save ] when
    ] when

    modified? [
        "Abandon changes? (yes or no) " minibuffer-accept-string
        "yes" = [ t confirmed?! ] when
    ] when

    confirmed?
;

winui? #if
unuse: mini
#endif

: kill-current-buffer
    buffer-list [ current-buffer eq? ] find     // -> index/f element/f
    current-buffer assert-eq                    // -> index
    :> n!

    n buffer-list vector-remove-nth!

    n 0> [ n 1- n! ] when

    current-buffer parent>>
    n buffer-list vector-nth or
    current-buffer!

    t repaint?! ;

: kill-buffer
    f !> confirmed?

    modified? [ confirm-kill-current-buffer confirmed?! ] when

    modified? not confirmed? or [
        buffer-list length 1 = [
            0 buffer-list vector-set-length
            exit-feral
        ] [
            kill-current-buffer
        ] if
    ] when ;
