// Copyright (C) 2019-2021 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: modes feral-core feline accessors segments feral-colors ;
in: go-mode

private

constant: syntax-words {
    "break"
    "case"
    "chan"
    "const"
    "continue"
    "default"
    "defer"
    "else"
    "fallthrough"
    "for"
    "func"
    "go"
    "goto"
    "if"
    "import"
    "interface"
    "map"
    "package"
    "range"
    "return"
    "select"
    "struct"
    "switch"
    "type"
    "var"
} ;

constant: special-types {
    "bool"
    "string"
    "int" "int8" "int16" "int32" "int64"
    "uint" "uint8" "uint16" "uint32" "uint64" "uintptr"
    "byte"
    "rune"
    "float32" "float64"
    "complex64" "complex128"
} ;

global instance

: get-instance // void -> mode
    instance ;

: parse-quoted-string ( iter )          // string-iterator -> segment
    iter string-iterator-index :> start
    local ch
    [
        iter string-iterator-next ch!
        ch dup '"' neq? and
    ] loop
    // reached end
    ch [
        ch '"' assert-eq
        1 iter string-iterator-skip
        iter string-iterator-index
    ] [
        iter string-iterator-string string-length
    ] if :> end

    start end iter string-iterator-string substring
    start color-string make-segment/3 ;

: parse-line-comment ( iter )           // string-iterator -> segment
    iter string-iterator-index !> start
    start 0? [
        iter string-iterator-string 0 color-comment make-segment/3
    ] [
        start
        iter string-iterator-string string-length
        iter string-iterator-string substring
        start color-comment make-segment/3
    ] if ;

global last-identifier

: parse-identifier ( iter )             // string-iterator -> segment
    iter string-iterator-index :> start

    local ch
    [
        iter string-iterator-next ch!
        [ ch char? ] [ ch identifier-char? ] both?
    ] loop
    // reached end of identifier
    iter string-iterator-index :> end
    start end iter string-iterator-string substring :> identifier

    {
        { [ last-identifier { "func" "type" } member? ] [ color-name ] }
        { [ identifier syntax-words member? ] [ color-syntax ] }
        { [ identifier special-types member? ] [ color-type ] }
        [
            // default
            color-text
        ]
    } cond :> format

    identifier last-identifier!

    identifier start format make-segment/3 ;

: format-iter ( iter )
    100 make-vector :> v
    0 !> start

    local ch
    local end

    nil last-identifier!

    [
        iter string-iterator-next ch!
        ch
    ] [
        {
            {
                [ ch '"' eq? ]
                [
                    iter string-iterator-index end!
                    start end iter string-iterator-string substring
                    start color-text make-segment/3 v push
                    iter parse-quoted-string v push
                    iter string-iterator-index start!
                ]
            }

            {
                [ ch '/' eq? ]
                [
                    iter string-iterator-peek '/' eq? [
                        iter string-iterator-index start > [
                            iter string-iterator-index end!
                            start end iter string-iterator-string substring
                            start color-text make-segment/3 v push
                        ] when
                        iter parse-line-comment v push
                        iter string-iterator-skip-to-end
                        iter string-iterator-index start!
                    ] when
                ]
            }

            {
                [ ch identifier-char? ]
                [
                    iter string-iterator-index end!
                    start end iter string-iterator-string substring
                    start color-text make-segment/3 v push
                    iter parse-identifier v push
                    iter string-iterator-index start!
                ]
            }

            [
                // default
            ]
        } cond
    ] while

    iter string-iterator-string string-length end!
    start end < [
        start end iter string-iterator-string substring
        start color-text make-segment/3 v push
    ] when

    v ;

: go-mode-format-line ( line )        // line -> segments
    line text>> detab make-string-iterator format-iter ;

: line-is-definition? ( line )
    "func" line text>> string-has-prefix? ;

: go-mode-list-symbols
    ' go-mode:line-is-definition? list-symbols:list-symbols ;

global sourcefile

: extract-name ( string )               // string -> name
    string [ default-identifier-char? not ] find // -> index/nil element/nil
    [ string head ] [ drop nil ] if ;

: scan-current-buffer                   // void -> hashtable/nil
    current-buffer filename>> sourcefile!
    local ht
    sourcefile file-name-extension ".go" equal? [
        128 <hashtable> ht!
        sourcefile file-lines [
            // -> string index
            :> index :> string
            {
                {
                    [ "func (" string string-has-prefix? ]
                    [
                        ')' string string-find-char !> offset
                        offset [
                            1+ string string-skip-whitespace offset!
                            offset [
                                string string-skip-to-whitespace [
                                    offset swap string string-substring
                                    extract-name :> name
                                    name [
                                        sourcefile index 1+ 2array
                                        name ht set-at
                                    ] when
                                ] when*
                            ] when*
                        ] when*
                    ]
                }
                {
                    [ "func " string string-has-prefix? ]
                    [
                        5 :> offset
                        offset string ?nth default-identifier-char? [
                            offset string string-skip-to-whitespace [
                                offset swap string string-substring
                                extract-name :> name
                                name [
                                    sourcefile index 1+ 2array
                                    name ht set-at
                                ] when
                            ] when*
                        ] when
                    ]
                }
                {
                    [ "type " string string-has-prefix? ]
                    [
                        5 :> offset
                        offset string ?nth default-identifier-char? [
                            offset string string-skip-to-whitespace [
                                offset swap string string-substring :> name
                                name [
                                    sourcefile index 1+ 2array
                                    name ht set-at
                                ] when
                            ] when*
                        ] when
                    ]
                }
                // default (do nothing)
                [ ]
            } cond
        ] each-index
    ] when*
    ht ;

: find-definition-internal ( string )
    scan-current-buffer [
        // -> hashtable
        string swap at [
            // -> location
            second editor:goto-line-internal
        ] when*
    ] when* ;

: find-definition-at-dot
    dot-offset :> old-dot-offset
    dot-line indentation-length :> indent

    dot-char whitespace? [
        {
            { [ dot-offset indent < ] [ indent dot-offset! ] }
            { [ dot-offset 0> ] [ dot-offset 1- dot-offset! ] }
        } cond
    ] when

    identifier-at-dot                   // -> index/nil string/nil
    nip                                 // -> string/nil
    old-dot-offset dot-offset!
    [ find-definition-internal ] when* ;

global go-mode-local-map

feral-config:winui? feral-config:gtkui? or #if

: initialize-local-map
    128 <hashtable> :> m
    ' go-mode-list-symbols      feral-key:ctrl-shift-o      m set-at
    ' find-definition-at-dot    feral-key:f12               m set-at
    m go-mode-local-map! ;

initialize-local-map

#endif

: go-mode-initialize-buffer             // buffer -> void
    1 ?enough :> buf
    go-mode-local-map buf local-map<<
    get-instance :> m
    m indent-size>> buf indent-size<< ;

: initialize-go-mode
    mode make-instance :> m
    "Go" m name<<
    8 m indent-size<<
    "// " m comment-start<<
    ' go-mode-initialize-buffer m initialize-buffer-function<<
    ' go-mode-format-line m format-line-function<<
    m ".go" modes set-at
    m instance! ;

initialize-go-mode
