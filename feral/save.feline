-- Copyright (C) 2017-2019 Peter Graves <gnooth@gmail.com>

-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.

-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feral-core feline accessors feral-config ;
in: editor

: make-backup
    current-buffer filename>> [
        dup file-exists?
        [ dup "~" string-append copy-file ] [ drop ] if
    ] when*
;

winui? #if
use: mini
#endif

: trim ( s )                            // string -> string/f
    s string-?last whitespace? [
        s string-length 1- s [ whitespace? not ] find-last-from // -> index/f element/f
        [ s swap 1+ string-head ] [ drop "" ] if
    ] [
        f
    ] if ;

: remove-trailing-whitespace

    first-line :> line!

    f :> changed!

    [ line last-line eq? ] [
        line text>> trim [
            line text<<
            t changed!
        ] when*
        line next>> line!
    ] until

    line last-line assert-eq

    line text>> trim [
        line text<<
        t changed!
    ] when*

    // adjust dot and mark if necessary
    dot-offset dot-line-length > [ dot-line-length dot-offset! ] when

    mark [
        mark-offset mark-line text>> length > [
            mark-line text>> length mark offset<<
        ] when
    ] when

    changed [ modified ] when ;

: do-save
    current-buffer filename>> :> filename!

    filename [
        "File: " minibuffer-accept-string filename!
        filename [
            filename file-exists? [
                "Overwrite existing file? (yes or no) " minibuffer-accept-string
                "yes" = [ f filename! ] unless
            ] when
        ] when
    ] unless

    filename null? [ ] return-if

    -- save the current buffer to disk
    output-style
    "Saving..." message

    f :> saved?!

    make-backup

    remove-trailing-whitespace

    current-buffer eol>> :> eol
    line-count 80 * <sbuf> :> sb
    nano-count :> start-ns

    -- all lines but the last are followed by eol
    first-line :> line!
    [ line last-line neq? ] [
        line text>> sb sbuf-append-string
        eol sb sbuf-append-string
        line next>> line!
    ] while

    -- last line, no eol
    last-line text>> sb sbuf-append-string

    sb sbuf>string filename

    -- set-file-contents might throw
    [ set-file-contents t saved?! ] [ 2nip message ] recover

    nano-count start-ns - :> elapsed-ns

    saved? [
        mod-count mod-count-last-save!
        elapsed-ns 1000000 /i "Saving...done (%s ms)" format message
        current-buffer filename>> [
            filename canonical-path current-buffer filename<<
        ] unless
    ] when
;
