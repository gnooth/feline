// Copyright (C) 2017-2019 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feral-core feline accessors mini ;
in: editor

: buffer-make-backup ( buf )
    buf filename>> [
        dup file-exists?
        [ dup "~" string-append copy-file ] [ drop ] if
    ] when* ;

: make-backup
    current-buffer buffer-make-backup ;

: trim-trailing* ( s )                  // string -> string/string' ?
    // if whitespace was trimmed, return string' t
    // if there was no change, return string f
    s string-trim-tail dup s neq? ;

: buffer-remove-trailing-whitespace ( buf )
    // REVIEW no undo

    buf first-line>> !> line

    // first see if there's anything to do
    f !> found
    [ line found not and ] [
        line text>> string-?last whitespace? [
            line found!
        ] [
            line next>> line!
        ] if
    ] while

    found null? ?exit // nothing to do

    line found assert-eq

    [ line ] [
        line text>> string-?last whitespace? [
            line text>> string-trim-tail line text<<
        ] when
        line next>> line!
    ] while

    // adjust dot and mark if necessary
    buf dot>> offset>> buf dot>> line>> text>> length > [
        buf dot>> line>> text>> length buf dot>> offset<<
    ] when

    buf mark>> [
        buf mark>> offset>> buf mark>> line>> text>> length > [
            buf mark>> line>> text>> length buf mark>> offset<<
        ] when
    ] when

    modified

    buf current-buffer [ t repaint! ] when ;

: do-save
    current-buffer filename>> :> filename!

    filename [
        "File: " minibuffer-accept-string filename!
        filename [
            filename file-exists? [
                "Overwrite existing file? (yes or no) " minibuffer-accept-string
                "yes" = [ f filename! ] unless
            ] when
        ] when
    ] unless

    filename null? ?exit

    // save the current buffer to disk
    "Saving..." message

    f :> saved?!

    make-backup

    current-buffer buffer-remove-trailing-whitespace

    current-buffer eol>> :> eol
    line-count 80 * <sbuf> :> sb
    nano-count :> start-ns

    // all lines but the last are followed by eol
    first-line :> line!
    [ line ] [
        line text>> sb sbuf-append-string
        line next>> [
            eol sb sbuf-append-string
        ] when
        line next>> line!
    ] while

    sb sbuf>string filename

    // set-file-contents might throw
    [ set-file-contents t saved?! ] [ 2nip message ] recover

    nano-count start-ns - :> elapsed-ns

    saved? [
        mod-count mod-count-last-save!
        elapsed-ns 1000000 /i "Saving...done (%s ms)" format message
        current-buffer filename>> [
            filename canonical-path current-buffer filename<<
        ] unless
    ] when
;
