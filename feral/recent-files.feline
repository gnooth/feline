// Copyright (C) 2019-2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feral-core feline accessors ;
in: recent-files

private

global recent-files-vector

40 constant directory-column

directories:feral-directory "recent-files" path-append constant recent-files-filename

tuple: entry
    filename
    linenumber ;

: make-entry                            // filename linenumber -> entry
    entry make-instance tuck linenumber<< tuck filename<< ;

: string-from-entry                     // entry -> string
    :> entry
    256 <sbuf> :> sb
    entry filename>> sb sbuf-append-string
    '\t' sb sbuf-push
    entry linenumber>> fixnum>decimal sb sbuf-append-string
    sb sbuf>string ;

: entry-from-string                     // string -> entry
    verify-string :> s
    entry make-instance :> entry
    '\t' s string-index :> index
    index [
        index s string-head entry filename<<
        index 1+ s string-tail decimal>number entry linenumber<<
    ] [
        s entry filename<<
        1 entry linenumber<<
    ] if
    entry ;

: load-recent-files
    recent-files-vector nil? assert
    40 make-vector :> v
    recent-files-filename file? [
        recent-files-filename file-lines [ entry-from-string v vector-push ] each
    ] when
    v recent-files-vector! ;

: save-recent-files
    local v
    recent-files-vector [
        40 make-vector v!
        [ length dup 40 - 0 max swap ] keep <slice>
        [
            string-from-entry v push
        ] each
        v recent-files-filename set-file-lines
    ] when* ;

: recent-files-select
    // line numbers are 0-based
    // the most recent file is the first file in the recent files vector
    recent-files-vector length 1- dot-line-number - 0 max // -> index
    recent-files-vector nth :> entry
    entry filename>> :> filename
    entry linenumber>> :> linenumber
    filename find-buffer-from-file-name !> buf
    buf [
        filename file-exists? [
            // REVIEW error handling
            filename linenumber editor:create-buffer/2 buf!
        ] when
    ] unless
    buf [ current-buffer! ] when*
    true repaint?! ;

: recent-files-quit
    current-buffer parent>> current-buffer!
    true repaint?! ;

global recent-files-local-map

: initialize-local-map
    128 <hashtable> :> keymap
    ' recent-files-select   feral-key:enter     keymap set-at
    ' recent-files-quit     feral-key:escape    keymap set-at
    ' recent-files-quit     feral-key:ctrl-w    keymap set-at
    keymap recent-files-local-map! ;

initialize-local-map

feral-config:winui? feral-config:gtkui? or #if
' recent-files-select feral-key:double-mouse-1 recent-files-local-map set-at
#endif

: add-recent-file ( filename linenumber ) // filename linenumber -> void
    // REVIEW don't save directories
    filename directory? ?exit

    recent-files-vector [ load-recent-files ] unless

    recent-files-vector [ filename>> filename = ] find // -> index/nil element/nil
    [
        // -> index
        recent-files-vector vector-remove-nth!
    ] [ drop ] if

    filename linenumber make-entry recent-files-vector vector-push

    save-recent-files ;

' add-recent-file is feral-core:add-recent-file

public

: recent-files
    recent-files-vector [ load-recent-files ] unless

    make-buffer :> buf
    "Recent Files" buf name<<
    current-buffer-directory buf directory<<
    recent-files-local-map buf local-map<<

    local entry
    local sb

    recent-files-vector vector-length
    [
        // -> i
        negate recent-files-vector vector-length 1- +
        recent-files-vector vector-nth entry!
        128 make-sbuf sb!
        entry filename>> file-name-nondirectory sb sbuf-append-string
        [ sb sbuf-length directory-column < ] [ '\s' sb push ] while

        // FIXME it's a bug if entry filename>> does not have a directory component
        entry filename>> file-name-directory [ sb sbuf-append-string ] when*

        sb sbuf>string make-line/1 buf buffer-append-line
    ] each-integer

    current-buffer buf parent<<
    true buf read-only<<

    buf first-line>> buf top-line<<
    buf first-line>> 0 make-position buf dot<<
    buf current-buffer!

    renumber
    true repaint?! ;
