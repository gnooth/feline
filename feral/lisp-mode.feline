// Copyright (C) 2019 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feral-core modes feline accessors segments feral-colors ;
in: lisp-mode

private

global instance

: get-instance                          // void -> mode
    instance ;

: lisp-mode-identifier-char? ( x )      // x -> ?
    // REVIEW
    [ x alphanumeric? ] [ x '-' eq? ] either? ;

: lisp-mode-format-line ( s )           // string -> array-of-segments
    ';' s string-find-char :> comment-start

    comment-start [
        comment-start s string-head 0 color-text make-segment/3
        comment-start s string-tail comment-start color-comment make-segment/3
        2array
    ] [
        s 0 color-text make-segment/3
        1array
    ] if ;

: line-is-definition? ( line )
    line text>> string-trim-head :> s
    '\s' s string-index :> end
    end nil? [ nil ] ?return
    0 end s string-substring {
        "(defun"
    } member? ;

: lisp-mode-list-symbols
    ' lisp-mode:line-is-definition? list-symbols:list-symbols ;

global lisp-mode-local-map

feral-config:winui? feral-config:gtkui? or #if

: initialize-local-map
    128 <hashtable> :> m
    ' lisp-mode-list-symbols feral-key:ctrl-shift-o m set-at
    m lisp-mode-local-map! ;

initialize-local-map

#endif

: lisp-mode-initialize-buffer           // buffer -> void
    1 ?enough :> buf
    lisp-mode-local-map buf local-map<<
    instance indent-size>> buf indent-size<< ;

: initialize-lisp-mode
    mode make-instance :> m
    "Lisp" m name<<
    2 m indent-size<<
    "; " m comment-start<<
    ' lisp-mode-format-line m formatter<<
    ' lisp-mode-initialize-buffer m initialize-buffer-function<<
    ' lisp-mode-identifier-char? m identifier-char-function<<
    m ".lisp" modes set-at
    m ".el" modes set-at
    m instance! ;

initialize-lisp-mode
