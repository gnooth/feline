// Copyright (C) 2017-2019 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline ;
in: editor

empty

"feral-loader.feline" load

using: feral-core feline accessors ;
in: editor

: safe-call-symbol                      // symbol ->
    [ call-symbol ]
    [
        last-error string? [
            last-error
            [ feral-config:termui? [ print ] unless ]
            [ mini:message ]
            [ logging:log ]
            tri
        ] when
        [ print-backtrace ] logging:with-output-to-log
    ]
    recover ;

feral-config:winui? #if

: do-command ( key )                    // key -> ?

    f !> command

    // try local map first
    current-buffer local-map>> :> local-map
    local-map [
        key local-map at command!
    ] when

    // global map
    command [
        key keymaps:lookup-key command!
    ] unless

    command [
        command dup current-command! safe-call-symbol
        t
    ] [
        f
    ] if ;

: dispatch                              // key -> void
    1 ?enough :> key

    current-command last-command!
    f current-command!

    key do-command [
        key printable-char? [ insert-char ] when*
    ] unless ;

: winui-textview-char                   // char -> void
    current-command last-command!
    dispatch
    update-display ;

: winui-textview-keydown ( key )        // key -> void
    current-command last-command!
    mini:clear-message
    f !> command

    // try local map first
    current-buffer local-map>> :> local-map

    local-map [
        key local-map at command!
    ] when

    // global map
    command [
        key keymaps:lookup-key command!
    ] unless

    command [
        command dup current-command! safe-call-symbol
        update-display
    ] when ;

: mouse-select ( col row )
    mark null? [
        add-undo-move
        dot copy-position mark!
        top-line-number row + nth-line dot-line!
        col dot-line-length min dot-offset!
        t repaint!
        update-display
    ] when ;

: winui-textview-lbuttondown ( wparam lparam ) // wparam lparam -> void

    mini:clear-message

    lparam 0xffff bitand winui-char-width /i :> x
    lparam 16 rshift 0xffff bitand winui-char-height /i :> y

    wparam {

        // MK_LBUTTON = 0x01 left mouse button is down
        { 0x01 [
            add-undo-move
            unmark
            top-line-number y + last-line-number min nth-line dot-line!
            x dot-line-length min dot-offset!
            update-display
        ] }

        // MK_SHIFT = 0x04 shift key is down
        // 0x05 = MK_LBUTTON | MK_SHIFT
        { 0x05 [ x y mouse-select ] }

        // default case
        [ drop ]
    } case ;

: edit1
    [
        winui-initialize
        winui-create-frame
        reframe
        t repaint!
        update-display
        winui-main
    ] make-thread thread-create ;

#endif

feral-config:gtkui? #if

: gtkui-textview-keydown ( key )        // key -> void
//     "gtkui-textview-keydown called key = " write key hex. nl

    current-command last-command!
    f current-command!

    mini:clear-message
    f !> command

    // try local map first
    current-buffer local-map>> :> local-map

    local-map [
        key local-map at command!
    ] when

    // global map
    command [
        key keymaps:lookup-key command!
    ] unless

//     "command = " write command .

    command [
        command dup current-command! safe-call-symbol
//         update-display
    ] [
//         "key = " write-string key hex. nl
//         key code-char printable-char? [ insert-char ] when*

--         key code-char printable-char? [
--             insert-char
--         ] [
--             key 16 rshift 4 eq? [ // shift is only modifier
--                 key 0xff bitand code-char printable-char? [
--                     insert-char
--                 ] when*
--             ] when
--         ] if*

        key feral-key:key-to-printable-char [ insert-char ] when*
    ] if
    update-display
;

: edit1
//     "edit1 called" print
    gtkui-initialize
    reframe
    t repaint!
    update-display
;

#endif

feral-config:termui? #if

: do-mouse                              // key -> ?
    dup fixnum? not [ drop f ] return-if

    :> keycode
    f !> column f !> row f !> result

    keycode 24 rshift 0x1b5b4d = [
        // "\e[M"
        keycode 0xff bitand 32 - row!
        keycode 0xff00 bitand 8 rshift 32 - column!
        keycode 0xff0000 bitand 16 rshift 3 bitand zero? [
            // left button pressed
            top-line-number row + gotoline-internal
            column 1- 0 max dot-line-length min dot-offset!
            t result!
        ] when
    ] when

    result ;

: do-command ( key )                    // key -> ?

    f !> command

    // try local map first
    current-buffer local-map>> :> local-map
    local-map [
        key local-map at command!
    ] when

    // global map
    command [
        key keymaps:lookup-key command!
    ] unless

    command [
        command dup current-command! safe-call-symbol
        t
    ] [
        linux? [ key do-mouse ] [ f ] if
    ] if ;

: dispatch                              // key -> void
    1 ?enough :> key

    current-command last-command!
    f current-command!

    key do-command [
        key printable-char? [ insert-char ] when*
    ] unless ;

: edit-loop
    f done?!
    [ done? ] [
        update-display
        ekey
        mini:clear-message
        dispatch
    ] until

    // clean up
    f current-buffer!
    f buffer-list!
    gc
;

: edit1
    use-alternate-screen-buffer

    page
    normal
    maybe-reframe
    t repaint?!

    linux? [
        // enable mouse tracking
        "\e[?1000h" write-string-escaped
    ] when

    edit-loop

    clear-status-line
    mini:clear-message
    0 textview-rows at-xy
    show-cursor

    use-default-screen-buffer ;

: ed
    use-alternate-screen-buffer
    page
    normal
    t repaint?!
    edit-loop
    clear-status-line
    mini:clear-message
    0 textview-rows at-xy
    show-cursor
    use-default-screen-buffer ;

#endif

using: editor feral-core feline ;
in: editor

: initialize-editor
    16 <vector> buffer-list!
    keymaps:initialize-keymaps ;

: edit-file ( name )                    // name -> void
    name find-file-to-edit [
        initialize-editor
        1 create-buffer/2
        edit1
    ] [
        name error-file-not-found
    ] if* ;

: edit-definition                       // symbol ->
    symbol-location 2dup and
    [
        initialize-editor
        create-buffer/2
        edit1
    ] [
        2drop
    ] if ;

: edit-home
    initialize-editor
    user-home directory-mode:open-directory
    edit1 ;

: edit
    parse-token [
        find-name [ edit-definition ] [ edit-file ] if
    ] [
        edit-home
    ] if* ;
