// Copyright (C) 2017-2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline ;
in: editor

empty

feline-home "feral" path-append "feral-loader.feline" path-append load

using: feral-core feline accessors ;
in: editor

: safe-call-symbol                      // symbol ->
    [ call-symbol ] [
        last-error string? [
            last-error
            [ feral-config:termui? [ print ] unless ]
            [ message ]
            [ logging:log ]
            tri
        ] when
        [ print-backtrace ] logging:with-output-to-log
    ] recover ;

feral-config:winui? #if

: do-command ( key )                    // key -> ?

    local command

    // try local map first
    current-buffer local-map>> :> local-map
    local-map [ key local-map at command! ] when

    // global map
    command [ key keymaps:lookup-key command! ] unless

    command [ command dup current-command! safe-call-symbol true ] [ nil ] if ;

: dispatch                              // key -> void
    1 ?enough :> key

    current-command last-command!
    nil current-command!

    key do-command [
        key printable-char? [ insert-char ] when*
    ] unless ;

: winui-textview-char                   // char -> void
    current-command last-command!
    dispatch
    update-display ;

: winui-textview-keydown ( key )        // key -> void
    current-command last-command!
    mini:clear-message

    local command

    // try transient map first
    transient-map [
        key swap at command!
        nil transient-map!
    ] when*

    // local map
    command [
        current-buffer local-map>> [
            key swap at command!
        ] when*
    ] unless

    // global map
    command [
        key keymaps:lookup-key command!
    ] unless

    command [
        command dup current-command! safe-call-symbol
        update-display
    ] when ;

: mouse-select ( col row )
    mark [
        add-undo-move
        copy-dot mark!
        top-line-number row + last-line-number min nth-line dot-line!
        dot-line col line-column-offset dot-line-length min dot-offset!
        true repaint?!
        update-display
    ] unless ;

: winui-textview-lbuttondown ( wparam lparam ) // wparam lparam -> void
    clear-message

    lparam 0xffff bitand :> x
    x textview-char-width 2/ + textview-char-width /i :> col
    lparam 16 rshift 0xffff bitand textview-char-height /i :> row

    local olddotline

    wparam {
        {
            // MK_LBUTTON = 0x01 left mouse button is down
            0x01
            [
                current-buffer minibuffer? [
                    // minibuffer has focus
                    // cancel and return to textview
                    current-buffer parent>> current-buffer!
                    mini:minibuffer-cancel
                    true repaint?!
                ] when

                dot-line olddotline!
                add-undo-move
                unmark
                top-line-number row + last-line-number min nth-line dot-line!
                dot-line col line-column-offset dot-line-length min dot-offset!
                dot-line olddotline eq? [ dot-line line-changed ] [ true repaint?! ] if
                update-display
            ]
        }

        {
            // MK_SHIFT = 0x04 shift key is down
            // 0x05 = MK_LBUTTON | MK_SHIFT
            0x05
            [ col row mouse-select ]
        }

        // default case
        [ drop ]
    } case ;

: winui-textview-mousemove ( wparam lparam ) // wparam lparam -> void
    lparam 0xffff bitand :> x

    x textview-char-width 2/ + textview-char-width /i :> col
    lparam 16 rshift 0xffff bitand textview-char-height /i :> row

    top-line-number row + last-line-number min nth-line :> newline
    dot-line col line-column-offset dot-line-length min :> newoffset

    newline dot-line eq? newoffset dot-offset eq? and ?exit // no change

    mark [
        add-undo-move
        copy-dot mark!
    ] unless

    newline dot-line!
    newoffset dot-offset!

    true repaint?!
    update-display ;

: edit1-internal
    winui-initialize
    winui-create-frame

    feral-config:standalone? "(standalone) " "" ?
    feline:version-string
    "Feral %s[%s]" format frame-set-text

    reframe
    true repaint?!
    update-display
    winui-main ;

: edit1
    feral-config:standalone? [
        edit1-internal
    ] [
        [ edit1-internal ] make-thread thread-create
    ] if ;

#endif

feral-config:gtkui? #if

: gtkui-textview-keydown ( key )        // key -> void

    current-command last-command!
    nil current-command!

    mini:clear-message
    local command

    // try transient map first
    transient-map [
        key swap at command!
        nil transient-map!
    ] when*

    // local map
    command [
        current-buffer local-map>> [
            key swap at command!
        ] when*
    ] unless

    // local map might bind a printable character
    // e.g. 'u' and '^' in directory mode
    command [
        key feral-key:key-to-printable-char [
            current-buffer local-map>> [ at command! ] when*
        ] when*
    ] unless

    // global map
    command [ key keymaps:lookup-key command! ] unless

    command [
        dup current-command! safe-call-symbol
    ] [
        key feral-key:key-to-printable-char [ insert-char ] when*
    ] if*

    update-display ;

: gtkui-textview-button-press
    2 ?enough :> y :> x

    x textview-char-width /i :> column
    y textview-char-height /i :> row

    current-buffer minibuffer? [
        // minibuffer has focus
        // cancel and return to textview
        current-buffer parent>> current-buffer!
        mini:minibuffer-cancel
        gtkui-minibuffer-invalidate
    ] when

    row dot-row eq? column dot-column eq? and [
        add-undo-move
        unmark
    ] unless

    top-line-number row + last-line-number min nth-line dot-line!
    dot-line column line-column-offset dot-line-length min dot-offset!
    update-display
    gtkui-textview-invalidate ;

: gtkui-textview-mousemove ( x y )
    x textview-char-width 2/ + textview-char-width /i :> col
    y textview-char-height /i :> row

    top-line-number row + last-line-number min nth-line :> newline
    dot-line col line-column-offset dot-line-length min :> newoffset

    newline dot-line eq? newoffset dot-offset eq? and ?exit // no change

    mark [
        add-undo-move
        copy-dot mark!
    ] unless

    newline dot-line!
    newoffset dot-offset!

    true repaint?!
    update-display
    gtkui-textview-invalidate ;

: edit1
    gtkui-initialize

    feral-config:standalone? "(standalone) " "" ?
    feline:version-string
    "Feral %s[%s]" format frame-set-text

    reframe
    true repaint?!
    update-display
    gtkui-main ;

#endif

feral-config:termui? #if

: do-mouse                              // key -> ?
    dup fixnum? not [ drop nil ] ?return

    :> keycode

    local column
    local row
    local result

    keycode 24 rshift 0x1b5b4d = [
        // "\e[M"
        keycode 0xff bitand 32 - row!
        keycode 0xff00 bitand 8 rshift 32 - column!
        keycode 0xff0000 bitand 16 rshift 3 bitand zero? [
            // left button pressed
            top-line-number row + gotoline-internal
            column 1- 0 max dot-line-length min dot-offset!
            true result!
        ] when
    ] when

    result ;

: do-command ( key )                    // key -> ?

    local command

    // try local map first
    current-buffer local-map>> :> local-map
    local-map [ key local-map at command! ] when

    // global map
    command [ key keymaps:lookup-key command! ] unless

    command [
        command dup current-command! safe-call-symbol
        true
    ] [
        linux? [ key do-mouse ] [ nil ] if
    ] if ;

: dispatch                              // key -> void
    1 ?enough :> key

    current-command last-command!
    nil current-command!

    key do-command [
        key printable-char? [ insert-char ] when*
    ] unless ;

: edit-loop
    nil done?!
    [ done? ] [
        update-display
        ekey
        mini:clear-message
        dispatch
    ] until

    // clean up
    nil current-buffer!
    nil buffer-list!
    gc ;

: edit1
    use-alternate-screen-buffer

    page
    normal
    maybe-reframe
    true repaint?!

    linux? [
        // enable mouse tracking
        "\e[?1000h" write-string-escaped
    ] when

    edit-loop

    clear-status-line
    mini:clear-message
    0 textview-rows at-xy
    show-cursor

    use-default-screen-buffer ;

: ed
    use-alternate-screen-buffer
    page
    normal
    true repaint?!
    edit-loop
    clear-status-line
    mini:clear-message
    0 textview-rows at-xy
    show-cursor
    use-default-screen-buffer ;

#endif

using: editor feral-core feline ;
in: editor

: initialize-editor
    16 make-vector buffer-list!
    keymaps:initialize-keymaps ;

: edit-file/2                           // line-number string -> void
    tilde-expand-filename :> name
    :> line-number

    initialize-editor

    name directory? [
        name directory-mode:open-directory
        line-number gotoline-internal
        edit1
    ] ?return

    name find-file-to-edit
    [
        line-number create-buffer/2
    ] [
        name canonical-path create-buffer-for-new-file
        "New file" message
    ] if*

    edit1 ;

: edit-file                             // string -> void
    1 swap edit-file/2 ;

: edit-definition                       // symbol ->
    symbol-location 2dup and
    [
        initialize-editor
        create-buffer/2
        edit1
    ] [
        2drop
    ] if ;

: edit-current-directory
    initialize-editor
    get-current-directory directory-mode:open-directory
    edit1 ;

: edit
    parse-token [
        find-name [ edit-definition ] [ edit-file ] if
    ] [
        edit-current-directory
    ] if* ;
