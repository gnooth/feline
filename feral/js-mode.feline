// Copyright (C) 2019-2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feral-core modes feline accessors segments feral-colors ;
in: js-mode

private

{
    "break"
    "catch"
    "case"
    "class"
    "const"
    "continue"
    "debugger"
    "default"
    "delete"
    "do"
    "else"
    "export"
    "extends"
    "finally"
    "for"
    "function"
    "if"
    "import"
    "in"
    "instanceof"
    "let"
    "new"
    "return"
    "super"
    "switch"
    "this"
    "throw"
    "try"
    "typeof"
    "var"
    "void"
    "while"
    "with"
    "yield"
} constant syntax-words                 // ECMAScript 6 (2015)

global instance

: get-instance                          // void -> mode
    instance ;

: js-mode-identifier-char? ( x )        // x -> ?
// REVIEW first char must be letter, '_' or '$'
    [ x alphanumeric? ] [ x '_' eq? x '$' eq? or ] either? ;

: parse-quoted-string ( quote-char iter ) // string-iterator -> segment
    iter string-iterator-index :> start
    local char
    [
        iter string-iterator-next char!
        char dup quote-char neq? and
    ] loop
    // reached end
    char [
        char quote-char assert-eq
        1 iter string-iterator-skip
        iter string-iterator-index
    ] [
        iter string-iterator-string string-length
    ] if :> end

    start end iter string-iterator-string substring
    start color-string make-segment/3 ;

: parse-line-comment ( iter )           // string-iterator -> segment
    iter string-iterator-index !> start
    start 0? [
        iter string-iterator-string 0 color-comment make-segment/3
    ] [
        start
        iter string-iterator-string string-length
        iter string-iterator-string substring
        start color-comment make-segment/3
    ] if ;

global last-token

: parse-identifier ( iter )             // string-iterator -> segment
    iter string-iterator-index :> start

    local char

    [
        iter string-iterator-next char!
        [ char char? ] [ char identifier-char? ] both?
    ] loop

    // reached end of identifier
    iter string-iterator-index :> end
    start end iter string-iterator-string substring :> identifier

    {
        { [ last-token "function" = ] [ color-name ] }
        { [ identifier syntax-words member? ] [ color-syntax ] }
        [
            // default
            color-text
        ]
    } cond :> format

    identifier last-token!

    // REVIEW
    char '(' eq? [
        identifier "function" = [ "(" last-token! ] when
    ] when

    identifier start format make-segment/3 ;

: js-mode-format-line ( line )        // line -> segments
    line text>> detab :> text
    text make-string-iterator :> iter
    line state>> !> state
    100 make-vector :> v
    0 !> start

    local char
    local end

    nil last-token!

    [
        iter string-iterator-next char!
        char
    ] [
        state match {
            :neutral => [
                char match {
                    '"' =>  [
                        iter string-iterator-index end!
                        start end iter string-iterator-string substring
                        start color-text make-segment/3 v push
                        char iter parse-quoted-string v push
                        iter string-iterator-index start!
                    ]
                    '\'' =>  [
                        iter string-iterator-index end!
                        start end iter string-iterator-string substring
                        start color-text make-segment/3 v push
                        char iter parse-quoted-string v push
                        iter string-iterator-index start!
                    ]
                    '/' => [
                        iter string-iterator-peek '/' eq? [
                            iter string-iterator-index start > [
                                iter string-iterator-index end!
                                start end iter string-iterator-string substring
                                start color-text make-segment/3 v push
                            ] when
                            iter parse-line-comment v push
                            iter string-iterator-skip-to-end
                            iter string-iterator-index start!
                        ] [
                            iter string-iterator-peek '*' eq? [
                                iter string-iterator-index start > [
                                    iter string-iterator-index end!
                                    start end iter string-iterator-string substring
                                    start color-text make-segment/3 v push
                                ] when
                                :block-comment state!
                            ] when
                        ] if
                    ]
                    '(' => [
                        "(" last-token!
                    ]
                    _ => [
                        char identifier-char? [
                            iter string-iterator-index end!
                            start end iter string-iterator-string substring
                            start color-text make-segment/3 v push
                            iter parse-identifier v push
                            iter string-iterator-index start!
                        ] when
                    ]
                }
            ]
            :block-comment => [
                char iter c-mode:scan-block-comment state!
                state :neutral eq? [
                    start iter string-iterator-index text substring
                    start color-comment make-segment/3 v push
                    iter string-iterator-index start!
                ] when
            ]
            _ => [ ]
        }
    ] while

    iter string-iterator-string length end!
    start end < [
        start end iter string-iterator-string substring
        start
        state { :block-comment :line-comment } member-eq? [ color-comment ] [ color-text ] if
        make-segment/3 v push
    ] when

    v ;

: line-is-definition? ( line )
    line text>> string-trim-head :> s
    '\s' s string-index :> end
    end nil? [ nil ] ?return
    0 end s string-substring {
        "function"
    } member? ;

: js-mode-list-symbols
    ' js-mode:line-is-definition? list-symbols:list-symbols ;

global js-mode-local-map

feral-config:winui? feral-config:gtkui? or #if

: initialize-local-map
    128 <hashtable> :> m
    ' js-mode-list-symbols feral-key:ctrl-shift-o m set-at
    m js-mode-local-map! ;

initialize-local-map

#endif

: js-mode-initialize-buffer            // buffer -> void
    1 ?enough :> buf
    js-mode-local-map buf local-map<<
    instance indent-size>> buf indent-size<< ;

: initialize-js-mode
    mode make-instance :> m
    "JavaScript" m name<<
    8 m indent-size<<
    "// " m comment-start<<
    ' js-mode-format-line m  format-line-function<<
    ' js-mode-initialize-buffer m initialize-buffer-function<<
    ' js-mode-identifier-char? m identifier-char-function<<

    // REVIEW c-mode
    ' c-mode:scan-buffer m scan-buffer-function<<

    m ".js" modes set-at
    m instance! ;

initialize-js-mode
