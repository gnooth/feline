-- Copyright (C) 2018 Peter Graves <gnooth@gmail.com>

-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.

-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: modes ansi-color feline ;
in: feline-mode

private

128 128   0 rgb-foreground-prefix constant comment-prefix
192 192 192 rgb-foreground-prefix constant text-prefix
  0 255 255 rgb-foreground-prefix constant syntax-prefix
255 165   0 rgb-foreground-prefix constant name-prefix
  0 170   0 rgb-foreground-prefix constant string-prefix
255   0 255 rgb-foreground-prefix constant combinator-prefix

"\e[0m" constant reset-suffix

tuple: segment
    text
    start
    format
;

: make-segment ( text start )
    segment make-instance :> segment
    text segment segment-text!
    start segment segment-start!
    segment
;

32 code-char constant space-char
34 code-char constant quote-char

: non-blank?                            -- string -> ?
    1 ?enough
    verify-string
    [ space-char neq? ] find drop ;

: skip-quoted-string                    -- start-index string -> index/f
    2dup string-length >= [ 2drop f ] return-if

    :> s
    :> start

    s start 1+ string-tail <string-iterator> :> iter

    f :> this-char!
    this-char :> last-char!
    f :> done?!

    [
        this-char last-char!
        iter string-iterator-next this-char!
        this-char [ t done?! ] unless
        done?
    ] [
        this-char '\x22' eq? [
            last-char '\' neq? [
                t done?!
            ] when
        ] when
    ] until

    start 1+ iter string-iterator-index +
;

: string>segments ( s )                 -- string -> segments
    s string-length :> len
    0 :> start!
    0 :> end!
    16 <vector> :> v
    f :> c!

    [ end len fixnum-fixnum< ] [
        start s string-nth c!
        {
            { [ c space-char eq? ] [ start s string-skip-whitespace len or end! ] }
            { [ c quote-char eq? ] [ start s skip-quoted-string len or end! ] }
            [ start s string-skip-to-whitespace len or end! ]
        } cond
        start end s string-substring start make-segment v vector-push
        end start!
    ] while

    v
;

{
    "var"
    "using:"
    "in:"
    ":"
    ";"
    "constant"
    "tuple:"
    ":>"
    "global"
    "t"
    "f"
    "test:"
    "public"
    "private"
    "["
    "]"
    "{"
    "}"
} constant syntax-words

{
    "var"
    ":"
    "test:"
    "constant"
    "tuple:"
    "global"
} constant defining-words

{
    "bi"
    "bi@"
    "case"
    "cond"
    "each"
    "each-index"
    "each-integer"
    "filter"
    "find"
    "find-from"
    "if"
    "if*"
    "keep"
    "return-if"
    "times"
    "tri"
    "unless"
    "unless*"
    "until"
    "when"
    "when*"
    "while"
} constant combinators

var in-comment?

var last-segment-text

: format-segment ( segment )
    in-comment? [
        segment segment-text "--" string-equal? in-comment?!
    ] unless

    in-comment? [
        comment-prefix segment segment-format!
    ] return-if

    -- not a comment
    segment segment-text syntax-words member? [
        syntax-prefix segment segment-format!
    ] return-if

    last-segment-text defining-words member? [
        name-prefix segment segment-format!
    ] return-if

    segment segment-text string-first-char quote-char eq? [
        string-prefix segment segment-format!
    ] return-if

    segment segment-text combinators member? [
        combinator-prefix segment segment-format!
    ] return-if

    -- default
    text-prefix segment segment-format!
;

: format-segments ( segments )
    f in-comment?!
    "" last-segment-text!
    segments [
        dup format-segment
        segment-text dup non-blank? [ last-segment-text! ] [ drop ] if
    ] each
;

: segments>string ( seq )               -- segments -> string
    256 <sbuf> :> sb
    seq [
        dup
        segment-format sb sbuf-append-string
        segment-text sb sbuf-append-string
    ] each
    reset-suffix sb sbuf-append-string
    sb sbuf>string
;

: feline-format-line
    string>segments                     -- -> vector
    [ format-segments ] [ segments>string ] bi
;

public

: initialize-feline-mode
    mode make-instance :> m
    ' feline-format-line m mode-formatter!
    m feline-extension modes set-at
;
