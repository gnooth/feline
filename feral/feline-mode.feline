// Copyright (C) 2018-2019 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feral-core feline accessors segments modes feral-colors ;
in: feline-mode

private

global instance

: get-instance                          // void -> mode
    instance ;

: feline-mode-identifier-char?          // char -> ?
    '\s' neq? ;

"// " constant feline-mode-comment-start

feline-mode-comment-start length constant comment-start-length

: feline-mode-toggle-line-comment
    dot-line-text :> text
    text indentation-string :> indentation-string
    indentation-string length :> indentation-length
    indentation-length text tail :> content

    editor:add-undo-line-edit

    feline-mode-comment-start content head? [
        // uncomment
        indentation-string
        comment-start-length content tail +
        dot-line-text!
        {
            {
                [ dot-offset indentation-length comment-start-length + >= ]
                [ dot-offset comment-start-length - dot-offset! ]
            }
            {
                [ dot-offset indentation-length >= ]
                [ indentation-length dot-offset! ]
            }
            // dot-offset < indent-length
            [ ]
        } cond
    ] [
        // comment
        indentation-string
        feline-mode-comment-start +
        content +
        dot-line-text!
        dot-offset indentation-length >= [
            dot-offset comment-start-length + dot-offset!
        ] when
    ] if

    modified
    t dot-line-changed!
;

: feline-mode-expand-if
    mark ?exit
    "if" dot-line-head tail? not ?exit

    editor:add-undo-line-edit

    "if" length dot-line-head head*
    "[  ] [  ] if" +
    dot-line-tail +
    dot-line-text!

    t dot-line-changed! ;

: feline-mode-expand-when
    mark ?exit
    "when" dot-line-head tail? not ?exit

    editor:add-undo-line-edit

    "when" length dot-line-head head*
    "[  ] when" +
    dot-line-tail +
    dot-line-text!

    dot-offset 2 - dot-offset!
    t dot-line-changed! ;

: feline-mode-expand
    mark ?exit
    dot-offset zero? ?exit

    dot-offset :> old-dot-offset

    dot-offset 1- dot-offset!

    [ in-word? dot-offset zero? not and ] [
        dot-offset 1- dot-offset!
    ] while

    not-in-word? [ dot-offset 1+ dot-offset! ] when

    dot-offset old-dot-offset dot-line-text string-substring

    old-dot-offset dot-offset!

    {
        { "when" [ feline-mode-expand-when ] }
        { "if"   [ feline-mode-expand-if ]   }
        // default
        [ "No expansion for %S" format mini:message ]
    } case ;

{
    "!>"
    "'"
    "("
    ")"
    ":"
    ":>"
    ";"
    "=>"
    "["
    "]"
    "constant"
    "defer"
    "f"
    "generic"
    "global"
    "in:"
    "local"
    "method:"
    "private"
    "private:"
    "public"
    "public:"
    "special:"
    "symbol:"
    "syntax:"
    "t"
    "test:"
    "tuple:"
    "unuse:"
    "use:"
    "using:"
    "var"
    "vector{"
    "{"
    "}"
} constant syntax-words

{
    ":"
    "constant"
    "defer"
    "generic"
    "global"
    "method:"
    "private:"
    "public:"
    "syntax:"
    "test:"
    "tuple:"
    "var"
} constant defining-words

{
    "&&"
    "?"
    "?exit"
    "?return"
    "bi"
    "bi@"
    "both?"
    "case"
    "cleave"
    "cond"
    "each"
    "each-index"
    "each-integer"
    "either?"
    "filter"
    "find"
    "find-from"
    "find-last-from"
    "if"
    "if*"
    "keep"
    "loop"
    "return-if"
    "time"
    "times"
    "tri"
    "unless"
    "unless*"
    "until"
    "when"
    "when*"
    "while"
    "||"
} constant combinators

32 code-char constant space-char
34 code-char constant quote-char

: non-blank?                            // string -> ?
    1 ?enough
    verify-string
    [ space-char neq? ] find drop ;

: skip-quoted-string                    // start-index string -> index/f
    2dup string-length >= [ 2drop f ] ?return

    :> s
    :> start

    start 1+ s string-tail <string-iterator> :> iter

    f :> this-char!
    this-char :> last-char!
    f :> done?!

    [
        this-char last-char!
        iter string-iterator-next this-char!
        this-char [ t done?! ] unless
        done?
    ] [
        this-char '\x22' eq? [
            last-char '\' neq? [
                t done?!
            ] when
        ] when
    ] until

    start 1+ iter string-iterator-index +
;

: string-segments ( s ) // string -> segments
    s string-length :> len
    0 :> start!
    0 :> end!
    16 <vector> :> v
    f :> c!

    [ end len fixnum-fixnum< ] [
        start s string-nth c!
        {
            { [ c space-char eq? ] [ start s string-skip-whitespace len or end! ] }
            { [ c quote-char eq? ] [ start s skip-quoted-string len or end! ] }
            [ start s string-skip-to-whitespace len or end! ]
        } cond
        start end s string-substring start make-segment v vector-push
        end start!
    ] while

    v
;

var in-comment?

var last-segment-text

: format-segment ( segment )
    segment text>> :> s

    in-comment? [
        s { "--" "//" "///" } member? in-comment!
    ] unless

    in-comment? [
        color-comment segment format<<
    ] ?return

    // not a comment
    last-segment-text defining-words member? [
        color-name segment format<<
    ] ?return

    s syntax-words member? [
        color-syntax segment format<<
    ] ?return

    s string-first-char :> first-char

    first-char quote-char eq? [
        color-string segment format<<
    ] ?return

    s combinators member? [
        color-combinator segment format<<
    ] ?return

    s { "#if" "#else" "#endif" "#ifdef" "#ifndef" } member? [
        color-preprocessor segment format<<
    ] ?return

    first-char ':' eq? [
        color-keyword segment format<<
    ] ?return

    [ first-char '\'' eq? ] [ s string-last-char '\'' eq? ] both? [
        color-string segment format<<
    ] ?return

    // default
    color-text segment format<< ;

: format-segments ( segments )
    f in-comment!
    "" last-segment-text!
    segments [
        dup format-segment
        text>> dup non-blank? [ last-segment-text! ] [ drop ] if
    ] each
    segments ;

: feline-mode-format-line // string -> segments
    string-segments format-segments ;

: line-is-definition? ( line )
    ": " line text>> head?
    "global " line text>> head? or
;

: feline-mode-list-symbols
    make-buffer :> buf
    "symbols " current-buffer filename>> file-name-nondirectory + buf name<<

    first-line :> line!

    [ line ] [
        line line-is-definition? [
            line number>> 1+ line text>> "%d %s" format make-line/1
            buf top-line>> [ dup buf top-line<< ] unless
            buf editor:buffer-append-line
        ] when
        line next>> line!
    ] while

    buf top-line>> 0 make-position buf dot<<
    t buf read-only<<

    current-buffer buf parent<<
    current-buffer directory>> buf directory<<
    symbols-mode:get-instance buf mode<<
    buf mode>> initialize-buffer-function>> [ buf swap call ] when*

    buf buffer-list vector-push
    buf set-current-buffer

    renumber
    t repaint!
;

global feline-mode-local-map

feral-config:winui? feral-config:gtkui? or #if

use: feral-key

: initialize-local-map
    128 <hashtable> :> m
    ' feline-mode-toggle-line-comment   ctrl-/          m set-at
    ' feline-mode-expand                ctrl-space      m set-at
    ' feline-mode-list-symbols          ctrl-shift-o    m set-at
    m feline-mode-local-map! ;

initialize-local-map

unuse: feral-key

#endif

: feline-mode-initialize-buffer         // buffer -> void
    1 ?enough :> buf
    feline-mode-local-map buf local-map<<
    instance indent-size>> buf indent-size<< ;

: initialize-feline-mode
    mode make-instance :> m
    "Feline" m name<<
    4 m indent-size<<
    feline-mode-comment-start m comment-start<<
    ' feline-mode-initialize-buffer m initialize-buffer-function<<
    ' feline-mode-identifier-char? m identifier-char?-function<<
    ' feline-mode-format-line m formatter<<
    m feline-extension modes set-at
    m instance! ;

initialize-feline-mode
