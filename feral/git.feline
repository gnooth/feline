// Copyright (C) 2019-2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feral-core feline accessors directories mini diff-mode ;
in: editor

: git-diff
    current-buffer filename>> :> sourcefile
    sourcefile nil? ?exit
    get-current-directory :> olddir
    sourcefile file-name-directory set-current-directory drop // REVIEW drop
    "git diff " sourcefile + :> command
    command shell-command-to-string :> output
    olddir set-current-directory drop // REVIEW drop

    // shell-command-to-string might return nil
    output nil? ?exit

    local buf
    output length 0> [
        // reuse existing buffer if possible
        buffer-list [ command>> command = ] find // -> index/nil element/nil
        [
            nip buf!
        ] [
            drop make-buffer buf!
        ] if*

        output buf buffer-set-contents
        command buf command<<
        command buf name<<
        current-buffer directory>> buf directory<<
        true buf read-only<<
        buf first-line>> 0 make-position buf dot<<
        nil buf mark<<
        buf first-line>> buf top-line<<

        current-buffer buf parent<<
        diff-mode:get-instance buf mode<<
        buf mode>> initialize-buffer-function>> [ buf swap call ] when*

        buf listed? [ buf buffer-list vector-push ] unless
        buf set-current-buffer

        true repaint?!
    ] [
        "git ls-files " sourcefile + shell-command-to-string // -> string/nil
        [ length 0? "Untracked" "No changes" ? message ] when*
    ] if ;

global git-command

: git-misc
    current-buffer-directory nil? ?exit

    get-current-directory :> olddir
    current-buffer-directory set-current-directory drop
    execute-command-input-string :> command
    command shell-command-to-string :> output
    olddir set-current-directory drop

    // shell-command-to-string might return nil
    output nil? ?exit

    local buf
    output length 0> [
        // reuse existing buffer if possible
        buffer-list [ command>> command = ] find // -> index/nil element/nil
        [
            nip buf!
        ] [
            drop make-buffer buf!
        ] if*

        output buf buffer-set-contents
        command buf command<<
        command buf name<<
        current-buffer directory>> buf directory<<
        true buf read-only<<
        buf first-line>> 0 make-position buf dot<<
        nil buf mark<<
        buf first-line>> buf top-line<<

        current-buffer buf parent<<

        git-command { "diff" "show" } member? [
            diff-mode:get-instance buf mode<<
            buf mode>> initialize-buffer-function>> [ buf swap call ] when*
        ] when

        buf listed? [ buf buffer-list vector-push ] unless
        buf set-current-buffer

        true repaint?!
    ] when ;

: git
    nil git-command!

    execute-command-input-string <lexer> :> lexer
    lexer lexer-parse-token "git" string= assert
    lexer lexer-index execute-command-input-string string-tail :> git-command-and-options
    lexer lexer-parse-token git-command!
    lexer lexer-skip-blank drop
    lexer lexer-index execute-command-input-string string-tail :> git-options

    git-command "diff" equal? git-options empty? and [ git-diff ] ?return

    git-misc ;
