// Copyright (C) 2019-2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feral-core feline accessors directories mini diff-mode ;
in: editor

private

: current-buffer-repository // void -> string/nil
    current-buffer-directory !> dir
    dir nil? [ nil ] ?return

    local repo

    [ dir repo nil? and ]
    [
        dir ".git" path-append dir? [ repo! ] when*
        repo [ dir file-name-directory dir! ] unless
    ] while

    repo ;

: git-diff-no-output ( sourcefile )
    sourcefile
    [
        "git ls-files " sourcefile + shell-command-to-string // -> string/nil
        [ length 0? "Untracked" "No changes" ? message ] when*
    ]
    [
        "No output" message
    ] if ;

: git-find-file ( name )

    name file? [
        name canonical-path
    ] ?return

    name file-name-absolute? [
        name
    ] ?return

    local old-dir
    local output
    local found

    current-buffer-repository [
        // -> repo
        get-current-directory old-dir!
        file-name-directory set-current-directory drop

        "git ls-files --full-name" shell-command-to-string [
            // -> output
            string-lines [
                // -> string
                name swap string-has-suffix?
            ] find
            // -> index/nil element/nil
            nip found!
        ] when*

        old-dir set-current-directory drop
    ] when*

    found [
        current-buffer-repository
        file-name-directory
        swap path-append
        canonical-path
    ] [ nil ] if* ;

: git-diff
    execute-command-input-string tokenize :> tokens

    tokens first "git" assert=
    tokens second "diff" assert=

    2 tokens [ '-' swap string-first-char neq? ] find-from nip :> name

    name git-find-file name or :> sourcefile

    get-current-directory :> old-dir

    // change to directory containing sourcefile
    sourcefile file-name-directory set-current-directory drop

    execute-command-input-string :> command

    // execute the command
    command shell-command-to-string :> output

    old-dir [ set-current-directory drop ] when*

    // shell-command-to-string might return nil
    output nil? [ "No output" message ] ?return

    local buf

    output length 0> [
        // reuse existing buffer if possible
        buffer-list [ command>> command = ] find // -> index/nil element/nil
        [
            nip buf!
        ] [
            drop make-buffer buf!
        ] if*

        output buf buffer-set-contents
        command buf command<<
        command buf name<<
        current-buffer directory>> buf directory<<
        true buf read-only<<
        buf first-line>> 0 make-position buf dot<<
        nil buf mark<<
        buf first-line>> buf top-line<<

        current-buffer buf parent<<
        diff-mode:get-instance buf mode<<
        buf mode>> initialize-buffer-function>> [ buf swap call ] when*

        buf listed? [ buf buffer-list vector-push ] unless
        buf set-current-buffer

        true repaint?!
    ] [
        sourcefile git-diff-no-output
    ] if ;

global git-command

: git-misc
    current-buffer-directory nil? ?exit

    get-current-directory :> olddir
    current-buffer-directory set-current-directory drop

    // execute the command
    execute-command-input-string :> command
    command shell-command-to-string :> output

    olddir set-current-directory drop

    // shell-command-to-string might return nil
    output nil? ?exit

    local buf
    output length 0> [
        // reuse existing buffer if possible
        buffer-list [ command>> command = ] find // -> index/nil element/nil
        [
            nip buf!
        ] [
            drop make-buffer buf!
        ] if*

        output buf buffer-set-contents
        command buf command<<
        command buf name<<
        current-buffer directory>> buf directory<<
        true buf read-only<<
        buf first-line>> 0 make-position buf dot<<
        nil buf mark<<
        buf first-line>> buf top-line<<

        current-buffer buf parent<<

        git-command { "show" } equal? [
            diff-mode:get-instance buf mode<<
            buf mode>> initialize-buffer-function>> [ buf swap call ] when*
        ] when

        buf listed? [ buf buffer-list vector-push ] unless
        buf set-current-buffer

        true repaint?!
    ] [
        // zero length output
        "No output" message
    ] if ;

public

: git
    nil git-command!

    execute-command-input-string <lexer> :> lexer

    // first token is "git"
    lexer lexer-parse-token "git" string=? assert

    // second token is git command (e.g. "diff")
    lexer lexer-parse-token git-command!

    git-command "diff" equal? [ git-diff ] [ git-misc ] if ;
