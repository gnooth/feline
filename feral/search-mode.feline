// Copyright (C) 2019-2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline accessors feral-core segments feral-colors ;
in: search-mode

private

global instance

use: regex

: search-mode-format-line ( line )      // line -> segments

    :search current-buffer buffer-get-property :> search
    search nil? ?exit

    search pattern>> :> pattern

    line text>> detab :> text

    16 make-vector :> v

    :search-results-header line line-get-property [
        ": " text substring-start !> n
        n [
            n 2 &+ n!
            n text string-head 0 color-header make-segment/3 v push
            n text string-tail n color-text make-segment/3 v push
        ] [
            text 0 color-header make-segment/3 v push
        ] if
        v
    ] ?return

    [ :source-file line line-get-property ]
    [ :source-line-number line line-get-property nil? ] both?
    [ text 0 color-filename make-segment/3 v push v ] ?return

    0 !> i

    local j
    local k

    ':' text string-index [
        1+ i! // include ':' in segment
        0 i text substring 0 color-linenumber make-segment/3 v push
    ] when*

    search regex>> [
        [
            pattern text i
            find-regex-from             // -> index1/nil index2/nil
            k! j!
            j
        ] [
            i j text substring i color-text make-segment/3 v push
            j k text substring j color-name make-segment/3 v push
            k i!
        ] while
    ] [
        [
            pattern text i
            search whole-words-only>> [ find-word-from ] [ find-substring-from ] if
            dup j!
        ] [
            i j text substring i color-text make-segment/3 v push
            j dup pattern length + text substring j color-name make-segment/3 v push
            j pattern length + i!
        ] while
    ] if

    i text length < [
        i text length text substring i color-text make-segment/3 v push
    ] when

    v ;

unuse: regex

: search-mode-goto-source
    :search current-buffer buffer-get-property :> search

    :source-line-number dot-line line-get-property :> linenumber
    :source-offset dot-line line-get-property :> offset

    editor:switch-to-parent-buffer
    linenumber editor:goto-line-internal

    offset [
        offset dot-offset!
        search [
            dot-line
            dot-offset search pattern>> length +
            make-position mark!

            // put dot after mark
            dot mark dot! mark!
        ] when
    ] when

    true repaint?! ;

global search-mode-local-map

: initialize-local-map
    128 <hashtable> :> m
    ' editor:kill-buffer feral-key:escape m set-at
    ' search-mode-goto-source feral-key:enter m set-at
    m search-mode-local-map! ;

initialize-local-map

feral-config:winui? #if
' search-mode-goto-source feral-key:double-mouse-1 search-mode-local-map set-at
#endif

: search-mode-initialize-buffer         // buffer -> void
    1 ?enough :> buf
    search-mode-local-map buf local-map<< ;

: initialize-search-mode
    mode make-instance :> m
    "search" m name<<
    ' search-mode-initialize-buffer m initialize-buffer-function<<
    ' search-mode-format-line m format-line-function<<
    m instance! ;

initialize-search-mode

public

: get-instance                          // void -> mode
    instance ;
