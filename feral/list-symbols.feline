// Copyright (C) 2019-2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feral-core feline accessors ;
in: list-symbols

empty

: list-symbols                          // callable -> void
    1 ?enough verify-callable :> line-is-definition-function

    current-buffer filename>> :> filename
    filename nil? ?exit

    // reuse existing buffer if possible
    buffer-list [
        dup mode>> symbols-mode:get-instance eq?
        swap parent>> current-buffer eq? and
    ] find
    // -> index/nil element/nil
    [ nip dup editor:clear-buffer ] [ drop make-buffer ] if* :> buf

    filename file-name-nondirectory " [symbols]" + buf name<<

    last-line-number fixnum>string string-length :> line-number-width

    first-line !> source-line
    nil !> goal // put dot on this line in the [symbols] buffer

    [ source-line ] [
        source-line line-is-definition-function call [
            '\s' line-number-width source-line number>> 1+ fixnum>string pad-left
            symbols-mode:line-number-suffix +
            source-line text>> +
            make-line/1

            goal [
                source-line number>> dot-line-number > [
                    buf last-line>> goal!
                ] when
            ] unless

            buf buffer-append-line
        ] when
        source-line next>> source-line!
    ] while

    buf first-line>> nil? [ "No symbols" message ] ?return

    buf first-line>> buf top-line<<
    goal [ buf last-line>> goal! ] unless
    goal 0 make-position buf dot<<

    true buf read-only<<

    current-buffer buf parent<<
    current-buffer directory>> buf directory<<
    symbols-mode:get-instance buf mode<<
    buf mode>> initialize-buffer-function>> [ buf swap call ] when*

    buf listed? [ buf buffer-list vector-push ] unless
    buf set-current-buffer

    renumber
    maybe-reframe
    true repaint?! ;
