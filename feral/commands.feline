// Copyright (C) 2017-2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline accessors feral-core history mini ;
in: editor

: goto-line
    "Line number: " minibuffer-accept-string :> s
    s empty? [
        s string>number [ goto-line-internal ] when*
    ] unless ;

: find-file-to-edit-internal ( arg )    // arg -> path/nil
    arg nil? [ nil ] ?return
    arg file-name-absolute? [ arg canonical-path ] ?return
    arg canonical-path [ file? ] [ nil ] if* ;

: find-file-in-source-path ( arg )      // arg -> path/nil

    feral-config:source-path nil? [ nil ] ?return

    feral-config:source-path [ arg path-append file? ] map-find // -> result directory
    drop // -> result
    [ canonical-path ] [ nil ] if* ;

: find-file-to-edit ( arg )             // arg -> path/nil
    arg find-file-to-edit-internal !> file

    file [
        feral-config:standalone? [
            arg ensure-feline-extension find-file-to-edit-internal file!
        ] unless
    ] unless

    file [ arg find-file-in-source-path file! ] unless

    file ;

: create-buffer-for-new-file ( filename )
    make-buffer :> buf

    "" 0 make-line/2
    [ buf buffer-append-line ]
    [ 0 make-position buf dot<< ]
    bi

    buf dot>> line>> buf top-line<<

    filename buf filename<<
    filename file-name-nondirectory buf name<<
    filename file-name-directory buf directory<<
    filename file-name-extension [ modes:mode-from-extension buf mode<< ] when*

    buf mode>> mode? [
        buf mode>> initialize-buffer-function>> [ buf swap call ] when*
    ] when

    buf in-buffer-list? [ buf buffer-list vector-push ] unless
    buf set-current-buffer
    true repaint?!
    "New file" message ;

: open-file-get-completions             // string -> completion
    1 ?enough verify-string :> prefix

    prefix empty? [ nil ] ?return

    prefix file-name-directory get-current-directory or :> dir

    prefix file-name-nondirectory :> name

    local s
    dir directory-files [
        s! [ s string-last-char '~' neq? ] [ name s head? ] both?
    ] filter :> files

    files length 1 eq? [ dir files first path-append ] [ nil ] if ;

: open-file
    current-buffer-directory get-current-directory or
    file-name-as-directory :> default-directory

    "open-file" set-history
    ' open-file-get-completions mini:set-completion-provider
    "File: " default-directory minibuffer-accept-string/2 !> arg

    arg empty? ?exit

    arg tilde-expand-filename arg!

    arg directory? [ arg directory-mode:open-directory ] ?return

    arg find-file-to-edit :> filename

    local buf

    {
        {
            [ filename nil? ]
            [
                default-directory arg path-append canonical-path [
                    create-buffer-for-new-file
                ] when*
            ]
        }
        {
            [ filename find-buffer-from-file-name dup buf! ]
            [ buf set-current-buffer ]
        }
        {
            [ filename file? ]
            [ filename 1 create-buffer/2 ]
        }
        {
            [ filename feline-extension + file? ]
            [ filename feline-extension + 1 create-buffer/2 ]
        }
        // otherwise...
        [ arg canonical-path [ create-buffer-for-new-file ] when* ]
    } cond ;

: parse-command-line // string -> command
    dup execute-command-input-string! make-lexer lexer-parse-token ;

use: completion

: execute-command-provide-completion    // prefix -> string
    1 ?enough verify-string :> prefix

    prefix empty? [ nil ] ?return

    current-completion [ next-completion ] ?return

    current-buffer-filename !> filename

    filename [
        current-buffer parent>> [ filename>> filename! ] when*
    ] unless

    filename nil? [ nil ] ?return

    prefix
    dup last '\s' eq? [ " " + ] unless
    filename file-name-nondirectory + 1array :> strings

    prefix strings initialize-completion

    next-completion ;

: execute-command
    "command" set-history
    ' execute-command-provide-completion set-completion-provider
    "Command: " minibuffer-accept-string :> commandline

    commandline empty? ?exit

    commandline parse-command-line :> command

    command empty? ?exit

    command "feral-commands" lookup-symbol !> symbol

    symbol [ symbol call-symbol ] ?return

    command find-name [
        call-symbol
    ] [
        "%S is not a valid command name." format message
    ] if ;

unuse: completion

: shell-command
    "shell-command" set-history
    "Shell command: " minibuffer-accept-string :> command

    command empty? ?exit

    command shell-command-to-string !> s

    s empty? ?exit

    make-buffer :> buf

    s buf buffer-set-contents
    command buf command<<
    command buf name<<
    t buf read-only<<
    buf first-line>> 0 make-position buf dot<<
    nil buf mark<<
    buf first-line>> buf top-line<<

    buf buffer-list vector-push
    buf set-current-buffer

    t repaint?! ;

: escape
    mark [ unmark t repaint?! ] when ;
