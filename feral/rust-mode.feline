// Copyright (C) 2019-2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: modes feral-core feline accessors segments feral-colors ;
in: rust-mode

private

global instance

: get-instance // void -> mode
    instance ;

: parse-quoted-string ( iter )          // string-iterator -> segment
    iter string-iterator-index :> start
    local ch
    [
        iter string-iterator-next ch!
        ch dup '"' neq? and
    ] loop
    // reached end
    ch [
        ch '"' assert-eq
        1 iter string-iterator-skip
        iter string-iterator-index
    ] [
        iter string-iterator-string string-length
    ] if :> end

    start end iter string-iterator-string substring
    start color-string make-segment/3 ;

: parse-line-comment ( iter )           // string-iterator -> segment
    iter string-iterator-index !> start
    start 0? [
        iter string-iterator-string 0 color-comment make-segment/3
    ] [
        start
        iter string-iterator-string string-length
        iter string-iterator-string substring
        start color-comment make-segment/3
    ] if ;

: format-iter ( iter )
    100 <vector> :> v
    0 !> start

    local ch
    local end

    [
        iter string-iterator-next ch!
        ch
    ] [
        {
            {
                [ ch '"' eq? ]
                [
                    iter string-iterator-index end!
                    start end iter string-iterator-string substring
                    start color-text make-segment/3 v push
                    iter parse-quoted-string v push
                    iter string-iterator-index start!
                ]
            }

            {
                [ ch '/' eq? ]
                [
                    iter string-iterator-peek '/' eq? [
                        iter string-iterator-index start > [
                            iter string-iterator-index end!
                            start end iter string-iterator-string substring
                            start color-text make-segment/3 v push
                        ] when
                        iter parse-line-comment v push
                        iter string-iterator-skip-to-end
                        iter string-iterator-index start!
                    ] when
                ]
            }

            [
                // default
            ]
        } cond
    ] while

    iter string-iterator-string string-length end!
    start end < [
        start end iter string-iterator-string substring
        start color-text make-segment/3 v push
    ] when

    v ;

: rust-mode-format-line ( line )        // line -> vector-of-segments
    line text>> detab make-string-iterator format-iter ;

: line-is-definition? ( line )
    " fn " line text>> substring-start !> offset

    offset nil? [ nil ] ?return

    "//" line text>> substring-start [
        offset < [ nil offset! ] when
    ] when*

    offset ;

: rust-mode-list-symbols
    ' rust-mode:line-is-definition? list-symbols:list-symbols ;

global rust-mode-local-map

feral-config:winui? feral-config:gtkui? or #if

: initialize-local-map
    128 <hashtable> :> m
    ' rust-mode-list-symbols feral-key:ctrl-shift-o m set-at
    m rust-mode-local-map! ;

initialize-local-map

#endif

: rust-mode-initialize-buffer           // buffer -> void
    1 ?enough :> buf
    rust-mode-local-map buf local-map<<
    get-instance :> m
    m indent-size>> buf indent-size<< ;

: initialize-rust-mode
    mode make-instance :> m
    "Rust" m name<<
    4 m indent-size<<
    "// " m comment-start<<
    ' rust-mode-initialize-buffer m initialize-buffer-function<<
    ' rust-mode-format-line m format-line-function<<
    m ".rs" modes set-at
    m instance! ;

initialize-rust-mode
