// Copyright (C) 2019 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline accessors feral-core segments modes feral-colors ;
in: symbols-mode

private

global instance

: symbols-mode-format-line ( s ) // string -> segments

    16 <vector> :> v

    '\s' s index :> end
    0 end s substring 0 color-line-number make-segment/3 v push

    f !> comment-start

    current-buffer parent>> mode>> comment-start>> s substring-start [
        comment-start!
    ] when*

    comment-start [
        end comment-start s string-substring end color-text make-segment/3 v push
        comment-start s string-tail comment-start color-comment make-segment/3 v push
    ] [
        end s string-tail end color-text make-segment/3
        v push
    ] if

    v ;

: symbols-mode-goto-source
    dot-line-text :> s
    '\s' s index :> end
    end null? ?exit

    0 end s substring string>number :> line-number
    current-buffer parent>> set-current-buffer
    line-number editor:gotoline-internal
    t repaint!
;

global symbols-mode-local-map

: initialize-local-map
    128 <hashtable> :> m
    ' editor:kill-buffer key:escape m set-at
    ' symbols-mode-goto-source key:enter m set-at
    m symbols-mode-local-map! ;

initialize-local-map

feral-config:winui? #if

' symbols-mode-goto-source feral-key:double-mouse-1 symbols-mode-local-map set-at

#endif

: symbols-mode-initialize-buffer // buffer -> void
    1 ?enough :> buf
    symbols-mode-local-map buf local-map<< ;

: initialize-symbols-mode
    mode make-instance :> m
    "symbols" m name<<
    ' symbols-mode-initialize-buffer m initialize-buffer-function<<
    ' symbols-mode-format-line m formatter<<
    m instance! ;

initialize-symbols-mode

public

: get-instance                          // void -> mode
    instance ;
