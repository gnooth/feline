// Copyright (C) 2017-2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feral-core feline accessors segments ;
in: editor

feral-config:winui? assert-false

: update-caret-pos
    dot-column
    dot-line-number top-line-number -
    at-xy ;

use: ansi-color

constant: fg-default  192 192 192 rgb-foreground-prefix ;
constant: bg-default    0   0   0 rgb-background-prefix ;
constant: bg-selected  64  64  64 rgb-background-prefix ;

: normal esc[ "m" write-string-escaped ;

constant: fg-mode-line   0   0   0 rgb-foreground-prefix ;
constant: bg-mode-line 192 192 192 rgb-background-prefix ;

use: mini

: update-mode-line
    0 status-y at-xy

    fg-mode-line write-string-escaped
    bg-mode-line write-string-escaped

    mode-line-text write-string
    clear-to-eol

    fg-default write-string-escaped
    bg-default write-string-escaped ;

: clear-status-line 0 status-y at-xy clear-to-eol ;

: repaint-segment                       // segment -> void
    dup
    format>> [ write-string-escaped ] when*
    text>> write-string ;

: repaint-segment-of-line-containing-selection ( segment region )

    region begin-offset :> region-begin
    region end-offset :> region-end

    dot-line mark-line assert-eq

    region-begin segment start>> <
    segment start>> segment text>> length + region-end <= and [
        // segment is entirely within region
        bg-selected write-string-escaped
        segment repaint-segment
        bg-default write-string-escaped
    ] ?return

    local seg1
    local seg2

    region-begin segment in-segment? region-end segment in-segment? and [
        segment region-begin segment start>> - split-segment seg2! seg1!
        bg-default write-string-escaped
        seg1 repaint-segment

        // now split seg2 at region-end
        seg2 region-end seg2 start>> - split-segment
        swap
        bg-selected write-string-escaped
        repaint-segment
        bg-default write-string-escaped
        repaint-segment
    ] ?return

    region-begin segment in-segment? [
        segment region-begin segment start>> - split-segment seg2! seg1!
        bg-default write-string-escaped
        seg1 repaint-segment
        bg-selected write-string-escaped
        seg2 repaint-segment
        bg-default write-string-escaped
    ] ?return

    region-end segment in-segment? [
        segment region-end segment start>> - split-segment seg2! seg1!
        bg-selected write-string-escaped
        seg1 repaint-segment
        bg-default write-string-escaped
        seg2 repaint-segment
    ] ?return

    segment repaint-segment
;

: repaint-segments                      // segments -> void
    [ repaint-segment ] each ;

: repaint-selected-line ( line )        // line -> void
    line format-line :> segments
    bg-selected write-string-escaped
    segments repaint-segments
    terminal-columns segments detabbed-text-length - spaces
    bg-default write-string-escaped ;

: repaint-line-containing-selection ( line ) // line -> void
    line format-line :> segments
    mark dot make-region/2 :> region
    segments [ region repaint-segment-of-line-containing-selection ] each
    segments detabbed-text-length terminal-columns < [
        terminal-columns segments detabbed-text-length - spaces
    ] when ;

: repaint-line ( line )                 // line -> void
    line line-selected? [ line repaint-selected-line ] ?return

    line line-contains-selection? [
        line repaint-line-containing-selection
    ] ?return

    line format-line :> segments
    segments repaint-segments
    terminal-columns segments detabbed-text-length - spaces ;

: repaint
    top-line !> line
    0 !> y

    [ line y textview-rows < and ] [
        0 y at-xy
        line repaint-line
        y 1+ y! line next>> line!
    ] while

    [ y textview-rows < ] [
        0 y at-xy terminal-columns spaces
        y 1+ y!
    ] while

    clear-changed-lines

    nil repaint?! ;

: repaint-changed-lines
    top-line !> line
    0 !> row

    [ line row textview-rows < and ] [
        line changed-lines member-eq? [
            0 row at-xy
            line repaint-line
        ] when
        row 1+ row! line next>> line!
    ] while

    [ row textview-rows < ] [
        0 row at-xy terminal-columns spaces
        row 1+ row!
    ] while

    clear-changed-lines ;

: update-display
    hide-cursor
    repaint? [
        repaint
    ] [
        dot-line-changed? [
            dot-line line-changed
            nil dot-line-changed?!
        ] when
        repaint-changed-lines
    ] if
    update-mode-line
    update-caret-pos
    show-cursor ;
