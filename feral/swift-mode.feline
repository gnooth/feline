// Copyright (C) 2019-2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: modes feral-core feline accessors segments feral-colors ;
in: swift-mode

private

{
    // declarations
    "associatedtype" "class" "deinit" "enum" "extension" "fileprivate" "func"
    "import" "init" "inout" "internal" "let" "open" "operator" "private"
    "protocol" "public" "some" "static" "struct" "subscript" "typealias" "var"

    // statements
    "break" "case" "continue" "default" "defer" "do" "else" "fallthrough"
    "for" "guard" "if" "in" "repeat" "return" "switch" "where" "while"

    // expressions and types
    "as" "catch" "dynamicType" "is" "rethrows" "super" "self" "Self" "throws"
    "throw" "try"

    // context-sensitive keywords
    "Protocol" "Type" "and" "assignment" "associativity" "convenience" "didSet"
    "dynamic" "final" "get" "higherThan" "indirect" "infix" "lazy" "left"
    "lowerThan" "mutating" "none" "nonmutating" "optional" "override" "postfix"
    "precedence" "precedencegroup" "prefix" "required" "right" "set" "unowned"
    "weak" "willSet"
} constant syntax-words // swift-mode/swift-mode-font-lock.el

global instance

: get-instance // void -> mode
    instance ;

: parse-quoted-string ( iter )          // string-iterator -> segment
    iter string-iterator-index :> start
    local ch
    [
        iter string-iterator-next ch!
        ch dup '"' neq? and
    ] loop
    // reached end
    ch [
        ch '"' assert-eq
        1 iter string-iterator-skip
        iter string-iterator-index
    ] [
        iter string-iterator-string string-length
    ] if :> end

    start end iter string-iterator-string substring
    start color-string make-segment/3 ;

: parse-line-comment ( iter )           // string-iterator -> segment
    iter string-iterator-index !> start
    start 0? [
        iter string-iterator-string 0 color-comment make-segment/3
    ] [
        start
        iter string-iterator-string string-length
        iter string-iterator-string substring
        start color-comment make-segment/3
    ] if ;

global last-identifier

: parse-identifier ( iter )             // string-iterator -> segment
    iter string-iterator-index :> start

    local ch
    [
        iter string-iterator-next ch!
        [ ch char? ] [ ch identifier-char? ] both?
    ] loop
    // reached end of identifier
    iter string-iterator-index :> end
    start end iter string-iterator-string substring :> identifier

    {
        { [ last-identifier "func" = ] [ color-name ] }
        { [ identifier syntax-words member? ] [ color-syntax ] }
        { [ 0 identifier string-nth-unsafe char-upper-case? ] [ color-type ] }
        [
            // default
            color-text
        ]
    } cond :> format

    identifier last-identifier!

    identifier start format make-segment/3 ;

: format-iter ( iter )
    100 <vector> :> v
    0 !> start

    local ch
    local end

    nil last-identifier!

    [
        iter string-iterator-next ch!
        ch
    ] [
        {
            {
                [ ch '"' eq? ]
                [
                    iter string-iterator-index end!
                    start end iter string-iterator-string substring
                    start color-text make-segment/3 v push
                    iter parse-quoted-string v push
                    iter string-iterator-index start!
                ]
            }

            {
                [ ch '/' eq? ]
                [
                    iter string-iterator-peek '/' eq? [
                        iter string-iterator-index start > [
                            iter string-iterator-index end!
                            start end iter string-iterator-string substring
                            start color-text make-segment/3 v push
                        ] when
                        iter parse-line-comment v push
                        iter string-iterator-skip-to-end
                        iter string-iterator-index start!
                    ] when
                ]
            }

            {
                [ ch identifier-char? ]
                [
                    iter string-iterator-index end!
                    start end iter string-iterator-string substring
                    start color-text make-segment/3 v push
                    iter parse-identifier v push
                    iter string-iterator-index start!
                ]
            }

            [
                // default
            ]
        } cond
    ] while

    iter string-iterator-string string-length end!
    start end < [
        start end iter string-iterator-string substring
        start color-text make-segment/3 v push
    ] when

    v ;

: swift-mode-format-line ( line )        // line -> segments
    line text>> detab make-string-iterator format-iter ;

: line-is-definition? ( line )
    " func " line text>> substring-start !> offset

    offset nil? [ nil ] ?return

    "//" line text>> substring-start [
        offset < [ nil offset! ] when
    ] when*

    offset ;

: swift-mode-list-symbols
    ' swift-mode:line-is-definition? list-symbols:list-symbols ;

global swift-mode-local-map

feral-config:winui? feral-config:gtkui? or #if

: initialize-local-map
    128 <hashtable> :> m
    ' swift-mode-list-symbols feral-key:ctrl-shift-o m set-at
    m swift-mode-local-map! ;

initialize-local-map

#endif

: swift-mode-initialize-buffer             // buffer -> void
    1 ?enough :> buf
    swift-mode-local-map buf local-map<<
    get-instance :> m
    m indent-size>> buf indent-size<< ;

: initialize-swift-mode
    mode make-instance :> m
    "Swift" m name<<
    2 m indent-size<<
    "// " m comment-start<<
    ' swift-mode-initialize-buffer m initialize-buffer-function<<
    ' swift-mode-format-line m format-line-function<<
    m ".swift" modes set-at
    m instance! ;

initialize-swift-mode
