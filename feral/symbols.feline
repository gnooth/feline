// Copyright (C) 2019-2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline ;
in: symbols

global sourcefile

global symbols-hashtable

: asm-process-2-symbols ( token s lineno ) // token string fixnum -> void
    local begin
    local end

    token length 1+ begin!
    ',' s index verify-fixnum end!

    sourcefile lineno 1+ 2array // location
    begin end s substring // symbol
    symbols-hashtable set-at

    end 2 + s nth :> quotechar
    quotechar { '\'' '"' } member-eq? [
        end 3 + begin!
        quotechar begin s index-from verify-fixnum end!

        sourcefile lineno 1+ 2array // location
        begin end s substring // symbol
        symbols-hashtable set-at
    ] when ;

: asm-process-1-symbol ( token s lineno ) // token string fixnum -> void
    local begin
    local end

    token length 1+ begin!
    begin s string-skip-whitespace begin!
    begin s [ feral-core:asm-mode-identifier-char? nil? ] find-from drop s length or end!

    sourcefile lineno 1+ 2array // location
    begin end s substring // symbol
    symbols-hashtable set-at ;

: asm-process-line // string fixnum -> void
    2 ?enough :> lineno :> s

    local token

    '\s' s string-find-char [ 0 swap s substring token! ] when*

    token nil? ?exit

    token { "code" "inline" "always_inline" "generic" "special" } member?
    [ token s lineno asm-process-2-symbols ] ?return

    token { "subroutine" "%macro" "asm_global" "%define" } member?
    [ token s lineno asm-process-1-symbol ] when ;

: process-asm-file
    sourcefile file-lines [ asm-process-line ] each-index ;

{
    "feline.asm"
    "feline_home.asm"
    "externs.asm"
    "macros.asm"
    "loop-macros.asm"
    "inlines.asm"
    "ansi.asm"
    "array.asm"
    "assert.asm"
    "bitops.asm"
    "boolean.asm"
    "cold.asm"
    "color.asm"
    "combinators.asm"
    "compile-word.asm"
    "debug.asm"
    "defer.asm"
    "dynamic-scope.asm"
    "errors.asm"
    "file-output-stream.asm"
    "files.asm"
    "fixnum.asm"
    "float.asm"
    "format.asm"
    "gc.asm"
    "generic.asm"
    "gtkui.asm"
    "handles.asm"
    "hashtable.asm"
    "io.asm"
    "iterator.asm"
    "key.asm"
    "keyword.asm"
    "lexer.asm"
    "load.asm"
    "locals.asm"
    "math.asm"
    "memory.asm"
    "method.asm"
    "move.asm"
    "mutex.asm"
    "numbers.asm"
    "object-macros.asm"
    "objects.asm"
    "syntax.asm"
    "primitives.asm"
    "quit.asm"
    "quotation.asm"
    "range.asm"
    "recover.asm"
    "sequences.asm"
    "sbuf.asm"
    "slice.asm"
    "slot.asm"
    "socket.asm"
    "stack.asm"
    "stream.asm"
    "string-iterator.asm"
    "string-output-stream.asm"
    "string.asm"
    "strings.asm"
    "symbol.asm"
    "thread.asm"
    "time.asm"
    "tools.asm"
    "tuple.asm"
    "type.asm"
    "uint64.asm"
    "int64.asm"
    "vocab.asm"
    "vocabs.asm"
    "vector.asm"
    "winui.asm"
    "wrapper.asm"
    "fixnum-hashtable.asm"
    "hashtable-common.asm"
} constant asm-files

: generate-hashtable
    4096 <hashtable> symbols-hashtable!
    asm-files [
         feline-source-directory swap path-append sourcefile!
         sourcefile regular-file? [ process-asm-file ] when
    ] each ;

: find-tag // string -> 2array/nil
    1 ?enough :> tag
    symbols-hashtable [ generate-hashtable ] unless
    tag symbols-hashtable at ;
