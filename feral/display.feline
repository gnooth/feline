-- Copyright (C) 2017-2019 Peter Graves <gnooth@gmail.com>

-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.

-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline accessors modes feral-config ;
in: editor

winui? #if

: update-caret-pos
    dot-column winui-char-width *
    dot-line-number top-line-number - winui-char-height *
    winui-set-caret-pos
;

192 192 192 make-colorref constant fg-default
  0   0   0 make-colorref constant bg-default
 64  64  64 make-colorref constant bg-selected

: repaint-segment                       -- segment y -> void
    :> y :> segment

    segment format>> dup fixnum? assert winui-textview-set-fg-color

    segment start>> winui-char-width *
    y winui-char-height *
    segment text>> winui-textview-text-out
;

: repaint-segments ( y segments )       -- y segments -> void
    segments [ y repaint-segment ] each
;

: repaint-selected-line ( x y line )    -- x y line -> void

    line line-selected? assert

    line text>> detab :> detabbed-text

    detabbed-text format-line :> segments

    bg-selected winui-textview-set-bg-color

    segments string? [
        color-text winui-textview-set-fg-color
        0 y winui-char-height * segments winui-textview-text-out
    ] [
        y segments repaint-segments
    ] if

    detabbed-text length y winui-textview-clear-eol

    bg-default winui-textview-set-bg-color
;

: repaint-line ( x y line )             -- x y line -> void

    line line-selected? [ x y line repaint-selected-line ] return-if

    line text>> detab :> detabbed-text

    detabbed-text format-line :> segments

    segments string? [
        color-text winui-textview-set-fg-color
        0 y winui-char-height * segments winui-textview-text-out
    ] [
        y segments repaint-segments
    ] if

    detabbed-text length y winui-textview-clear-eol
;

: repaint

    top-line :> line!
    0 :> y!

    winui-hide-caret

    [ line y textview-rows < and ] [
        0 y line repaint-line
        y 1+ y! line next>> line!
    ] while

    [ y textview-rows < ] [
        0 y winui-textview-clear-eol
        y 1+ y!
    ] while

    update-modeline

    winui-show-caret

    f repaint?!
;

: update-display
    winui-hide-caret
    repaint? [
        repaint
    ] [
        dot-line-changed? [
            0 dot-row dot-line repaint-line
            f dot-line-changed?!
        ] when
    ] if
    update-modeline
    update-caret-pos
    winui-show-caret
;

#else

: .cursor
    dot-column
    dot-line-number top-line-number -
    at-xy ;

use: ansi-color

 64  64  64 rgb-background-prefix constant selection-prefix

: repaint-line ( line )                 -- line -> void
    line text>> detab :> detabbed-text

    detabbed-text format-line :> formatted-text

    line line-selected? [
        selection-prefix write-string-escaped
        formatted-text write
        selection-prefix write-string-escaped
        terminal-columns detabbed-text string-length - spaces
        "\e[0m" write-string-escaped
    ] return-if

    output-style
    line mark-line eq? [
        0 dot-column detabbed-text string-substring write
        reverse
        dot-column mark-column detabbed-text string-substring write
        normal
        detabbed-text mark-column string-tail write
        terminal-columns detabbed-text string-length - spaces
    ] [
        detabbed-text length terminal-columns < [
            formatted-text write
            terminal-columns detabbed-text string-length - spaces
        ] [
            0 terminal-columns detabbed-text substring write
        ] if
    ] if
;

: repaint
    top-line :> line!
    0 :> y!

    [ line y textview-rows < and ] [
        0 y at-xy
        line repaint-line
        y 1+ y! line next>> line!
    ] while

    [ y textview-rows < ] [
        0 y at-xy terminal-columns spaces
        y 1+ y!
    ] while

    f repaint?!
;

: update-display
    hide-cursor
    repaint? [
        repaint
    ] [
        dot-line-changed? [
            0 dot-row at-xy
            dot-line repaint-line
            f dot-line-changed?!
        ] when
    ] if
    status
    .cursor
    mark [ show-cursor ] unless
;

#endif
