// Copyright (C) 2018-2019 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feral-core modes feline accessors segments feral-colors ;
in: asm-mode

private

global instance

: get-instance                          // void -> mode
    instance ;

: asm-mode-identifier-char? ( x )       // x -> ?
    [ x alphanumeric? ] [ x "_$#@~.?" member-eq? ] either? ;

: asm-mode-format-line ( s )            // string -> array-of-segments
    ';' s string-find-char :> comment-start

    comment-start [
        comment-start s string-head 0 color-text make-segment/3
        comment-start s string-tail comment-start color-comment make-segment/3
        2array
    ] [
        s 0 color-text make-segment/3
        1array
    ] if ;

: line-is-definition? ( line )
    "code " line text>> head?
    "%macro " line text>> head? or
;

: asm-mode-list-symbols
    make-buffer :> buf
    "symbols " current-buffer filename>> + buf name<<

    first-line :> line!

    [ line ] [
        line line-is-definition? [
            line number>> 1+ line text>> "%d %s" format make-line/1
            buf top-line>> [ dup buf top-line<< ] unless
            buf editor:buffer-append-line
        ] when
        line next>> line!
    ] while

    buf top-line>> 0 make-position buf dot<<
    t buf read-only<<

    current-buffer buf parent<<
    current-buffer directory>> buf directory<<
    symbols-mode:get-instance buf mode<<
    buf mode>> initialize-buffer-function>> [ buf swap call ] when*

    buf buffer-list vector-push
    buf set-current-buffer

    renumber
    t repaint!
;

global asm-mode-local-map

feral-config:winui? feral-config:gtkui? or #if

: initialize-local-map
    128 <hashtable> :> m
    ' asm-mode-list-symbols feral-key:ctrl-shift-o m set-at
    m asm-mode-local-map! ;

initialize-local-map

#endif

: asm-mode-initialize-buffer            // buffer -> void
    1 ?enough :> buf
    asm-mode-local-map buf local-map<<
    instance indent-size>> buf indent-size<< ;

: initialize-asm-mode
    mode make-instance :> m
    "Assembly" m name<<
    8 m indent-size<<
    "; " m comment-start<<
    ' asm-mode-format-line m formatter<<
    ' asm-mode-initialize-buffer m initialize-buffer-function<<
    ' asm-mode-identifier-char? m identifier-char?-function<<
    m ".asm" modes set-at
    m instance! ;

initialize-asm-mode
