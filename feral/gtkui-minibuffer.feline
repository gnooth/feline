// Copyright (C) 2019-2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: history completion feral-core feline accessors ;
in: mini

feral-config:gtkui? assert

private

: minibuffer-update-caret-pos
    minibuffer dot>> offset>>              // -> col
    0                                   // -> column row
    gtkui-minibuffer-set-caret-pos ;

: minibuffer-get-text                   // void -> string
    minibuffer dot>> line>> text>> "" or ;

: repaint-minibuffer
    minibuffer-get-text !> s
    0 textview-char-height s gtkui-minibuffer-text-out ;

public: minibuffer-set-text             // string -> void
    1 ?enough verify-string
    minibuffer-get-text over sequence=
    [ drop ] [ minibuffer dot>> line>> text<< ] if ;

: minibuffer-accept
    minibuffer-get-text minibuffer-contents!

    current-history [
        prompt length minibuffer-contents tail update-history
        nil current-history!
    ] when

    "" minibuffer-set-text
    nil set-completion-provider
    gtkui-minibuffer-exit ;

: minibuffer-cancel
    minibuffer-get-text prompt = [
        nil minibuffer-contents!
        "" minibuffer-set-text
        nil current-history!
        nil set-completion-provider
        gtkui-minibuffer-exit
    ] [
        prompt minibuffer-set-text
        prompt length
        [ minibuffer dot>> offset<< ]
        [ 0 gtkui-minibuffer-set-caret-pos ]
        bi
    ] if ;

: minibuffer-set-text-from-history ( s ) // string/nil -> void
    s nil? ?exit
    prompt s +
    [ minibuffer-set-text ]
    [ string-length dup minibuffer dot>> offset<< 0 gtkui-minibuffer-set-caret-pos ]
    bi ;

: minibuffer-previous-history
    history-previous minibuffer-set-text-from-history ;

: minibuffer-next-history
    history-next minibuffer-set-text-from-history ;

: minibuffer-set-completion-text        // string/nil -> void
    minibuffer-set-text-from-history ;

: minibuffer-complete
    completion-provider nil? ?exit

    prompt length minibuffer-get-text tail
    completion-provider call [
        // -> string
        editor:add-undo-line-edit
        minibuffer-set-completion-text
    ] when* ;

: lookup-key                            // key -> symbol/nil
    minibuffer-keymap nil? assert-false
    minibuffer-keymap at ;

defer minibuffer-insert-char

: minibuffer-dispatch                   // key -> void
    1 ?enough :> key

    local saved-mod-count

    [
        minibuffer current-buffer!

        current-command last-command!
        nil current-command!

        mod-count saved-mod-count!

        key lookup-key
        [
            dup current-command! call-symbol
            minibuffer-update-caret-pos
            gtkui-minibuffer-invalidate
        ] [
            key feral-key:key-to-printable-char [
                minibuffer-insert-char
                minibuffer-update-caret-pos
                gtkui-minibuffer-invalidate
            ] when*
        ] if*

        mod-count saved-mod-count > [ reset-completion ] when

    ] keep-current-buffer ;

public

: message                               // string -> void
    current-buffer minibuffer? [ drop ] [ minibuffer-set-text ] if ;

' message is feral-core:message

: clear-message
    current-buffer minibuffer? [ "" minibuffer-set-text ] unless ;

' clear-message is feral-core:clear-message

: show-message-briefly                  // string -> void
    current-buffer minibuffer? assert

    minibuffer-get-text :> saved-text
    copy-dot :> saved-dot

    minibuffer-set-text
    repaint-minibuffer
    1000 sleep
    saved-text minibuffer-set-text
    repaint-minibuffer
    saved-dot dot! ;

: minibuffer-accept-string              // prompt -> string/nil
    verify-string prompt!
    nil minibuffer-contents!

    prompt
    [ minibuffer-set-text ]
    [ string-length minibuffer dot>> offset<< ]
    bi

    [
        current-buffer minibuffer parent<<
        minibuffer current-buffer!
        editor:reset-undo
        editor:reset-redo
        reset-completion
        minibuffer-update-caret-pos
        gtkui-minibuffer-main
    ] keep-current-buffer

    minibuffer-contents [ prompt length minibuffer-contents tail ] [ nil ] if ;

: minibuffer-accept-string/2            // prompt default -> string/nil
    2 ?enough
    "" or verify-string :> default
    verify-string prompt!
    nil minibuffer-contents!

    prompt default +
    [ minibuffer-set-text ]
    [ string-length minibuffer dot>> offset<< ]
    bi

    [
        current-buffer minibuffer parent<<
        minibuffer current-buffer!
        editor:reset-undo
        editor:reset-redo
        reset-completion
        minibuffer-update-caret-pos
        gtkui-minibuffer-main
    ] keep-current-buffer

    minibuffer-contents [ prompt length minibuffer-contents tail ] [ nil ] if ;
