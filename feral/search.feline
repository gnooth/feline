-- Copyright (C) 2017-2018 Peter Graves <gnooth@gmail.com>

-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.

-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline accept-string editor ;
in: search

empty

private

var pattern

: mark-found-pattern
    dot-line dot-offset pattern length + make-position mark! ;

: found ( pos )                         -- position -> void
    reset-redo

    add-undo-move
    pos dot!
    dot-offset goal-column!
    mark-found-pattern
    maybe-reframe
    t repaint?! ;

: not-found
    pattern "%S not found" format
    0 message-y at-xy output-style
    write-string ;

: find-string ( s startpos )            -- string position -> position/f
    startpos position-%line :> line!
    startpos position-offset :> offset

    f :> index!
    offset line length s length - <= [
        s line line-text offset string-tail substring-start index!
    ] when
    index [ line offset index + make-position ] return-if

    line line-next line!

    f :> result!

    [ line ] [
        s line line-text substring-start index!
        index [
            line index make-position result!
            f line!
        ] [
            line line-next line!
        ] if
    ] while

    result
;

public

: do-find
    0 message-y at-xy "Find: " accept-string pattern!
    clear-message-line

    pattern empty? [ ] return-if

    pattern dot find-string [ found ] [ not-found ] if*
;

: do-find-again
    pattern empty? [ do-find ] return-if

    mark [ dot mark make-region/2 begin ] [ copy-dot ] if :> start!

    start [ position-offset ] [ position-%line length ] bi < [
        start position-offset 1+ start position-offset!
    ] [
        start position-%line line-next [ start position-%line! 0 start position-offset! ] [ f start! ] if*
    ] if

    start null? [ not-found ] return-if

    pattern start find-string [ found ] [ not-found ] if*
;
