// Copyright (C) 2017-2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feral-core feline accessors editor search-mode history feral-config mini ;
in: search

empty

private

: current-pattern                       // -> string/nil
    current-search [ pattern>> ] [ nil ] if* ;

: whole-words-only?                     // -> ?
    current-search [ whole-words-only>> ] [ nil ] if* ;

: regex?                                // -> ?
    current-search [ regex>> ] [ nil ] if* ;

: found ( pos )                         // position -> void
    reset-redo

    add-undo-move
    regex? [
        current-search regex-match-end>> pos offset>> eq? [
            // dot is at the end of the found pattern
            pos dot!
            pos line>> current-search regex-match-start>> make-position mark!
        ] [
            pos line>> current-search regex-match-start>> make-position dot!
            pos line>> current-search regex-match-end>> make-position mark!
        ] if
    ] [
        pos mark!
        mark-line mark-offset current-pattern string-length + make-position dot!
    ] if
    dot-offset goal-column!

    maybe-reframe
    true repaint?! ;

: not-found
    current-pattern "%S not found" format
    message ;

: find-char-in-range ( char string start end ) // char string start end -> i/nil
    start end [ string string-nth-unsafe char eq? ] find-integer-in-range ;

: find-substring-in-line ( pattern line ) // pattern line -> position/nil
    pattern line text>> 0 find-substring-from
    [ line swap make-position ] [ nil ] if* ;

: find-last-substring-in-range ( pattern string start end ) // string1 string2 start end -> i/nil
    pattern unsafe-string-data-address :> pattern-data-address
    string unsafe-string-data-address :> string-data-address
    pattern string-length :> pattern-length

    start string string-length pattern-length - 1+ end min [
        string-data-address +
        pattern-data-address
        pattern-length unsafe-memequal
    ] find-last-integer-in-range ;

: find-last-substring-from ( pattern string from ) // pattern string from -> i/nil
    pattern string 0
    string string-length pattern string-length - 1+ from min
    find-last-substring-in-range ;

: find-last-substring-in-line ( pattern line ) // pattern line -> position/nil
    pattern line text>> line length find-last-substring-from
    [ line swap make-position ] [ nil ] if* ;

: search-forward ( startpos )           // position -> position/nil
    // get pattern from current-search
    current-pattern :> pattern

    startpos line>> !> line
    startpos offset>> :> offset

    pattern line text>> offset find-substring-from !> index
    index [ line index make-position ] ?return

    line next>> line!
    nil !> result

    [ line ] [
        pattern line find-substring-in-line [
            result!
            nil line!
        ] [ line next>> line! ] if*
    ] while

    result ;

: search-backward ( startpos )          // startpos -> position/nil
    // get pattern from current-search
    current-pattern :> pattern

    startpos line>> !> line
    startpos offset>> :> offset

    pattern line text>> offset find-last-substring-from !> index
    index [ line index make-position ] ?return

    line prev>> line!
    nil !> result

    [ line ] [
        pattern line find-last-substring-in-line [
            result!
            nil line!
        ] [ line prev>> line! ] if*
    ] while

    result ;

: position-delimited? ( pos len )       // position length -> ?
    pos [ line>> text>> ] [ offset>> ] bi len delimited? ;

: find-word-in-line ( pattern line )    // pattern line -> position/nil
    pattern line text>> 0 find-word-from :> index
    index [ line index make-position ] [ nil ] if ;

use: regex

: find-regex-in-line ( pattern line )   // pattern line -> position/nil
    pattern line text>> 0 find-regex-from // -> index1/nil index2/nil
    :> index
    index [ line index make-position ] [ nil ] if ;

: find-in-string ( search string start ) // search string start -> index/nil
    search pattern>> :> pattern
    {
        {
            [ search whole-words-only>> ]
            [ pattern string start find-word-from ]
        }
        {
            [ search regex>> ]
            [
                pattern string start find-regex-from // -> index1/nil index2/nil
                drop
            ]
        }
        [ pattern string start find-substring-from ] // default
    } cond ;

unuse: regex

: find-in-line ( search line )          // search line -> position/nil
    {
        {
            [ search whole-words-only>> ]
            [ search pattern>> line find-word-in-line ]
        }
        {   [ search regex>> ]
            [ search pattern>> line find-regex-in-line ]
        }
        [ search pattern>> line find-substring-in-line ] // default
    } cond ;

: search-forward-word ( startpos )      // position -> position/nil
    // get pattern from current-search
    current-pattern :> pattern

    pattern string-length :> pattern-length
    startpos copy-position !> pos
    nil !> result

    [ result nil? pos and ] [
        pos search-forward pos!
        pos [
            pos pattern-length position-delimited? [
                pos result!
            ] [
                pos move-next
            ] if
        ] when
    ] while

    result ;

: search-backward-word ( startpos )     // position -> position/nil
    // get pattern from current-search
    current-pattern :> pattern

    pattern string-length :> pattern-length
    startpos copy-position !> pos
    nil !> result

    [ result nil? pos and ] [
        pos move-prev [
            search-backward pos!
            pos [
                pos pattern-length position-delimited? [
                    pos result!
                ] when
            ] when
        ] when*
    ] while

    result ;

use: regex

: search-forward-regex ( startpos )     // position -> position/nil
    // get pattern from current-search
    current-pattern :> pattern

    startpos line>> !> line
    startpos offset>> :> offset

    pattern line text>> offset find-regex-from // -> index1/nil index2/nil
    !> index2 !> index1

    index1 current-search regex-match-start<<
    index2 current-search regex-match-end<<

    index2 [ line index2 make-position ] ?return

    line next>> line!
    nil !> result

    [ line ] [
        pattern line text>> 0 find-regex-from // -> index1/nil index2/nil
        index2! index1!
        index2 [
            index1 current-search regex-match-start<<
            index2 current-search regex-match-end<<
            line index2 make-position result!
            nil line!
        ] [ line next>> line! ] if
    ] while

    result ;

: search-backward-regex ( startpos )    // position -> position/nil
    // get pattern from current-search
    current-pattern :> pattern

    startpos line>> !> line
    startpos offset>> :> offset

    pattern line text>> offset find-last-regex-from !> index2 !> index1

    index1 current-search regex-match-start<<
    index2 current-search regex-match-end<<

    index1 [ line index1 make-position ] ?return

    line prev>> line!
    nil !> result

    [ line ] [
        pattern line text>> find-last-regex // -> index1/nil index2/nil
        index2! index1!
        index2 [
            index1 current-search regex-match-start<<
            index2 current-search regex-match-end<<
            line index1 make-position result!
            nil line!
        ] [ line prev>> line! ] if*
    ] while

    result ;

public

: find-command
    "find" set-history
    regex-default [
        "Find regex: "
    ] [
        whole-words-only-default "Find word: " "Find: " ?
    ] if :> prompt

    // REVIEW with-current-context
    :find-prompt current-context!
    prompt minibuffer-accept-string :> pattern
    nil current-context!

    pattern empty? ?exit
    pattern make-search current-search!

    regex-default [
        true current-search regex<<
        dot search-forward-regex
    ] [
        whole-words-only? [
            dot search-forward-word
        ] [
            dot search-forward
        ] if
    ] if
    // -> pattern/nil
    [ found ] [ not-found ] if*

    current-search last-search!
    nil current-search! ;

: find-under-make-search                // pattern -> search
    make-search
    true >>whole-words-only
    nil >>ignore-case
    nil >>regex ;

: find-under
// sublime find_under ctrl-f3
// atom find-next-selected ctrl-f3
// vscode Find Next Selection ctrl-f3
// Find next occurrence of identifier at dot.
    identifier-at-dot                   // -> index/nil string/nil
    :> pattern :> start

    pattern empty? ?exit

    pattern find-under-make-search current-search!

    dot-line start pattern length + make-position search-forward-word
    // -> position/nil
    [
        found
        current-search last-search!
    ] [
        // wrap around
        first-line 0 make-position search-forward-word
        // -> position/nil
        [
            found
            current-search last-search!
        ] [ not-found ] if*
    ] if*
    nil current-search! ;

: find-under-prev
// sublime find_under_prev ctrl-shift-f3
// atom ctrl-shift-f3 find-previous-selected ctrl-shift-f3
// vscode Find Previous Selection ctrl-f3
// Find previous occurrence of identifier at dot.
    identifier-at-dot                   // -> index/nil string/nil
    :> pattern :> start

    pattern empty? ?exit

    pattern find-under-make-search current-search!

    dot-line start make-position !> pos
    pos move-prev [
        last-line dup length make-position pos!
    ] unless
    pos search-backward-word
    // -> position/nil
    [ found ]
    [
        // wrap around
        last-line [ pos line<< ] [ length pos offset<< ] bi
        pos search-backward-word
        // -> position/nil
        [
            found
            current-search last-search!
        ] [ not-found ] if*
    ] if*
    nil current-search! ;

: repeat-search-forward
    last-search current-search!

    current-pattern empty? [
        nil current-search!
        find-command
    ] ?return

    mark [ dot mark make-region/2 end ] [ copy-dot ] if :> startpos

    regex? [
        startpos search-forward-regex
    ] [
        whole-words-only? [
            startpos search-forward-word
        ] [
            startpos search-forward
        ] if
    ] if [ found ] [ not-found ] if*
    nil current-search! ;

: repeat-search-backward
    last-search current-search!

    current-pattern empty? [
        nil current-search!
        find-command
    ] ?return

    mark [ dot mark make-region/2 begin ] [ copy-dot ] if :> startpos

    regex? [
        startpos search-backward-regex
    ] [
        whole-words-only? [
            startpos search-backward-word
        ] [
            startpos search-backward
        ] if
    ] if [ found ] [ not-found ] if*
    nil current-search! ;

: options ( search )
    {
        { [ search whole-words-only>> ] [ "whole words only" ] }
        { [ search regex>> ] [ "regex" ] }
        [ "" ]
    } cond ;

: search-list-occurrences
    last-search nil? ?exit

    last-search current-search!

    local pos
    local buf
    local filename
    local outputline
    local sourcelinenumber
    first-line !> sourceline
    local dotline

    [ sourceline ] [
        // while
        current-search sourceline find-in-line  // -> position/nil
        [
            pos!
            buf [
                make-buffer buf!
                current-buffer-filename filename!
                filename [
                    current-search pattern>> "Pattern: %S" format make-line/1 outputline!
                    true :search-results-header outputline line-set-property
                    outputline buf buffer-append-line
                    outputline buf top-line<<
                    current-search options "Options: %s" format make-line/1 outputline!
                    true :search-results-header outputline line-set-property
                    outputline buf buffer-append-line
                    filename make-line/1 outputline!
                    filename :source-file outputline line-set-property
                    outputline buf buffer-append-line
                ] when
            ] unless
            sourceline number>> 1+ sourcelinenumber!
            sourcelinenumber sourceline text>> "%d:%s" format make-line/1 outputline!
            sourcelinenumber :source-line-number outputline line-set-property
            pos offset>> :source-offset outputline line-set-property
            buf top-line>> [ outputline buf top-line<< ] unless
            outputline buf buffer-append-line
            sourcelinenumber dot-line-number 1+ <= [ outputline dotline! ] when
        ] when*
        sourceline next>> sourceline!
    ] while

    buf nil? [ not-found ] ?return

    dotline [ 0 make-position buf dot<< ] [ buf top-line>> 0 make-position buf dot<< ] if*
    true buf read-only<<

    // REVIEW
    current-buffer name>>
    last-search pattern>> " [%S]" format +
    buf name<<

    current-buffer buf parent<<
    current-buffer-directory buf directory<<
    last-search :search buf buffer-set-property
    search-mode:get-instance buf mode<<
    buf dup mode>> initialize-buffer-function>> call

    identifier-char-function buf identifier-char-function<<
    nil current-search!

    buf in-buffer-list? [ buf buffer-list vector-push ] unless
    buf set-current-buffer

    maybe-reframe
    true repaint?! ;

: toggle-whole-words-only
    local prompt
    local offset

    current-buffer minibuffer? [
        current-context :find-prompt eq? [
            whole-words-only-default not whole-words-only-default!
            dot-offset minibuffer-prompt length - offset!
            whole-words-only-default "Find word: " "Find: " ? prompt!
            prompt minibuffer-user-text + minibuffer-set-text
            prompt minibuffer-set-prompt
            offset prompt length + dot-offset!
        ] when
    ] [
        whole-words-only-default not whole-words-only-default!
        whole-words-only-default "Match whole words only" "Match any occurrence" ?
        message
    ] if ;

: toggle-ignore-case
    ignore-case-default not ignore-case-default!
    ignore-case-default "Ignore case" "Match case" ? message ;

: toggle-regex
    local prompt
    local offset

    current-buffer minibuffer? [
        current-context :find-prompt eq? [
            regex-default not regex-default!
            dot-offset minibuffer-prompt length - offset!
            regex-default [
                "Find regex: "
            ] [
                whole-words-only-default "Find word: " "Find: " ?
            ] if prompt!
            prompt minibuffer-user-text + minibuffer-set-text
            prompt minibuffer-set-prompt
            offset prompt length + dot-offset!
        ] when
    ] [
        regex-default not regex-default!
        regex-default "Match regex" "Match literal string" ?
        message
    ] if ;

global replacement

: replace1
    add-undo-line-edit

    // mark is at the beginning of the pattern
    mark-offset dot-line-text string-head

    replacement +

    // dot should be placed at the end of the replacement
    dup string-length :> offset

    // dot is at the end of the pattern
    dot-offset dot-line-text string-tail +

    dot-line-text!

    // put dot at the end of the replacement
    offset dot-offset!

    unmark
    modified
    true dot-line-changed?! ;

: query-replace-command
    "find" set-history

    // REVIEW with-current-context
    :find-prompt current-context!
    "Find: " minibuffer-accept-string :> pattern
    nil current-context!

    pattern empty? ?exit

    "replacement" set-history
    pattern "Replace %S with: " format
    minibuffer-accept-string replacement!

    replacement empty? ?exit

    pattern make-search current-search!

    local found?
    local done?
    local response

    0 !> count

    [ done? ]
    [
        whole-words-only? [
            dot search-forward-word
        ] [
            dot search-forward
        ] if

        // -> position/nil
        [
            true found?!
            found
            update-display

            "Replace? " minibuffer-accept-char response!

            response {
                { 'y' [ replace1 count 1+ count! ] }
                { 'n' [ ] }
                { 'q' [ unmark true done?! ] }
                [
                    // default
                    drop
                ]
            } case
        ] [
            found? [
                count 0> [
                    count dup 1 > "s" "" ? "%d occurrence%s replaced" format
                    message
                ] when
            ] [
                not-found
            ] if
            true done?!
        ] if*
        true repaint?!
        update-display
    ] until ;
