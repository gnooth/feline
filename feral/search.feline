-- Copyright (C) 2017-2018 Peter Graves <gnooth@gmail.com>

-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.

-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline accept-string editor ;
in: search

empty

private

var pattern

var found-line-number
var found-offset

: mark-found-pattern
    position make-instance set-mark
    found-line-number mark position-line-number!
    found-offset pattern length + mark position-offset! ;

: found
    reset-redo

    add-undo-move
    found-line-number dot-line-number!
    found-offset dot-offset!
    dot-offset goal-column!
    mark-found-pattern
    maybe-reframe
    t repaint?! ;

: not-found
    pattern "%S not found" format
    0 message-y at-xy output-style
    write-string
;

: find-pattern-in-current-line          -- start -> index/f
    pattern dot-line pick string-tail substring-start   -- index/f
    [ + ] [ drop f ] if* ;

public

: do-find
    0 message-y at-xy "Find: " accept-string pattern!
    clear-message-line

    f :> found?!

    f found-line-number!
    f found-offset!

    dot-offset find-pattern-in-current-line found-offset!

    found-offset [
        dot-line-number found-line-number!
        t found?!
    ] when

    found? [
        next-line-number current-buffer-lines [
            pattern swap substring-start
            dup found-offset!
        ] find-from                     -- line-number/f line/f
        [ found-line-number! t found?! ] [ drop ] if
    ] unless

    found? [ found ] [ not-found ] if ;

: do-find-again
    f :> found?!

    f found-line-number!
    f found-offset!

    dot-offset dot-line-length 1- < [
        dot-offset 1+ find-pattern-in-current-line found-offset!
    ] when

    found-offset [
        dot-line-number found-line-number!
        t found?!
    ] when

    found? [
        next-line-number current-buffer-lines [
            pattern swap substring-start
            dup found-offset!
        ] find-from                     -- line-number/f line/f
        [ found-line-number! t found?! ] [ drop ] if
    ] unless

    found? [ found ] [ not-found ] if ;
