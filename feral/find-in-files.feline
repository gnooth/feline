// Copyright (C) 2019-2020 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feral-core feline accessors ;
in: find-in-files

private

global local-map

global output-buffer

global pattern

global current-files

global directory

global extension

: make-output-buffer ( line )
    make-buffer :> buf
    line buf buffer-append-line

    buf first-line>> 0 make-position buf dot<<
    buf first-line>> buf top-line<<
    true buf read-only<<
    current-files pattern "%s [%S]" format buf name<<
    directory buf directory<<

    current-buffer buf parent<<
    current-search :search buf buffer-set-property
    search-mode:get-instance buf mode<<
    local-map buf local-map<<

    extension [
        modes:mode-from-extension [
            identifier-char-function>> buf identifier-char-function<<
        ] when*
    ] when*

    buf output-buffer!

    buf in-buffer-list? [ buf buffer-list vector-push ] unless
    buf set-current-buffer ;

: find-in-file
    1 ?enough verify-string :> filename

    local linenumber
    local s
    local found?
    local line
    local offset

    filename file-lines [
        // each-index
        // -> string index

        1+ linenumber! // displayed line numbers are 1-based
        s!

        pattern s
        current-search whole-words-only>> [
            0 find-word-from
        ] [
            0 find-substring-from
        ] if offset!

        offset [
            // we found the pattern in this line
            found? [
                // first match in this file
                true found?!

                // add a filename line to the output buffer
                filename make-line/1 line!
                filename :source-file line line-set-property
                output-buffer [
                    line output-buffer buffer-append-line
                ] [
                    line make-output-buffer
                ] if

                line editor:line-changed
            ] unless

            linenumber number>string ":" + s + make-line/1 line!
            filename :source-file line line-set-property
            linenumber :source-line-number line line-set-property
            offset :source-offset line line-set-property
            line output-buffer buffer-append-line

            line editor:line-changed
        ] when

    ] each-index

    found? [
        current-buffer output-buffer eq? [ editor:request-update-display ] when
    ] when ;

: find-in-directory ( directory extension )
    local filename
    directory directory-files [
        [
            directory swap path-append filename!
            {
                {
                    [ filename directory? ]
                    [
                        filename file-name-nondirectory { "." ".." } member?
                        [ filename extension find-in-directory ] unless
                    ]
                }
                {
                    [ filename file-name-extension extension = ]
                    [ filename find-in-file ]
                }
                [ ]
            } cond
        ] each
    ] when* ;

: find-in-files-run
    directory extension find-in-directory
    output-buffer [
        nil output-buffer!
        true repaint?!
        editor:request-update-display
        "Search completed" message
    ] [
        "Not found" message
    ] if
    nil current-search! ;

: find-in-files

    nil output-buffer!

    "find" history:set-history
    whole-words-only-default "Find word: " "Find: " ? :> prompt
    prompt mini:minibuffer-accept-string pattern!
    pattern empty? ?exit

    current-buffer-directory file-name-as-directory :> default-directory

    local default-extension
    current-buffer-filename [
        file-name-extension default-extension!
    ] [
        current-buffer parent>> [
            filename>> [
                file-name-extension default-extension!
            ] when*
        ] when*
    ] if*
    default-extension [ feline-extension default-extension! ] unless

    "files" history:set-history
    "Files: "
    default-directory "*" + default-extension +
    mini:minibuffer-accept-string/2 current-files!
    current-files empty? ?exit

    current-files file-name-directory directory!

    directory nil? ?exit

    current-files file-name-extension extension!

    pattern make-search current-search!

    extension [
        modes:mode-from-extension [
            identifier-char-function>> [
                current-search identifier-char-function<<
            ] when*
        ] when*
    ] when*

    current-search identifier-char-function>> [
        ' default-identifier-char? current-search identifier-char-function<<
    ] unless

    [ find-in-files-run ] make-thread dup thread-create ;

: find-in-files-goto-source
    :search current-buffer buffer-get-property :> search

    :source-file dot-line line-get-property :> sourcefile
    :source-line-number dot-line line-get-property 1 or :> linenumber
    :source-offset dot-line line-get-property :> offset

    sourcefile find-buffer-from-file-name // -> buffer/nil
    [
        set-current-buffer
        linenumber editor:gotoline-internal
        // gotoline-internal calls maybe-reframe
    ] [
        sourcefile linenumber editor:create-buffer/2
        reframe
    ] if*

    offset
    [
        offset dot-offset!
        search [
            dot-line
            dot-offset search pattern>> length +
            make-position mark!

            // put dot after mark
            dot mark dot! mark!
        ] when
    ] when ;

: initialize-local-map
    128 <hashtable> :> m
    ' editor:kill-buffer feral-key:escape m set-at
    ' find-in-files-goto-source feral-key:enter m set-at
    m local-map! ;

initialize-local-map

feral-config:winui? #if
' find-in-files-goto-source feral-key:double-mouse-1 local-map set-at
#endif
