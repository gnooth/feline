// Copyright (C) 2017-2019 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline ;
in: user

{
    "feral-config"
    "feral-core"
    "directories"
    "search"
    "modes"
    "feline-mode"
    "asm-mode"
    "list-buffers"
    "kill-ring"
    "ansi-color"
    "accept-string"
} [ delete-vocab ] each

in: feral-config

empty

f constant winui?

in: editor

empty

feline-home "feral" path-append add-source-directory

use: directories

initialize-directories

using: feral-core feline accessors modes accept-string directories feral-config ;

: status-y                              // -> n
    terminal-rows 2 - ;

: reverse esc[ "7m" write-string-escaped ;

: normal esc[ "m" write-string-escaped ;

: status
    "\e[37m" write-string-escaped       // white foreground
    reverse
    0 status-y at-xy
    modified? [ '*' write-char ] [ space ] if
    current-buffer filename>> :> filename!
    filename [ "untitled" filename! ] unless
    filename write-string

    dot-line-number 1+
    line-count
    dot-column 1+
    "Line %d of %d Col %d " format
    terminal-columns over length - :> x
    x filename length 1+ - 1 max spaces
    write-string
    normal
;

: clear-status-line 0 status-y at-xy clear-to-eol ;

: message-y                             // -> n
    status-y 1+ ;

: message                               // string ->
    0 message-y at-xy write-string ;

: clear-message hide-cursor 0 message-y at-xy clear-to-eol ;

"display.feline" load

"undo.feline" load

"move.feline" load

: minibuffer-accept-string              // prompt-string -> string
    0 message-y at-xy
    accept-string
    clear-message
;

: gotoline
    "Line number: " minibuffer-accept-string
    string>number [ gotoline-internal ] when*
;

"edit.feline" load

use: kill-ring

: kill-line
    dot-line-tail length zero? [
        delete-line-separator
        current-buffer eol>> verify-string append-kill
    ] [
        add-undo-line-edit
        dot-line-tail append-kill
        dot-line-head dot-line-text!
        t dot-line-changed?!
    ] if
    modified
;

: select-line
    dot-line-prev dup line-selected? and [
        // extend selection if possible
        dot-line-next [
            dot-line-next dot-line! 0 dot-offset!
        ] when
    ] [
        dot-line-next [
            add-undo-move
            dot-line 0 make-position mark!
            dot-line-next dot-line! 0 dot-offset!
        ] when
    ] if

    t repaint?!
;

: do-anchor
    unmark
    copy-dot anchor! ;

: insert-multiline-string               // string -> void
    // insert string before line containing dot
    add-undo-insert-multiline-string

    dot-line-prev :> prev!

    string-lines [
        make-line/1 dup prev insert-after prev!
    ] each

    renumber
;

: cut-region ( region )
    region begin-line region end-line eq? [

        region begin-line dot-line assert-eq

        region region-as-string append-kill

        add-undo-line-edit
        dot-line-text region begin-offset string-head
        dot-line-text region end-offset string-tail
        string-append dot-line-text!

        unmark
        region begin-offset dot-offset!
        t dot-line-changed?!
        modified
    ] return-if

;

: copy-line
    dot-line-text "\n" string-append append-kill
    "Line copied to kill ring" message
;

: copy-region                           // region -> void
    region-as-string append-kill
    "Region copied to kill ring" message
;

: copy
    { [ anchor ] [ mark ] } ||
    [ dot make-region/2 copy-region ] [ copy-line ] if*
;

: delete-line
    reset-redo

    add-undo-delete-line

    dot-line-prev :> prev
    dot-line-next :> next

    {
        { [ prev next and ] [
            dot-line
            next dot-line! 0 dot-offset!
            unlink
        ] }
        { [ prev null? ] [
            // deleting first line
            dot-line
            next dot-line! 0 dot-offset!
            unlink
            next dup first-line! top-line!
        ] }
        { [ next null? ] [
            // deleting last line
            dot-line
            prev dot-line! prev length dot-offset!
            unlink
            prev last-line!
        ] }
    } cond

    modified
    t repaint?!
    renumber
;

: cut-line
    copy-line
    delete-line ;

: cut
    mark [ dot make-region/2 cut-region ] [ cut-line ] if* ;

: paste/1                               // string -> void
    1 ?enough
    :> s
    '\n' s string-index [
        s insert-multiline-string
        t repaint?!
    ] [
        add-undo-line-edit
        dot-line-head s string-append
        dot-line-tail string-append
        dot-line-text!
        dot-offset s string-length + dot-offset!
        t dot-line-changed?!
    ] if
    modified
;

: paste
    last-kill [ paste/1 ] [ "Kill ring is empty" message ] if*
;

: redo1                                 // undo-record -> void
    dup action>> {
        { +move+ [ undo-move ] }
        { +line-edit+ [ undo-line-edit ] }
        { +delete-line-separator+ [ drop delete-line-separator ] }
        { +insert-line-separator+ [ drop insert-line-separator ] }
        { +delete-line+ [ drop delete-line ] }
        [ error "unsupported" ]
    } case
    maybe-reframe
;

: redo
    redo-stack empty? [
        "Nothing to redo" message
    ] [
        t in-redo?!
        pop-redo dup compound-undo? [
            [ records>> vector-reverse! ' redo1 each ] with-compound-undo
        ] [
            redo1
        ] if
        f in-redo?!
        "Redo!" message
    ] if
;

: cycle-paste
    last-command ' paste eq? [
        next-kill [ undo paste/1 ] when*
    ] [
        paste
    ] if

    ' paste current-command!
;

"save.feline" load

: do-quit
    buffer-list [ buffer-modified? ] count :> n

    n zero? [
        t done?!
    ] [
        n dup 1 > "s" "" ?
        "Really exit with %s modified buffer%s? (yes or no) " format
        minibuffer-accept-string
        "yes" string= done?!
    ] if
;

: confirm-kill-current-buffer           // -> ?
    f :> confirmed?!

    modified? [
        "Save file? (y or n) " minibuffer-accept-string
        "y" = [ do-save ] when
    ] when

    modified? [
        "Abandon changes? (yes or no) " minibuffer-accept-string
        "yes" = [ t confirmed?! ] when
    ] when

    confirmed?
;

: kill-current-buffer
    buffer-list [ current-buffer eq? ] find     // -> index/f element/f
    current-buffer assert-eq                    // -> index
    :> n!

    n buffer-list vector-remove-nth!

    n buffer-list length < [ n 1- n! ] unless

    n buffer-list vector-nth current-buffer!
    t repaint?!
;

: kill-buffer
    f :> confirmed?!

    modified? [ confirm-kill-current-buffer confirmed?! ] when

    modified? not confirmed? or [
        buffer-list length 1 = [
            0 buffer-list vector-set-length
            t done?!
        ] [
            kill-current-buffer
        ] if
    ] when
;

"buffer.feline" load

"list-buffers.feline" load

: find-file-to-edit ( arg )             // arg -> path/f
    arg find-file [
        arg ensure-feline-extension find-file
    ] unless*
;

: open-file
    "File: " minibuffer-accept-string :> arg

    arg find-file-to-edit :> filename

    filename [
        filename find-buffer [
            current-buffer!
            t repaint?!
        ] [
            filename 1 create-buffer/2
            t repaint?!
        ] if*
    ] when
;

: goto-definition                       // symbol -> void
    symbol-location :> line-number :> filename
    filename [
        filename find-buffer [
            current-buffer!
            line-number gotoline-internal
        ] [
            filename line-number create-buffer/2
        ] if*
        maybe-reframe
        t repaint?!
    ] when
;

: find-definition
    "Word: " minibuffer-accept-string
    find-qualified-name [
        goto-definition
    ] [
        all-words [ symbol-name over = ] filter nip
        dup length {
            { 0 [ drop ] }
            { 1 [ first goto-definition ] }
            [
                // more than 1 match
                drop
                0 message-y at-xy
                [ symbol-qualified-name write-string space ] each
            ]
        } case
    ] if ;

: find-definition-at-dot
    current-mode identifier-at-dot      // -> start/f string/f
    nip                                 // -> string/f
    find-qualified-name [
        goto-definition
    ] [
        all-words [ symbol-name over = ] filter nip
        dup length {
            { 0 [ drop ] }
            { 1 [ first goto-definition ] }
            [
                // more than 1 match
                drop
                0 message-y at-xy
                [ symbol-qualified-name write-string space ] each
            ]
        } case
    ] if ;

: execute-command
    "Command: " minibuffer-accept-string :> command
    command find-name [
        call-symbol
    ] [
        "%S is not a valid command name." format message
    ] if
;

use: search

"keymaps.feline" load

: do-mouse                              // key -> void
    dup fixnum? not [ drop ] return-if

    :> keycode
    f :> button! f :> x! f :> y!
//     keycode fixnum>hex log
    keycode 24 rshift 0x1b5b4d = [
        // "\e[M"
        keycode 0xff bitand 32 - y!
        keycode 0xff00 bitand 8 rshift 32 - x!
        keycode 0xff0000 bitand 16 rshift 3 bitand zero? [
            // left button pressed
//             x y "left button pressed x = %d y = %d" format log
            top-line-number y + gotoline-internal
            x 1- 0 max dot-line-length min dot-offset!
        ] when
    ] when
;

: do-command ( key )                    // key -> void

    f :> command!

    // try local map first
    current-buffer local-map>> :> local-map
    local-map [
        key local-map at command!
    ] when

    // global map
    command [
        key lookup-key command!
    ] unless

    command [
        command dup current-command! call-symbol
    ] [
        linux? [ key do-mouse ] when
    ] if
;

: dispatch                              // key -> void
    current-command last-command!
    f current-command!
    dup printable-char? [ do-normal-char ] [ do-command ] if ;

: edit-loop
    f done?!
    [ done? ] [
        update-display
        ekey
        clear-message
        dispatch
    ] until

    // clean up
    f current-buffer!
    f buffer-list!
    gc
;

: initialize-editor
    16 <vector> buffer-list!
    initialize-kill-ring
    initialize-global-keymaps
;

: edit1
    use-alternate-screen-buffer

    page
    normal
    maybe-reframe
    t repaint?!

    linux? [
        // enable mouse tracking
        "\e[?1000h" write-string-escaped
    ] when

    edit-loop

    clear-status-line
    clear-message
    0 textview-rows at-xy
    show-cursor

    use-default-screen-buffer
;

: edit-file ( name )                    // name -> void
    name find-file-to-edit [
        initialize-editor
        1 create-buffer/2
        edit1
    ] [
        name error-file-not-found
    ] if*
;

: edit-definition                       // symbol ->
    symbol-location 2dup and
    [
        initialize-editor
        create-buffer/2
        edit1
    ] [
        2drop
    ] if
;

: edit-new
    initialize-editor
    create-buffer
    edit1
;

: edit
    parse-token dup [
        find-name [ edit-definition ] [ edit-file ] if
    ] [
        drop edit-new
    ] if
;

: ed
    use-alternate-screen-buffer
    page
    normal
    t repaint?!
    edit-loop
    clear-status-line
    clear-message
    0 textview-rows at-xy
    show-cursor
    use-default-screen-buffer
;
