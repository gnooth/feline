-- Copyright (C) 2017-2018 Peter Graves <gnooth@gmail.com>

-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.

-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline ;
in: user

{
    "accept-string"
    "search"
    "modes"
    "ansi-color"
    "feline-mode"
    "kill-ring"
} [ delete-vocab ] each

in: editor

empty

feline-home "feral" path-append add-source-directory

using: feline accessors modes accept-string ;

tuple: line
    prev
    next
    number                              -- 0-based line number
    text ;

: make-line/1                           -- string -> line
    line make-instance
    tuck
    text<< ;

: make-line/2                           -- string line-number -> line
    line make-instance
    swap >>number
    swap >>text ;

method: line length                     -- line -> length
    text>> string-length ;

method: line substring                  -- from to line -> substring
    text>> string-substring ;

tuple: position
    line
    offset ;

: make-position                         -- line offset -> position
    position make-instance :> pos
    pos offset<<
    pos line<<
    pos
;

: copy-position ( pos )                 -- position -> copy
    pos line>> pos offset>> make-position ;

: position-before? ( pos1 pos2 )        -- pos1 pos2 -> ?
    pos1 line>> :> line1
    pos2 line>> :> line2

    line1 number>> line2 number>> < [ t ] return-if

    line1 line2 eq? [ pos1 offset>> pos2 offset>> < ] [ f ] if
;

generic before?

method: position before? position-before? ;

: move-next ( pos )                     -- position -> ?
    pos offset>> :> offset
    pos line>> :> line

    {
        { [ offset line length < ] [ offset 1+ pos offset<< t ] }
        { [ line next>> ] [
            line next>> pos line<<
            0 pos offset<< t
        ] }
        [ f ]
    } cond
;

: move-prev ( pos )                     -- position -> ?
    pos offset>> :> offset
    pos line>> :> line

    {
        { [ offset 0 > ] [ offset 1- pos offset<< t ] }
        { [ line prev>> ] [
            line prev>> pos line<<
            pos line>> length pos offset<< t
        ] }
        [ f ]
    } cond
;

tuple: region
    begin
    end ;

: make-region/2 ( pos1 pos2 )
    region make-instance :> region
    pos1 pos2 before? [ pos1 pos2 ] [ pos2 pos1 ] if
    [ copy-position ] bi@
    region [ end<< ] [ begin<< ] bi
    region
;

generic begin

method: region begin                    -- region -> position
    begin>> ;

generic begin-line

method: region begin-line               -- region -> line
    begin>> line>> ;

generic begin-offset

method: region begin-offset             -- region -> offset
    begin>> offset>> ;

generic end

method: region end                      -- region -> position
    end>> ;

generic end-line

method: region end-line                 -- region -> line
    end>> line>> ;

generic end-offset

method: region end-offset               -- region -> offset
    end>> offset>> ;

: region-as-string ( region )
    region [ begin-line ] [ end-line ] bi eq? [
        region [ begin-offset ] [ end-offset ] [ begin-line ] tri substring
    ] return-if

    1024 <sbuf> :> sb

    region [ begin-offset ] [ begin-line length ] [ begin-line ] tri substring
    sb sbuf-append-string
    '\n' sb sbuf-push

    region begin-line next>> :> line!
    region end-line :> region-end-line

    [ line region-end-line neq? ] [
        line text>> sb sbuf-append-string
        '\n' sb sbuf-push
        line next>> line!
    ] while

    region end-offset 0 > [
        0 region end-offset region-end-line text>> substring
        sb sbuf-append-string
    ] when

    sb sbuf>string
;

tuple: buffer
    mode
    dot
    mark
    goal-column
    filename
    autosave-filename
    mod-count
    mod-count-last-save
    eol
    undo-stack
    redo-stack
    first-line
    last-line
    top-line
;

"\n"   constant LF
"\r\n" constant CR+LF

: make-buffer                           -- -> buffer
    buffer make-instance :> buf

    0 buf goal-column<<
    0 buf mod-count<<
    0 buf mod-count-last-save<<
    LF buf eol<<

    100 <vector> buf undo-stack<<
    16 <vector> buf redo-stack<<

    buf
;

var repaint?
var dot-line-changed?

var current-command
var last-command

var in-redo?

var done?

var buffer-list

var current-buffer

: buffer-modified?                      -- buffer -> ?
    dup mod-count>> swap mod-count-last-save>> neq? ;

: dot                                   -- -> position
    current-buffer dot>> ;

: dot!                                  -- position -> void
    current-buffer dot<< ;

: dot-line                              -- -> line
    dot line>> ;

: dot-line-number                       -- -> line-number
    dot line>> number>> ;

: dot-line!                            -- line -> void
    dot line<< ;

: dot-offset                            -- -> n
    dot offset>> ;

: dot-offset!                           -- n -> void
    dot offset<< ;

: mark                                  -- -> position/f
    current-buffer mark>> ;

: mark!                                 -- position -> void
    current-buffer mark<< ;

: mark-line                             -- -> line/f
    mark [ mark line>> ] [ f ] if ;

: mark-line-number                      -- -> line-number/f
    mark [ mark line>> number>> ] [ f ] if ;

: mark-offset                           -- -> n
    mark offset>> ;

: unmark
    mark [ f mark! t repaint?! ] when ;

: top-line                              -- -> line
    current-buffer top-line>> ;

: top-line!                             -- line ->
    current-buffer top-line<< ;

: top-line-number                       -- -> n
    current-buffer top-line>> number>> ;

: dot-line-text                         -- -> string
    dot-line text>> ;

: dot-line-text!                        -- string ->
    dot-line text<< ;

: dot-line-length                       -- -> n
    dot-line-text string-length ;

: dot-line-head                         -- -> string
    dot-line text>> dot-offset string-head ;

: dot-line-tail                         -- -> string
    dot-line text>> dot-offset string-tail ;

: dot-line-next                         -- -> line'
    dot line>> next>> ;

: dot-line-prev                         -- -> line'
    dot line>> prev>> ;

: first-line                            -- -> line
    current-buffer first-line>> ;

: last-line                             -- -> line
    current-buffer last-line>> ;

: last-line-number                      -- --> n
    last-line number>> ;

: line-count                            -- -> n
    last-line-number 1+ ;

: goal-column                           -- -> n
    current-buffer goal-column>> ;

: goal-column!                          -- n ->
    current-buffer goal-column<< ;

: mod-count                             -- -> n
    current-buffer mod-count>> ;

: mod-count!                            -- n ->
    current-buffer mod-count<< ;

: mod-count-last-save                   -- -> n
    current-buffer mod-count-last-save>> ;

: mod-count-last-save!               -- n ->
    current-buffer mod-count-last-save<< ;

: modified?                             -- -> ?
    mod-count mod-count-last-save neq? ;

: modified mod-count 1+ mod-count! ;

: undo-stack                            -- -> vector
    current-buffer undo-stack>> ;

: redo-stack                            -- -> vector
    current-buffer redo-stack>> ;

: renumber
    first-line :> line!
    0 :> n!
    [ line ] [
        n line number<<
        n 1+ n!
        line next>> line!
    ] while
;

: nth-line ( line-number )              -- line-number -> line

    line-number 0 < [ f ] return-if

    first-line :> line!
    0 :> n!
    [ n line-number < ] [
        n 1+ n!
        line next>> line!
    ] while
    line
;

: insert-after ( line prev )            -- line prev -> void
    -- insert line after prev

    prev [ prev next>> ] [ first-line ] if :> next

    prev [
        line prev next<<
    ] [
        line dup current-buffer first-line<< top-line!
    ] if
    prev line prev<<

    next line next<<
    next [ line next prev<< ] [ line current-buffer last-line<< ] if
;

: unlink ( line )                       -- line -> void
    line next>> :> next
    line prev>> :> prev

    prev [ next prev next<< ] when
    next [ prev next prev<< ] when

    f line next<<
    f line prev<<

    renumber
;

: lines-per-page                        -- -> n
    terminal-height 2 - ;

: bottom-line                           -- -> line
    top-line :> line!
    0 :> i!

    [ i lines-per-page 1- < ] [
        line next>> [ line! ] when*
        i 1+ i!
    ] while

    line
;

: bottom-line-number                    -- -> n
    bottom-line number>> ;

: tab-width                             -- -> n
    8 ;

: position-column ( pos )               -- position -> column
    pos line>> :> line
    pos offset>> line text>> length min :> limit
    0 :> column!
    limit [
        line text>> string-nth '\t' eq? [
            column tab-width column tab-width mod - + column!
        ] [
            column 1+ column!
        ] if
    ] each-integer
    column ;

: dot-column                            -- -> column
    dot position-column ;

: mark-column                           -- -> column
    mark [ mark position-column ] [ f ] if ;

: .cursor
    dot-column
    dot-line-number top-line-number -
    at-xy ;

: dot-y                                 -- -> n
    dot-line-number top-line-number - ;

: detab ( s )                           -- string1 -> string2
    '\t' s string-index :> i
    i f eq? [ s ] return-if

    256 <sbuf> :> sb

    s [
        dup '\t' eq? [
            drop
            '\s' sb sbuf-push
            [ sb sbuf-length 8 mod 0 eq? ] [ '\s' sb sbuf-push ] until
        ] [
            sb sbuf-push
        ] if
    ] each

    sb sbuf>string
;

: format-line ( s )
    current-buffer mode>> :> mode
    mode [
        s mode formatter>> call-symbol
    ] [
        s
    ] if
;

: status-y                              -- -> n
    terminal-height 2 - ;

: reverse esc[ "7m" write-string-escaped ;

: normal esc[ "m" write-string-escaped ;

: status
    reverse
    0 status-y at-xy
    modified? [ '*' write-char ] [ space ] if
    current-buffer filename>> :> filename!
    filename [ "untitled" filename! ] unless
    filename write-string

    dot-line-number 1+
    line-count
    dot-column 1+
    "Line %d of %d Col %d " format
    terminal-width over length - :> x
    x filename length 1+ - 1 max spaces
    write-string
    normal
;

: clear-status-line 0 status-y at-xy clear-to-eol ;

: message-y                             -- -> n
    status-y 1+ ;

: message                               -- string ->
    0 message-y at-xy write-string ;

: clear-message-line hide-cursor 0 message-y at-xy clear-to-eol ;

: line-selected? ( line )               -- line -> ?
    mark null? [ f ] return-if

    line number>> mark-line-number >= [
        line number>> dot-line-number <
    ] [
        f
    ] if
;

use: ansi-color

 64  64  64 rgb-background-prefix constant selection-prefix

: repaint-line ( line )                 -- line -> void
    line text>> detab :> detabbed-text

    detabbed-text format-line :> formatted-text

    line line-selected? [
        selection-prefix write-string-escaped
        formatted-text write
        selection-prefix write-string-escaped
        terminal-width detabbed-text string-length - spaces
        "\e[0m" write-string-escaped
    ] return-if

    output-style
    line mark-line eq? [
        0 dot-column detabbed-text string-substring write
        reverse
        dot-column mark-column detabbed-text string-substring write
        normal
        detabbed-text mark-column string-tail write
        terminal-width detabbed-text string-length - spaces
    ] [
        detabbed-text length terminal-width < [
            formatted-text write
            terminal-width detabbed-text string-length - spaces
        ] [
            0 terminal-width detabbed-text substring write
        ] if
    ] if
;

: repaint
    top-line :> line!
    0 :> y!

    [ line y lines-per-page < and ] [
        0 y at-xy
        line repaint-line
        y 1+ y! line next>> line!
    ] while

    [ y lines-per-page < ] [
        0 y at-xy terminal-width spaces
        y 1+ y!
    ] while

    f repaint?!
;

: update-display
    hide-cursor
    repaint? [
        repaint
    ] [
        dot-line-changed? [
            0 dot-y at-xy
            dot-line repaint-line
            f dot-line-changed?!
        ] when
    ] if
    status
    .cursor
    mark [ show-cursor ] unless
;

: adjust-cursor-x
    goal-column dot-offset!
    dot-offset dot-line-length > [
        dot-line-length dot-offset!
    ] when
;

: reframe?                              -- -> ?
    dot-line-number
    top-line-number
    dup lines-per-page 1- +
    between? not ;

: reframe
    lines-per-page 2 /i verify-index :> i!
    dot-line :> line!

    [ i 0 > line prev>> and ] [
        line prev>> line!
        i 1- i!
    ] while

    line top-line!

    t repaint?!
;

: maybe-reframe reframe? [ reframe ] when ;

tuple: undo-record
    mod-count
    action
    dot
    dot-line-number
    dot-offset
    mark
    mark-line-number
    mark-offset
    data ;

symbol: +move+
symbol: +line-edit+
symbol: +delete-line-separator+
symbol: +insert-line-separator+
symbol: +insert-multiline-string+

tuple: compound-undo
    records                             -- vector
;

: new-compound-undo                     -- -> compound-undo
    compound-undo make-instance
    4 <vector> over records<< ;

: add-undo                              -- undo-record compound-undo ->
    records>> vector-push ;

special: +compound-undo+

: push-undo                             -- undo-record ->
    +compound-undo+ get [ add-undo ] [ undo-stack vector-push ] if* ;

: with-compound-undo                    -- quotation ->
    [
        new-compound-undo +compound-undo+ set
        call
        +compound-undo+ get
    ] with-dynamic-scope
    push-undo
;

: pop-undo                              -- -> undo-record
    undo-stack vector-pop ;

: push-redo                             -- undo-record ->
    redo-stack vector-push ;

: pop-redo                              -- -> undo-record
    redo-stack vector-pop ;

: reset-undo undo-stack vector-delete-all ;

: reset-redo redo-stack vector-delete-all ;

: copy-dot                              -- -> position
    dot copy-position ;

: copy-mark                             -- -> position
    mark [ copy-position ] [ f ] if* ;

: new-undo-record                       -- -> undo-record
    undo-record make-instance :> undo-rec

    mod-count undo-rec mod-count<<
    copy-dot undo-rec dot<<
    copy-mark undo-rec mark<<
    dot-line-number undo-rec dot-line-number<<
    dot-offset undo-rec dot-offset<<

    undo-rec
;

: add-undo-move
    new-undo-record
    +move+ over action<<
    push-undo
;

: add-redo-move
    new-undo-record
    +move+ over action<<
    push-redo
;

: undo-move ( undo-rec )                -- undo-record ->
    in-redo? [ add-undo-move ] [ add-redo-move ] if

    mark [ t repaint?! ] when

    undo-rec mod-count>> mod-count!

    undo-rec dot-line-number>> nth-line
    undo-rec dot-offset>>
    make-position dot!

    undo-rec mark>> mark!

    top-line line? assert

    mark [ t repaint?! ] when
;

: new-undo-line-edit                    -- -> undo-record
    new-undo-record
    +line-edit+ over action<<
    dot-line-text over data<<
;

: add-undo-line-edit new-undo-line-edit push-undo ;

: add-redo-line-edit new-undo-line-edit push-redo ;

: undo-line-edit                        -- undo-record ->
    in-redo? [ add-undo-line-edit ] [ add-redo-line-edit ] if

    {
        [ mod-count>> mod-count! ]
        [ dot>> dot! ]
        [ data>> dot-line-text! ]
        [ mark>> mark! ]
    } cleave

    t dot-line-changed?!
;

: add-undo-delete-line-separator
    new-undo-record
    +delete-line-separator+ over action<<
    dot-line-text dot-line-next text>> 2array over data<<
    push-undo
;

: add-redo-delete-line-separator
    new-undo-record
    +delete-line-separator+ over action<<
    push-redo
;

: undo-delete-line-separator  ( undo-rec )      -- undo-record -> void
    undo-rec mod-count>> mod-count!
    undo-rec dot-line-number>> nth-line
    undo-rec dot-offset>>
    make-position dot!
    undo-rec data>>                     -- -> 2array
    dup array-first dot-line-text!
    array-second make-line/1 dot-line insert-after

    t repaint?!
    renumber

    add-redo-delete-line-separator
;

: add-undo-insert-line-separator
    new-undo-record
    +insert-line-separator+ over action<<
    dot-line-text over data<<
    push-undo
;

: add-redo-insert-line-separator
    new-undo-record
    +insert-line-separator+ over action<<
    push-redo
;

: undo-insert-line-separator            -- undo-record -> void
    [ mod-count>> mod-count! ]
    [ dot>> dot! ]
    [ data>> dot-line-text! ]
    tri

    dot-line next>> unlink

    t repaint?!

    add-redo-insert-line-separator
;

: add-undo-insert-multiline-string
    new-undo-record
    +insert-multiline-string+ over action<<
    push-undo
;

: undo-insert-multiline-string          -- undo-record -> void
    f :> prev!
    [ mod-count>> mod-count! ]
    [ dot-line-number>> 1- nth-line prev! ]
    bi

    prev dot-line prev<<
    prev [ dot-line prev next<< ] [
        dot-line dup current-buffer top-line<< top-line!
    ] if

    t repaint?!
    renumber
;

: undo1                                 -- undo-record ->
    dup action>>
    {
        { +move+ [ undo-move ] }
        { +line-edit+ [ undo-line-edit ] }
        { +delete-line-separator+ [ undo-delete-line-separator ] }
        { +insert-line-separator+ [ undo-insert-line-separator ] }
        { +insert-multiline-string+ [ undo-insert-multiline-string ] }
        [ error "unsupported" ]
    } case
    maybe-reframe
;

: undo
    undo-stack empty? [
        "Nothing to undo" message
    ] [
        pop-undo dup compound-undo? [
            records>> vector-reverse! ' undo1 each
        ] [
            undo1
        ] if
        "Undo!" message
    ] if
;

: beginning-of-buffer
    add-undo-move
    unmark
    first-line top-line!
    first-line 0 make-position dot!
    0 goal-column!
    t repaint?!
;

: end-of-buffer
    add-undo-move
    unmark
    last-line dot-line!
    dot-line-length dot-offset!
    dot-offset goal-column!

    reframe? [
        dot-line-number lines-per-page 1- - nth-line top-line!
        t repaint?!
    ] when
;

: gotoline-internal                     -- line-number
    1- 0 max line-count 1- min
    dup dot-line-number <> [
        add-undo-move
        unmark
        nth-line dot-line!
        0 dot-offset!
        maybe-reframe
    ] [
        drop
    ] if
;

: gotoline
    0 message-y at-xy "Line number: " accept-string
    clear-message-line
    string>number [ gotoline-internal ] when*
;

: do-home
    add-undo-move

    unmark

    0 dot-offset!
    0 goal-column!
;

: end-of-line
    add-undo-move

    unmark

    dot-line-length dot-offset!
    dot-offset goal-column!
;

: beginning-of-block
    mark [ mark-offset dot-offset min dot-offset! ] when
;

: end-of-block
    mark [ mark-offset dot-offset max dot-offset! ] when
;

: do-left
    last-command ' do-left eq? [ add-undo-move ] unless

    mark [
        beginning-of-block
        unmark
    ] return-if

    dot-offset 0 > [
        dot-offset 1- dot-offset!
        dot-offset goal-column!
    ] [
        dot-line-prev [
            dot-line-prev dot-line!
            dot-line-length dot-offset!
            dot-offset goal-column!
            reframe? [
                dot-line top-line!
                t repaint?!
            ] when
        ] when
    ] if
;

: do-right
    last-command ' do-right eq? [ add-undo-move ] unless

    mark [
        end-of-block
        unmark
    ] return-if

    dot-offset dot-line-length < [
        dot-offset 1+ dot-offset!
        dot-offset goal-column!
    ] [
        dot-line-next [
            dot-line-next dot-line!
            0 dot-offset!
            dot-offset goal-column!
            reframe? [
                dot-line-number lines-per-page 1- - nth-line top-line!
                t repaint?!
            ] when
        ] when
    ] if
;

: do-down
    reset-redo

    dot-line-next [
        last-command ' do-down eq? [ add-undo-move ] unless
        dot-line-next dot-line!
        unmark
        reframe? [
            dot-line-number lines-per-page 1- - nth-line top-line!
            t repaint?!
        ] when
        adjust-cursor-x
    ] when
;

: do-up
    reset-redo

    dot-line-prev [
        last-command ' do-up eq? [ add-undo-move ] unless
        dot-line-prev dot-line!
        unmark
        reframe? [
            dot-line top-line!
            t repaint?!
        ] when
        adjust-cursor-x
    ] when
;

: do-window-up
    top-line prev>> [
        top-line prev>> top-line!
        dot-line-number bottom-line-number > [
            add-undo-move
            bottom-line dot-line!
            0 dot-offset!
        ] when
        t repaint?!
    ] when
;

: do-window-down
    top-line next>> [
        top-line next>> top-line!
        dot-line-number top-line-number < [
            add-undo-move
            top-line dot-line!
            0 dot-offset!
        ] when
        t repaint?!
    ] when
;

: do-page-down
    add-undo-move

    dot-y :> goal-y

    top-line-number lines-per-page + last-line-number > [
        last-line dot-line!
        adjust-cursor-x
    ] return-if

    top-line :> line!
    0 :> i!

    [ line next>> i lines-per-page < and ] [
        i 1+ i! line next>> line!
    ] while

    line top-line!

    goal-y i!

    [ line next>> i 0 > and ] [
        i 1- i! line next>> line!
    ] while

    line dot-line!

    t repaint?!
    adjust-cursor-x
;

: do-page-up
    add-undo-move

    dot-y :> goal-y

    dot-line :> line!
    0 :> i!

    [ line prev>> i lines-per-page < and ] [
        i 1+ i! line prev>> line!
    ] while

    line dot-line!

    goal-y i!

    [ line prev>> i 0 > and ] [
        i 1- i! line prev>> line!
    ] while

    line top-line!

    t repaint?!
    adjust-cursor-x
;

: insert-line-separator
    add-undo-insert-line-separator
    dot-line-tail make-line/1 :> new-line
    dot-line-head dot-line-text!
    new-line dot-line insert-after
    new-line dot-line!
    0 dot-offset!
    0 goal-column!
    modified
    t repaint?!
    renumber
;

: insert-spaces ( n )                   -- n ->
    -- no undo
    dot-line-head string>sbuf :> sb
    n [ '\s' sb sbuf-push ] times
    dot-line-tail sb sbuf-append-string
    sb sbuf>string dot-line-text!
    dot-offset n + dot-offset!
    t dot-line-changed?!
    modified
;

: do-tab
    add-undo-line-edit
    4 dot-offset 4 mod - insert-spaces
;

: get-indentation-column                -- line -> column
    dup empty? [ drop 0 ] return-if

    detab
    [ char-code 32 > ] find             -- index/f element/f
    [ drop 0 ] unless
;

: delete-indentation                    -- string -> string'
    dup empty? [ ] return-if

    :> text

    text [ char-code 32 > ] find        -- index/f element/f
    [ text swap string-tail ] [ drop "" ] if
;

: newline-and-indent
    dot-line-text get-indentation-column :> indent-col

    [
        insert-line-separator
        add-undo-line-edit
        dot-line-text delete-indentation dot-line-text!
        indent-col 0 > [
            indent-col insert-spaces
        ] when
    ] with-compound-undo
;

: string-remove-nth                     -- n string1 -> string2
    check-bounds

    :> s
    :> n

    s n string-head
    n 1+ s string-length < [
        s n 1+ string-tail string-append
    ] when
;

: delete-normal-char
    add-undo-line-edit
    dot-offset dot-line-text string-remove-nth dot-line-text!
    t dot-line-changed?!
;

: delete-line-separator
    dot-line-next [
        dot-offset dot-line-length eq? [
            add-undo-delete-line-separator
            dot-line-text dot-line-next text>> string-append dot-line-text!
            dot-line-next unlink
            t repaint?!
        ] when
    ] when
;

: do-delete
    dot-offset dot-line-length < [
        delete-normal-char
    ] [
        delete-line-separator
    ] if
    modified
;

: do-bs
    {
        { [ dot-offset 0 > ] [
            add-undo-line-edit
            dot-offset 1-
            [ dot-line text>> string-remove-nth dot-line text<< ] [ dot-offset! ] bi
            t dot-line-changed?!
            modified
        ] }
        { [ dot-line-prev ] [
            [
                new-compound-undo +compound-undo+ set
                do-left
                delete-line-separator
                modified
                +compound-undo+ get
            ] with-dynamic-scope
            push-undo
        ] }
        -- do nothing if dot is at beginning of buffer
        [ ]
    } cond
;

: do-normal-char                        -- char ->
    reset-redo

    current-command assert-false
    ' do-normal-char current-command!
    last-command ' do-normal-char eq? [ add-undo-line-edit ] unless

    dot-line-head string>sbuf :> sb
    sb sbuf-push
    dot-line-tail sb sbuf-append-string
    sb sbuf>string dot-line text<<
    dot-offset 1+ dot-offset!
    t dot-line-changed?!
    modified
    dot-offset goal-column!
;

use: kill-ring

: kill-line
    dot-line-tail length zero? [
        delete-line-separator
        current-buffer eol>> verify-string append-kill
    ] [
        add-undo-line-edit
        dot-line-tail append-kill
        dot-line-head dot-line-text!
        t dot-line-changed?!
    ] if
    modified
;

: select-line
    dot-line-prev dup line-selected? and [
        -- extend selection if possible
        dot-line-next [
            dot-line-next dot-line! 0 dot-offset!
        ] when
    ] [
        dot-line-next [
            add-undo-move
            dot-line 0 make-position mark!
            dot-line-next dot-line! 0 dot-offset!
        ] when
    ] if

    t repaint?!
;

: insert-multiline-string               -- string --> void
    -- insert string before line containing dot
    add-undo-insert-multiline-string

    dot-line-prev :> prev!

    string-lines [
        make-line/1 dup prev insert-after prev!
    ] each

    renumber
;

: cut-region ( region )
    region begin-line region end-line eq? [

        region begin-line dot-line assert-eq

        region region-as-string append-kill

        add-undo-line-edit
        dot-line-text region begin-offset string-head
        dot-line-text region end-offset string-tail
        string-append dot-line-text!

        unmark
        region begin-offset dot-offset!
        t dot-line-changed?!
        modified
    ] return-if

;

: cut-line
;

: cut
    mark [ dot make-region/2 cut-region ] [ cut-line ] if* ;

: copy-line
    dot-line-text "\n" string-append append-kill
    "Line copied to kill ring" message
;

: copy-region                           -- region -> void
    region-as-string append-kill
    "Region copied to kill ring" message
;

: copy
    mark [ dot make-region/2 copy-region ] [ copy-line ] if* ;

: paste/1                               -- string -> void
    1 ?enough
    :> s
    '\n' s string-index [
        s insert-multiline-string
        t repaint?!
    ] [
        add-undo-line-edit
        dot-line-head s string-append
        dot-line-tail string-append
        dot-line-text!
        dot-offset s string-length + dot-offset!
        t dot-line-changed?!
    ] if
    modified
;

: paste
    last-kill [ paste/1 ] [ "Kill ring is empty" message ] if*
;

: cycle-paste
    last-command ' paste eq? [
        next-kill [ undo paste/1 ] when*
    ] [
        paste
    ] if

    ' paste current-command!
;

: redo1                                 -- undo-record ->
    dup action>> {
        { +move+ [ undo-move ] }
        { +line-edit+ [ undo-line-edit ] }
        { +delete-line-separator+ [ drop delete-line-separator ] }
        { +insert-line-separator+ [ drop insert-line-separator ] }
        [ error "unsupported" ]
    } case
    maybe-reframe
;

: redo
    redo-stack empty? [
        "Nothing to redo" message
    ] [
        t in-redo?!
        pop-redo
        redo1
        f in-redo?!
        "Redo!" message
    ] if
;

: make-backup
    current-buffer filename>> [
        dup file-exists?
        [ dup "~" string-append copy-file ] [ drop ] if
    ] when*
;

: do-save
    current-buffer filename>> :> filename!

    filename [
        0 message-y at-xy "File: " accept-string filename!
        clear-message-line
        filename file-exists? [
            0 message-y at-xy "Overwrite existing file? (yes or no) " accept-string
            "yes" <> [ f filename! ] when
        ] when
    ] unless

    filename f eq? [ ] return-if

    -- save the current buffer to disk
    output-style
    "Saving..." message

    make-backup

    current-buffer eol>> :> eol
    line-count 80 * <sbuf> :> sb
    nano-count :> start-ns

    -- all lines but the last are followed by eol
    first-line :> line!
    [ line last-line neq? ] [
        line text>> sb sbuf-append-string
        eol sb sbuf-append-string
        line next>> line!
    ] while

    -- last line, no eol
    last-line text>> sb sbuf-append-string

    sb sbuf>string filename set-file-contents

    nano-count start-ns - :> elapsed-ns

    mod-count mod-count-last-save!

    elapsed-ns 1000000 /i "Saving...done (%s ms)" format message

    current-buffer filename>> [
        filename canonical-path current-buffer filename<<
    ] unless
;

: do-quit
    buffer-list [ buffer-modified? ] count :> n

    n zero? [
        t done?!
    ] [
        n dup 1 > "s" "" ?
        "Really exit with %s modified buffer%s? (yes or no) " format
        accept-string "yes" string= done?!
        clear-message-line
    ] if
;

: confirm-kill-current-buffer           -- -> ?
    f :> confirmed?!

    modified? [
        0 message-y at-xy prompt-style "Save file? (y or n) " write-string
        input-style key 'y' eq? [ do-save ] when
        clear-message-line
    ] when

    modified? [
        0 message-y at-xy
        "Abandon changes? (yes or no) " accept-string
        "yes" = [ t confirmed?! ] when
        clear-message-line
    ] when

    confirmed?
;

: kill-current-buffer
    buffer-list [ current-buffer eq? ] find     -- index/f element/f
    current-buffer assert-eq                    -- index
    :> n!                                       --

    n buffer-list vector-remove-nth!

    n buffer-list length < [ n 1- n! ] unless

    n buffer-list vector-nth current-buffer!
    t repaint?!
;

: kill-buffer
    f :> confirmed?!

    modified? [ confirm-kill-current-buffer confirmed?! ] when

    modified? not confirmed? or [
        buffer-list length 1 = [
            0 buffer-list vector-set-length
            t done?!
        ] [
            kill-current-buffer
        ] if
    ] when
;

: buffer-append-line ( line buf )       -- line buffer -> void
    buf last-line>> line prev<<
    buf last-line>> [ line swap next<< ] when*
    line buf last-line<<
    buf first-line>> [
        line buf first-line<<
    ] unless
;

: create-buffer                         -- void -> void
    make-buffer :> buf
    "" 0 make-line/2

    [ buf buffer-append-line ]
    [ 0 make-position buf dot<< ]
    bi

    buf buffer-list vector-push
    buf current-buffer!

    dot-line top-line!
;

: create-buffer/2                       -- filename line-number -> void
    verify-index  :> line-number
    verify-string :> filename

    make-buffer :> buf

    filename buf filename<<

    filename path-extension [ modes at buf mode<< ] when*

    filename file-contents :> contents

    contents string-lines verify-vector :> lines

    contents empty? [
        "" lines vector-push
    ] [
        -- detect eol
        '\r' contents string-index CR+LF LF ? buf eol<<
        contents string-last-char '\n' eq? [
            "" lines vector-push
        ] when
    ] if

    lines [
        make-line/2 buf buffer-append-line
    ] each-index

    buf first-line>> line? assert
    buf last-line>>  line? assert

    buf first-line>> 0 make-position buf dot<<
    buf first-line>> buf top-line<<

    buf buffer-list vector-push

    buf current-buffer!

    line-number 1- 0 max line-count 1- min nth-line dot-line!
    0 dot-offset!

    maybe-reframe
;

: find-file-to-edit ( arg )             -- arg -> path/f
    arg find-file [
        arg ensure-feline-extension find-file
    ] unless*
;

: find-buffer ( filename )              -- filename -> buffer/f
    buffer-list [ filename>> filename = ] find  -- index/f element/f
    nip
;

: open-file
    0 message-y at-xy "File: " accept-string :> arg
    clear-message-line

    arg find-file-to-edit :> filename

    filename [
        filename find-buffer [
            current-buffer!
            t repaint?!
        ] [
            filename 1 create-buffer/2
            t repaint?!
        ] if*
    ] when
;

: next-buffer
    buffer-list length 2 < [ ] return-if

    buffer-list [ current-buffer eq? ] find     -- index/f element/f
    current-buffer assert-eq                    -- index
    1+ dup buffer-list length < [ drop 0 ] unless

    buffer-list vector-nth current-buffer!
    t repaint?!
;

: previous-buffer
    buffer-list length 2 < [ ] return-if

    buffer-list [ current-buffer eq? ] find     -- index/f element/f
    current-buffer assert-eq                    -- index
    1 - dup 0 >= [ drop buffer-list length 1 - ] unless

    buffer-list vector-nth current-buffer!
    t repaint?!
;

: identifier-at-dot                     -- -> string/f
    dot-offset dot-line-length 1- min 0 max :> offset!

    offset dot-line-text [ '\s' eq? ] find-last-from drop :> start!

    -- get to first non-blank char
    start [ start 1+ start! ] [ 0 start! ] if

    start dot-line-text string-skip-to-whitespace       -- -> index/f
    dot-line-length or [
        start swap dot-line-text string-substring
    ] [
        f
    ] if* ;

: goto-definition                       -- symbol -> void
    symbol-location :> line-number :> filename
    filename [
        filename find-buffer [
            current-buffer!
            line-number gotoline-internal
        ] [
            filename line-number create-buffer/2
        ] if*
        maybe-reframe
        t repaint?!
    ] when
;

: find-definition
    0 message-y at-xy "Word: " accept-string
    clear-message-line
    find-qualified-name [
        goto-definition
    ] [
        all-words [ symbol-name over = ] filter nip
        dup length {
            { 0 [ drop ] }
            { 1 [ first goto-definition ] }
            [
                -- more than 1 match
                drop
                0 message-y at-xy
                [ symbol-qualified-name write-string space ] each
            ]
        } case
    ] if ;

: find-definition-at-dot
    identifier-at-dot
    find-qualified-name [
        goto-definition
    ] [
        all-words [ symbol-name over = ] filter nip
        dup length {
            { 0 [ drop ] }
            { 1 [ first goto-definition ] }
            [
                -- more than 1 match
                drop
                0 message-y at-xy
                [ symbol-qualified-name write-string space ] each
            ]
        } case
    ] if ;

use: search

var base-keymap

var escape-keymap

: do-escape
    "ESC-" message
    ekey
    clear-message-line
    escape-keymap at [
        dup current-command!
        call-symbol
    ] when*
;

: lookup-key                            -- key -> symbol/f
    base-keymap at ;

: initialize-base-keymap
    base-keymap [ ] return-if

    128 <hashtable> :> keymap

    ' do-bs                     key:del         keymap set-at   -- Linux
    ' do-bs                     key:backspace   keymap set-at   -- Windows
    ' do-delete                 key:delete      keymap set-at
    ' do-home                   key:home        keymap set-at
    ' end-of-line               key:end         keymap set-at
    ' do-left                   key:left        keymap set-at
    ' do-right                  key:right       keymap set-at
    ' do-up                     key:up          keymap set-at
    ' do-down                   key:down        keymap set-at
    ' do-window-up              key:ctrl-up     keymap set-at
    ' do-window-down            key:ctrl-down   keymap set-at
    ' do-page-up                key:pageup      keymap set-at
    ' do-page-down              key:pagedown    keymap set-at
    ' beginning-of-buffer       key:ctrl-home   keymap set-at
    ' end-of-buffer             key:ctrl-end    keymap set-at
    ' gotoline                  key:ctrl-g      keymap set-at
    ' do-quit                   key:ctrl-q      keymap set-at
    ' do-save                   key:ctrl-s      keymap set-at
    ' kill-buffer               key:ctrl-w      keymap set-at
    ' newline-and-indent        key:enter       keymap set-at
    ' do-find                   key:ctrl-f      keymap set-at
    ' repeat-search-forward     key:f3          keymap set-at
    ' repeat-search-backward    key:shift-f3    keymap set-at
    ' do-tab                    key:tab         keymap set-at
    ' kill-line                 key:ctrl-k      keymap set-at
    ' undo                      key:ctrl-z      keymap set-at
    ' undo                      key:ctrl-u      keymap set-at
    ' redo                      key:ctrl-y      keymap set-at
    ' do-escape                 key:escape      keymap set-at
    ' open-file                 key:ctrl-o      keymap set-at
    ' next-buffer               key:alt-right   keymap set-at
    ' previous-buffer           key:alt-left    keymap set-at
    ' find-definition           key:ctrl-t      keymap set-at
    ' select-line               key:ctrl-l      keymap set-at
    ' cut                       key:ctrl-x      keymap set-at
    ' copy                      key:ctrl-c      keymap set-at
    ' paste                     key:ctrl-v      keymap set-at

    keymap base-keymap!
;

: initialize-escape-keymap
    escape-keymap [ ] return-if

    128 <hashtable> :> keymap

    ' quit                              key:escape      keymap set-at
    ' find-definition-at-dot            '.'             keymap set-at
    ' cycle-paste                       'v'             keymap set-at
    ' search-forward-word-at-dot        key:down        keymap set-at
    ' search-backward-word-at-dot       key:up          keymap set-at
    ' search-list-occurrences           'l'             keymap set-at

    keymap escape-keymap!
;

: initialize-global-keymaps
    initialize-base-keymap
    initialize-escape-keymap
;

-- var feral-log-fd

-- "feral-log" file-create-write feral-log-fd!

-- : log                                   -- string -> void
--     feral-log-fd file-write-line
--     feral-log-fd file-flush ;

-- "startup" log
: log drop ;

: do-mouse                              -- key -> void
    dup fixnum? not [ drop ] return-if

    :> keycode
    f :> button! f :> x! f :> y!
--     keycode fixnum>hex log
    keycode 24 rshift 0x1b5b4d = [
        -- "\e[M"
        keycode 0xff bitand 32 - y!
        keycode 0xff00 bitand 8 rshift 32 - x!
        keycode 0xff0000 bitand 16 rshift 3 bitand zero? [
            -- left button pressed
--             x y "left button pressed x = %d y = %d" format log
            top-line-number y + gotoline-internal
            x 1- 0 max dot-line-length min dot-offset!
        ] when
    ] when
;

: do-command                            -- key ->
    dup lookup-key [
        nip dup current-command! call-symbol
    ] [
        linux? [ do-mouse ] [ drop ] if
    ] if* ;

: dispatch                              -- key ->
    current-command last-command!
    f current-command!
    dup printable-char? [ do-normal-char ] [ do-command ] if ;

: edit-loop
    f done?!
    [ done? ] [
        update-display
        ekey
        clear-message-line
        dispatch
    ] until

    -- clean up
    f current-buffer!
    f buffer-list!
    gc
;

: initialize-editor
    16 <vector> buffer-list!
    initialize-kill-ring
    initialize-global-keymaps
;

: edit1
    use-alternate-screen-buffer

    page
    normal
    maybe-reframe
    t repaint?!

    linux? [
        -- enable mouse tracking
        "\e[?1000h" write-string-escaped
    ] when

    edit-loop

    clear-status-line
    clear-message-line
    0 lines-per-page at-xy
    show-cursor

    use-default-screen-buffer
;

: edit-file ( name )                    -- name -> void
    name find-file-to-edit [
        initialize-editor
        1 create-buffer/2
        edit1
    ] [
        name error-file-not-found
    ] if*
;

: edit-definition                       -- symbol ->
    symbol-location 2dup and
    [
        initialize-editor
        create-buffer/2
        edit1
    ] [
        2drop
    ] if
;

: edit-new
    initialize-editor
    create-buffer
    edit1
;

: edit
    parse-token dup [
        find-name [ edit-definition ] [ edit-file ] if
    ] [
        drop edit-new
    ] if
;

: ed
    use-alternate-screen-buffer
    page
    normal
    t repaint?!
    edit-loop
    clear-status-line
    clear-message-line
    0 lines-per-page at-xy
    show-cursor
    use-default-screen-buffer
;
