-- Copyright (C) 2017-2019 Peter Graves <gnooth@gmail.com>

-- This program is free software: you can redistribute it and/or modify
-- it under the terms of the GNU General Public License as published by
-- the Free Software Foundation, either version 3 of the License, or
-- (at your option) any later version.

-- This program is distributed in the hope that it will be useful,
-- but WITHOUT ANY WARRANTY; without even the implied warranty of
-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
-- GNU General Public License for more details.

-- You should have received a copy of the GNU General Public License
-- along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feline accessors ;
in: editor

tuple: undo-record
    mod-count
    action
    dot
    dot-line-number
    dot-offset
    mark
    mark-line-number
    mark-offset
    data ;

symbol: +move+
symbol: +line-edit+
symbol: +delete-line-separator+
symbol: +insert-line-separator+
symbol: +insert-multiline-string+

tuple: compound-undo
    records                             -- vector
;

: new-compound-undo                     -- -> compound-undo
    compound-undo make-instance
    4 <vector> over records<< ;

: add-undo                              -- undo-record compound-undo ->
    records>> vector-push ;

special: +compound-undo+

: push-undo                             -- undo-record -> void
    +compound-undo+ get [ add-undo ] [ undo-stack vector-push ] if* ;

: with-compound-undo                    -- quotation ->
    [
        new-compound-undo +compound-undo+ set
        call
        +compound-undo+ get
    ] with-dynamic-scope
    push-undo
;

: pop-undo                              -- -> undo-record
    undo-stack vector-pop ;

special: +compound-redo+

: push-redo                             -- undo-record ->
    +compound-redo+ get [ add-undo ] [ redo-stack vector-push ] if* ;

: with-compound-redo                    -- quotation ->
    [
        new-compound-undo +compound-redo+ set
        call
        +compound-redo+ get
    ] with-dynamic-scope
    push-redo
;

: pop-redo                              -- -> undo-record
    redo-stack vector-pop ;

: reset-undo undo-stack vector-delete-all ;

: reset-redo redo-stack vector-delete-all ;

: copy-dot                              -- -> position
    dot copy-position ;

: copy-mark                             -- -> position
    mark [ copy-position ] [ f ] if* ;

: new-undo-record                       -- -> undo-record
    undo-record make-instance :> undo-rec

    mod-count undo-rec mod-count<<

    copy-dot undo-rec dot<<
    dot-line-number undo-rec dot-line-number<<
    dot-offset undo-rec dot-offset<<

    copy-mark undo-rec mark<<
    mark [
        mark-line-number undo-rec mark-line-number<<
        mark-offset undo-rec mark-offset<<
    ] when

    undo-rec
;

: restore-dot                           -- undo-record -> void
    [ dot-line-number>> nth-line ]
    [ dot-offset>> ] bi make-position dot! ;

: restore-mark                          -- undo-record -> void
    mark-line-number>> [
        [ mark-line-number>> nth-line ]
        [ mark-offset>> ] bi make-position
    ] [ f ] if mark! ;

: add-undo-move
    new-undo-record
    +move+ >>action
    push-undo ;

: add-redo-move
    new-undo-record
    +move+ >>action
    push-redo ;

: undo-move ( undo-rec )                -- undo-record ->
    in-redo? [ add-undo-move ] [ add-redo-move ] if

    mark [ t repaint?! ] when

    undo-rec mod-count>> mod-count!

    undo-rec restore-dot

    undo-rec mark>> mark!

    top-line line? assert

    mark [ t repaint?! ] when
;

: new-undo-line-edit                    -- -> undo-record
    new-undo-record
    +line-edit+ over action<<
    dot-line-text over data<<
;

: add-undo-line-edit new-undo-line-edit push-undo ;

: add-redo-line-edit new-undo-line-edit push-redo ;

: undo-line-edit                        -- undo-record -> void
    in-redo? [ add-undo-line-edit ] [ add-redo-line-edit ] if

    {
        [ mod-count>> mod-count! ]
        [ restore-dot ]
        [ data>> dot-line-text! ]
        [ mark>> mark! ]
    } cleave

    t dot-line-changed?!
;

: add-undo-delete-line-separator
    new-undo-record
    +delete-line-separator+ >>action
    dot-line-text dot-line-next text>> 2array >>data
    push-undo
;

: add-redo-delete-line-separator
    new-undo-record
    +delete-line-separator+ >>action
    push-redo
;

: undo-delete-line-separator  ( undo-rec )      -- undo-record -> void
    undo-rec mod-count>> mod-count!
    undo-rec restore-dot
    undo-rec data>>                     -- -> 2array
    dup array-first dot-line-text!
    array-second make-line/1 dot-line insert-after

    t repaint?!
    renumber

    add-redo-delete-line-separator
;

: add-undo-insert-line-separator
    new-undo-record
    +insert-line-separator+ >>action
    dot-line-text >>data
    push-undo
;

: add-redo-insert-line-separator
    new-undo-record
    +insert-line-separator+ >>action
    push-redo
;

: undo-insert-line-separator            -- undo-record -> void
    [ mod-count>> mod-count! ]
    [ restore-dot ]
    [ data>> dot-line-text! ]
    tri

    dot-line next>> unlink

    t repaint?!

    add-redo-insert-line-separator
;

: add-undo-insert-multiline-string
    new-undo-record
    +insert-multiline-string+ over action<<
    push-undo
;

: undo-insert-multiline-string          -- undo-record -> void
    f :> prev!
    [ mod-count>> mod-count! ]
    [ dot-line-number>> 1- nth-line prev! ]
    bi

    prev dot-line prev<<
    prev [ dot-line prev next<< ] [
        dot-line dup current-buffer top-line<< top-line!
    ] if

    t repaint?!
    renumber
;
