// Copyright (C) 2017-2019 Peter Graves <gnooth@gmail.com>

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.

using: feral-core feline accessors ;
in: editor

tuple: undo-record
    mod-count
    action
    dot
    dot-line-number
    dot-offset
    mark
    mark-line-number
    mark-offset
    data
    redo-data ;

symbol: +move+
symbol: +line-edit+
symbol: +delete-line-separator+
symbol: +insert-line-separator+
symbol: +insert-multiline-string+

tuple: compound-undo
    records                             // vector
;

: new-compound-undo                     // -> compound-undo
    compound-undo make-instance
    4 <vector> over records<< ;

: add-undo                              // undo-record compound-undo ->
    records>> vector-push ;

special: +compound-undo+

: push-undo                             // undo-record -> void
    +compound-undo+ get [ add-undo ] [ undo-stack vector-push ] if* ;

: with-compound-undo                    // quotation ->
    [
        new-compound-undo +compound-undo+ set
        call
        +compound-undo+ get
    ] with-dynamic-scope
    push-undo
;

: pop-undo                              // -> undo-record
    undo-stack vector-pop ;

special: +compound-redo+

: push-redo                             // undo-record ->
    +compound-redo+ get [ add-undo ] [ redo-stack vector-push ] if* ;

: with-compound-redo                    // quotation ->
    [
        new-compound-undo +compound-redo+ set
        call
        +compound-redo+ get
    ] with-dynamic-scope
    push-redo
;

: pop-redo                              // -> undo-record
    redo-stack vector-pop ;

: reset-undo undo-stack vector-delete-all ;

: reset-redo redo-stack vector-delete-all ;

: new-undo-record                       // -> undo-record
    undo-record make-instance :> undo-rec

    mod-count undo-rec mod-count<<

    copy-dot undo-rec dot<<
    dot-line-number undo-rec dot-line-number<<
    dot-offset undo-rec dot-offset<<

    copy-mark undo-rec mark<<
    mark [
        mark-line-number undo-rec mark-line-number<<
        mark-offset undo-rec mark-offset<<
    ] when

    undo-rec
;

: restore-dot                           // undo-record -> void
    [ dot-line-number>> nth-line ]
    [ dot-offset>> ] bi make-position dot! ;

: restore-mark                          // undo-record -> void
    dup mark-line-number>> [
        [ mark-line-number>> nth-line ]
        [ mark-offset>> ] bi make-position
    ] [ drop f ] if mark! ;

: add-undo-move
    new-undo-record
    +move+ >>action
    push-undo ;

: add-redo-move
    new-undo-record
    +move+ >>action
    push-redo ;

: undo-move ( undo-rec )                // undo-record ->
    in-redo? [ add-undo-move ] [ add-redo-move ] if

    mark [ t repaint! ] when

    undo-rec mod-count>> mod-count!

    undo-rec restore-dot

    undo-rec restore-mark

    top-line line? assert

    mark [ t repaint! ] when
;

: new-undo-line-edit                    // -> undo-record
    new-undo-record
    +line-edit+ over action<<
    dot-line-text over data<<
;

: add-undo-line-edit new-undo-line-edit push-undo ;

: add-redo-line-edit new-undo-line-edit push-redo ;

: undo-line-edit                        // undo-record -> void
    in-redo? [ add-undo-line-edit ] [ add-redo-line-edit ] if

    {
        [ mod-count>> mod-count! ]
        [ restore-dot ]
        [ data>> dot-line-text! ]
        [ mark>> mark! ]
    } cleave

    t dot-line-changed!
;

: add-undo-delete-line-separator
    new-undo-record
    +delete-line-separator+ >>action
    dot-line-text dot-line-next text>> 2array >>data
    push-undo
;

: add-redo-delete-line-separator
    new-undo-record
    +delete-line-separator+ >>action
    push-redo
;

: undo-delete-line-separator  ( undo-rec )      // undo-record -> void
    undo-rec mod-count>> mod-count!
    undo-rec restore-dot
    undo-rec data>>                     // -> 2array
    dup array-first dot-line-text!
    array-second make-line/1 dot-line insert-after

    t repaint?!
    renumber

    add-redo-delete-line-separator
;

: add-undo-insert-line-separator
    new-undo-record
    +insert-line-separator+ >>action
    dot-line-text >>data
    push-undo
;

: add-redo-insert-line-separator
    new-undo-record
    +insert-line-separator+ >>action
    push-redo
;

: undo-insert-line-separator            // undo-record -> void
    [ mod-count>> mod-count! ]
    [ restore-dot ]
    [ data>> dot-line-text! ]
    tri

    dot-line next>> unlink

    t repaint?!

    add-redo-insert-line-separator
;

: add-undo-insert-multiline-string ( s ) // string -> void
    new-undo-record
    dot-line-text >>data
    s >>redo-data
    +insert-multiline-string+ >>action
    push-undo
;

: add-redo-insert-multiline-string ( s ) // string -> void
    new-undo-record
    s >>data
    +insert-multiline-string+ >>action
    push-redo ;

: undo-insert-multiline-string ( undo-rec ) // undo-record -> void

    // insert-multiline-string leaves dot at the end of the inserted string
    // so dot-line is the last line of the inserted line sequence
    dot-line :> last

    undo-rec mod-count>> mod-count!
    undo-rec restore-dot

    dot-line :> first

    undo-rec redo-data>> add-redo-insert-multiline-string

    last next>> dot-line next<<
    last next>> [ dot-line swap prev<< ] when*

    undo-rec data>> dot-line-text!

    renumber
    t repaint!
;

symbol: +delete-line+

: add-undo-delete-line
    new-undo-record
    dot-line-text >>data
    +delete-line+ >>action
    push-undo ;

: add-redo-delete-line
    new-undo-record
    +delete-line+ >>action
    push-redo ;

: undo-delete-line ( undo-rec )         // undo-record -> void
    dot-line-next [
        undo-rec data>> make-line/1 dot-line insert-before
        undo-rec mod-count>> mod-count!
        undo-rec restore-dot
    ] [
        // last line
        undo-rec data>> make-line/1 dot-line insert-after
        undo-rec mod-count>> mod-count!
        undo-rec restore-dot
    ] if
    renumber
    t repaint!
    add-redo-delete-line
;

symbol: +delete-region+

: add-undo-delete-region ( region-or-string )
    region-or-string region? [
        region-or-string region-as-string
    ] [
        region-or-string verify-string
    ] if :> s

    new-undo-record
    s >>data
    +delete-region+ >>action
    push-undo ;

: add-redo-delete-region
    new-undo-record
    +delete-region+ >>action
    push-redo ;

: undo-delete-region ( undo-rec )       // undo-record -> void
    add-redo-delete-region

    undo-rec data>> insert-string
    undo-rec mod-count>> mod-count!
    undo-rec restore-dot
    undo-rec restore-mark

    renumber
    t repaint! ;

: undo1                                 // undo-record ->
    dup action>>
    {
        { +move+ [ undo-move ] }
        { +line-edit+ [ undo-line-edit ] }
        { +delete-line-separator+ [ undo-delete-line-separator ] }
        { +insert-line-separator+ [ undo-insert-line-separator ] }
        { +insert-multiline-string+ [ undo-insert-multiline-string ] }
        { +delete-line+ [ undo-delete-line ] }
        { +delete-region+ [ undo-delete-region ] }
        [ error "unsupported" ]
    } case
    maybe-reframe
;

use: mini

: undo
    undo-stack empty? [
        "Nothing to undo" message
    ] [
        pop-undo dup compound-undo? [
            [ records>> vector-reverse! ' undo1 each ] with-compound-redo
        ] [
            undo1
        ] if
        "Undo!" message
    ] if
;
